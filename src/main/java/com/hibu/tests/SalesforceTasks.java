package com.hibu.tests;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

//import org.apache.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.Platform;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;



public class SalesforceTasks extends PreRequisites {
	
	public static Logger LOGS = LogManager.getLogger(SalesforceTasks.class.getName());
	//public static Logger LOGS = Logger.getLogger(SalesforceTasks.class.getName());
	// static String ActRes, ExpRes, Status, ImagePath, ImageName, ImgName;
	WebDriverWait wait;
	
	PreRequisites pr = new PreRequisites();
	ScreenshotPrinter ScreenshotPrinter= new ScreenshotPrinter();
	ExportResults ExportResults= new ExportResults();
	InflightOrderQry InflightOrderQry = new InflightOrderQry();
	DriverFactory DF = new DriverFactory();
	public  String TotSpend, consType, ConPOSPhoneNo, POSConphoneNo, RepContactPhoneNo;
	public  String SelectConsltnRslt, paymntRslt, submitRslt = "Pass", User, OneTimeFeeQuoteDetls,
			BusinessNameQuoteDetls;

	public String YextLoginResults,AELoginResult,PaymtAmtPaymentPg, PhoneNumPaymentPg, confirmationNumber, ParentWindow;
	 public String ActResOpp, ActResCase, ExpResCase, ExpResProd, ActResProd, SalesForceLoginResult,
	ValidateOrderPlacementRes, CaseType, LeadCreationResult, searchAccountResult, ValidateProductResult,
	existingCustomerResult, validateDuplicayResults, ExpResType, ActResExt, ExpOpp, ActOpp, ActResType,
	ActStatus, ExpStatus, ActResAtc, ExpResAtc, ExpResDup;
	 public String myalertvalidation, myalert2validation, ExpValMsg, FStrtVal;
	 public String ValidateOpptResult, CreateQuoteResult, ValidateQuoteRes, AddProdResult, FutStrtRes, EnterBudgetResul;
	 public String ActoppStatus, ExtoppStatus, ActProdCompName, caseType, consPhno, caseStatus, expCaseStatus,
	expCaseType, expConsType, expskillgroup;
	 ArrayList<String> ProductDescription = new ArrayList<String>();
	 ArrayList<String> ProductName = new ArrayList<String>();
	 ArrayList<String> getSubscriptionID = new ArrayList<String>();
	 String AllProductname, pname, SRep, ExistingProduct;
	 String validation, QPageQNo, oneTimeFeesTotal = "", TaxTotal = "", MonthlyInvestmentTotal = "",
			Oppwindow = "", ContractDetailsResult;
	 Properties DP = pr.loadPropertiesFiles("Daywise");
	public  String NewOppturl, OptText = "";
	public  double convertMinBudg;
	public  String ResultStatus = "Pass", CreateQ = "", CSRep = "", CancelproductRes = "";
	public String SalesRep = "";
	public  String SFLoginResult = "", OpportunityResults = "", ValidateQuoteResult = "",
			SearchActiveAccountResults = "", SubmitFinalPageRslt = "", GenerateDocumentResult = "",
			OpportunityValidationResult = "";
	public  String captSignResult = "", SelConsultResult = "", PaymentResult = "", calcelproductResult = "",
			CaseURL;
	public  int LivSubsCount, SCVal, i, j, RowsBeforeAdd, prodCount;
	
	public  Properties OR = pr.loadPropertiesFiles("Plan");

	public int portNO;
	public JavascriptExecutor excutor;

	
	
	public String ProductRandomElementPick() {
		String ProductName = "None Selected";
		try {

			File file = new File(regardingfilesPath+"\\ProductList.properties");

			if (file.exists()) {

				FileReader fr = new FileReader(file);
				LineNumberReader lnr = new LineNumberReader(fr);

				int linenumber = 0;

				while (lnr.readLine() != null) {
					linenumber++;

				}

				LOGS.info(Thread.currentThread() +"Total number of lines : " + linenumber);
				
				LOGS.info("test");

				lnr.close();
				Random rand = new Random();
				int randomLine = rand.nextInt((linenumber - 0) + 1);
				FileReader fr2 = new FileReader(file);
				LineNumberReader lnr2 = new LineNumberReader(fr2);

				int lineNumber = 0;

				while (lnr2.readLine() != null) {

					if (lineNumber == (randomLine - 1)) {
						LOGS.info(Thread.currentThread() +lnr2.readLine());
						ProductName = lnr2.readLine();
						return ProductName;
					}
					lineNumber++;

				}
				lnr2.close();

				LOGS.info(Thread.currentThread() +"Total number of lines : " + linenumber);

			} else {
				LOGS.info(Thread.currentThread() +"File does not exists!");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ProductName;

	}

	public  String ValidateOrderPlacement(String Oppportunity) throws Exception {
		if (Oppportunity.equalsIgnoreCase("Digital")) {
			try {

				LOGS.info(Thread.currentThread() +"ValidateOrderPlacement keyword started in NotCpqPilotDigital");
				Set<String> handles = driver.getWindowHandles();
				for (String windowHandle : handles) {
					if (!windowHandle.equals(ghostWindow)) {
						driver.switchTo().window(windowHandle);
						driver.manage().window().maximize();
						LOGS.info(Thread.currentThread() +"Driver is switched");

					}
				}
				String title = driver.getTitle();
				LOGS.info(Thread.currentThread() +"switched to ----" + title);
				if (title.equalsIgnoreCase("HGCP Ghost")) {
					LOGS.info(Thread.currentThread() +"OrderPlacement not landed in  QuoteLine Editor page");
					ImageName = "ghostloginpage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ValidateOrderPlacementRes = "Pass";
					Status = "Pass";
					ExportResults.exportTestResult(
							"ValidateOrderPlacement :," + "NonCPQpilot Group should be redirected to Ghost" + ","
									+ "Hitting PlaceOrder is Redirected to Ghost" + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			} catch (Exception e) {
				e.printStackTrace();
				ValidateOrderPlacementRes = "Fail";
				Status = "Fail";
				ExportResults.exportTestResult("ValidateOrderPlacement:," + "is order landed in oline editer" + ","
						+ "Application Slowness - Object not found while Logging into Ghost" + "," + Status + ","
						+ "No Image",pr.Resultsfolderpath);
			}
		}
		if (Oppportunity.equalsIgnoreCase("Print")) {
			LOGS.info(Thread.currentThread() +"salesrep is in  is notCpqPilot Group");
			Set<String> handles = driver.getWindowHandles();
			for (String windowHandle : handles) {
				if (!windowHandle.equals(ghostWindow)) {
					driver.switchTo().window(windowHandle);
					driver.manage().window().maximize();
					LOGS.info(Thread.currentThread() +"Driver is switched");

				}
			}
			LOGS.info(Thread.currentThread() +"current url is :" + driver.getCurrentUrl());
			try {
				driver.findElement(By.xpath("//span/p"));
				LOGS.info(Thread.currentThread() +"Alert displayed");
				ImageName = "Alertmessage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ValidateOrderPlacementRes = "Pass";
				Status = "Pass";
				ExportResults.exportTestResult("Validate alertmessage :,"
						+ "Print Orders must be placed by Accessing Media Pro. should be displayed" + ","
						+ "Print Orders must be placed by Accessing Media Pro. is displayed" + "," + Status + ","
						+ ImgName,pr.Resultsfolderpath);

			} catch (Exception e) {
				e.printStackTrace();
				Status = "Fail";
				ValidateOrderPlacementRes = "Fail";
				LOGS.info(Thread.currentThread() +"Print Orders must be placed by Accessing Media Pro. alert not found ");
				ExportResults.exportTestResult(
						"Validate alertmessage :," + "Rep is not added in cpqGroup so Alertmessage should display" + ","
								+ " order needs to be placed via Media Pro. Alert message not found " + "," + Status
								+ "," + ImgName,pr.Resultsfolderpath);

			}

		}

		return ValidateOrderPlacementRes;

	}

	public  String YextDevLogin() throws Exception{

		try {
						
				driver.findElement(By.xpath("//input[@id='username']")).sendKeys("api-sandbox@hibu.com");
				//Locator("YextUser").sendKeys("kavya.lakshmikantha@hibu.com");//(OR.getProperty(User));
				driver.findElement(By.xpath("//input[@id='password']")).sendKeys("kdb827");
				driver.findElement(By.xpath("//button[@type='submit']")).click();
				//	Locator("YextSignin").click();
				LOGS.info(Thread.currentThread() +"Login button Clicked");
				Thread.sleep(2000);
				driver.findElement(By.linkText("log out")).click();
				driver.manage().timeouts().pageLoadTimeout(40,TimeUnit.SECONDS );
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(1000);
				driver.findElement(By.xpath("//input[@id='username']")).sendKeys("api-sandbox@hibu.com");
				//Locator("YextUser").sendKeys("kavya.lakshmikantha@hibu.com");//(OR.getProperty(User));
				driver.findElement(By.xpath("//input[@id='password']")).sendKeys("kdb827");
				
			//	Locator("YextPwd").sendKeys ("hibu123");//(OR.getProperty(Pwd));
			driver.findElement(By.xpath("//button[@type='submit']")).click();
			//	Locator("YextSignin").click();
			LOGS.info(Thread.currentThread() +"Login button Clicked");
			driver.manage().timeouts().pageLoadTimeout(100,TimeUnit.SECONDS );
			driver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);
			Thread.sleep(5000);
			
			ActRes = driver.getCurrentUrl();
			ExpRes = "Yext Page should contain Yext ";
			
			// To check the Scenario Status
			if (ActRes.contains("yext")) {
				YextLoginResults = "Pass";
				Status = "Pass";

				//ExportResults.exportTestResult("Login to Yext," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to Yext," + ExpRes + "," + ActRes + "," + Status);


			}

			else {
				YextLoginResults = "Fail";

				Status = "Fail";
				ImageName = "LoginFailure";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

			//	ExportResults.exportTestResult("Login to Yext," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to Yext," + ExpRes + "," + ActRes + "," + Status);
				return YextLoginResults;
			}

		} catch (Exception e) {
			YextLoginResults = "False";
			Status = "Fail";
			LOGS.info(Thread.currentThread() +"Unable to Login to Yext");

			e.printStackTrace();
			ImageName = "YextLogin";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult("Login to Yext," + "Login Successful" + ","
					+ "Exception found while Logging into Yext" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +
					"Login to Yext," + "Login Successful" + "," + e.getMessage() + "," + Status + "," + ImgName);

			return YextLoginResults;

		}
		return YextLoginResults;
	
	}

	public   String YextLogin() throws Exception {
		try {
			String path = regardingfilesPath + "//InputFiles//Order.properties";
			LOGS.info(Thread.currentThread() +path);
			Properties OR = pr.loadPropertiesFiles("Order");

			// LOGS.info(Thread.currentThread() +OR.getProperty(User));
			//LOGS.info(Thread.currentThread() +"User Logging in  -> " + OR.getProperty(User));
			System.setProperty("webdriver.chrome.driver",
					regardingfilesPath + "\\Drivers\\chromedriver.exe");
			driver = new ChromeDriver();
			driver.navigate().to(OR.getProperty("YextTestSite"));
			LOGS.info(Thread.currentThread() +"URL launched");
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			LOGS.info(Thread.currentThread() +"Current Page Title is :" + driver.getTitle());
			LOGS.info(Thread.currentThread() +"Current Page URL is :" + driver.getCurrentUrl());
			
			driver.findElement(By.xpath("//input[@id='username']")).sendKeys("kavya.lakshmikantha@hibu.com");
			//Locator("YextUser").sendKeys("kavya.lakshmikantha@hibu.com");//(OR.getProperty(User));
			driver.findElement(By.xpath("//input[@id='password']")).sendKeys("hibu123");
			
				driver.findElement(By.xpath("//input[@id='username']")).sendKeys("api-sandbox@hibu.com");
				//Locator("YextUser").sendKeys("kavya.lakshmikantha@hibu.com");//(OR.getProperty(User));
				driver.findElement(By.xpath("//input[@id='password']")).sendKeys("kdb827");
				
		
			//	Locator("YextPwd").sendKeys ("hibu123");//(OR.getProperty(Pwd));
			driver.findElement(By.xpath("//button[@type='submit']")).click();
			//	Locator("YextSignin").click();
			LOGS.info(Thread.currentThread() +"Login button Clicked");
			Thread.sleep(2000);
			ActRes = driver.getCurrentUrl();
			ExpRes = "Yext Page should contain Yext ";
			
			// To check the Scenario Status
			if (ActRes.contains("yext")) {
				YextLoginResults = "Pass";
				Status = "Pass";

				ExportResults.exportTestResult(
						"Login to Yext," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to Yext," + ExpRes + "," + ActRes + "," + Status);


			}

			else {
				YextLoginResults = "Fail";

				Status = "Fail";
				ImageName = "LoginFailure";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				ExportResults.exportTestResult(
						"Login to Yext," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to Yext," + ExpRes + "," + ActRes + "," + Status);
				return YextLoginResults;
			}

		} catch (Exception e) {
			YextLoginResults = "False";
			Status = "Fail";
			LOGS.info(Thread.currentThread() +"Unable to Login to Yext");

			e.printStackTrace();
			ImageName = "YextLogin";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult("Login to Yext," + "Login Successful" + ","
					+ "Exception found while Logging into Yext" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +
					"Login to Yext," + "Login Successful" + "," + e.getMessage() + "," + Status + "," + ImgName);

			return YextLoginResults;

		}
		return YextLoginResults;



	}

	
	public  void YextAccountCreation() throws Exception{
		String accountID = "";
		String businessPhone="";
		FileInputStream fis = new FileInputStream(
				regardingfilesPath + "/InputFiles/LeadDetails.properties");
		Properties lead = new Properties();
		lead.load(fis);
	try{
		String path = regardingfilesPath + "//InputFiles//Order.properties";
		LOGS.info(Thread.currentThread() +path);
		Properties OR = pr.loadPropertiesFiles("Order");

		// LOGS.info(Thread.currentThread() +OR.getProperty(User));
		//LOGS.info(Thread.currentThread() +"User Logging in  -> " + OR.getProperty(User));
		System.setProperty("webdriver.chrome.driver",
				regardingfilesPath + "\\Drivers\\chromedriver.exe");
		driver = new ChromeDriver();
		driver.navigate().to(OR.getProperty("YextTestSite"));
		LOGS.info(Thread.currentThread() +"URL launched");
		//driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
		driver.manage().window().maximize();
		LOGS.info(Thread.currentThread() +"Current Page Title is :" + driver.getTitle());
		LOGS.info(Thread.currentThread() +"Current Page URL is :" + driver.getCurrentUrl());
		YextDevLogin();
		
		for(int i=1;i<=50;i++){
		driver.findElement(By.linkText("New Customer Location")).click();
		LOGS.info(Thread.currentThread() +"Clicked on New Customer Location Tab");
		Thread.sleep(2000);
		
		
		int randomPin = (int) (Math.random() * 100000) + 100000;
		String num = String.valueOf(randomPin);
		LOGS.info(Thread.currentThread() +"RANDOM NUM IS:" + num);
		//accountID=num;
	//	accountID = accountID.substring(0, 10) + num;
		
		driver.findElement(By.name("externalAccountId")).clear();
		LOGS.info(Thread.currentThread() +"Cleared account ID textField ");
		driver.findElement(By.name("externalAccountId")).sendKeys(num);
		LOGS.info(Thread.currentThread() +"Entering the Account ID");
		driver.findElement(By.xpath("//input[@class='js-select-location-field js-external-location-id-field']")).sendKeys(num);
		LOGS.info(Thread.currentThread() +"Entering the Account ID again ");
		driver.findElement(By.xpath("//input[@type='submit' and @value='Continue']")).click();
		LOGS.info(Thread.currentThread() +"Clicked on contine Button ");
		
		String RandomExtension = new SimpleDateFormat("MMddHHmmss").format(new Date());
		BusinessNAME = lead.getProperty("LeadName")+"_"+ RandomExtension;
		
		driver.findElement(By.xpath("//input[@class='js-location-service-name-input name-input' and @name='location.name']")).sendKeys(BusinessNAME);
		LOGS.info(Thread.currentThread() +"Entered Company Name");
		
		 YextLeadAddress="# " + RandomExtension + " " + lead.getProperty("LeadStreet");
		driver.findElement(By.xpath("//input[@name='location.address']")).sendKeys(YextLeadAddress);
		LOGS.info(Thread.currentThread() +"Entered Address");
		driver.findElement(By.xpath("//input[@name='location.city']")).sendKeys(lead.getProperty("LeadCity"));
		LOGS.info(Thread.currentThread() +"Entered City");
		
		Select dropdownState = new Select(driver.findElement(By.xpath("//select[@name='location.state']")));
		dropdownState.selectByVisibleText(lead.getProperty("YextState"));
		LOGS.info(Thread.currentThread() +"State is entered");
		
		driver.findElement(By.xpath("//input[@name='location.postalCode']")).sendKeys(lead.getProperty("LeadZip"));
		LOGS.info(Thread.currentThread() +"Zipcode entered");
		
		int randomPhoneExtn = 2000000 + new Random().nextInt(90000);
		businessPhone = lead.getProperty("LeadPhone") + Integer.toString(randomPhoneExtn);
		LOGS.info(Thread.currentThread() +"Phone number :" + businessPhone);
		driver.findElement(By.xpath("//input[@name='location.phoneNumber']")).sendKeys(businessPhone);
		LOGS.info(Thread.currentThread() +"Entered the business Phone");
		
		AdditionalCondition="Flowers";
		LOGS.info(Thread.currentThread() +"Entering the listing category "+AdditionalCondition);
		WebElement ListingCategory = driver
				.findElement(By.xpath("//input[@class='category-name js-category-input ui-autocomplete-input']"));
		ListingCategory.clear();
		LOGS.info(Thread.currentThread() +"Cleared the listing category");

		ListingCategory.sendKeys(AdditionalCondition);
		LOGS.info(Thread.currentThread() +"Entered the listing category "+ AdditionalCondition);
		Thread.sleep(2000);
		
		Actions action = new Actions(driver);
		action.moveToElement(driver.findElement(By.xpath("//li[@data-category-id='266']"))).build().perform();
		Thread.sleep(3000);
		driver.findElement(By.xpath("//li[@data-category-id='266']")).click();
		//driver.findElement(By.linkText(" > Flowers")).click();
		LOGS.info(Thread.currentThread() +"Selected Listing Category");
		
		driver.findElement(By.xpath("//input[@class='js-select-service-input' and @value='DEV-00010001']")).click();
		LOGS.info(Thread.currentThread() +"Selected Location Cloud Professional (DEV-00010001)");
		driver.findElement(By.xpath("//input[@class='submit reseller-header-button' and @value='Continue']")).click();
		LOGS.info(Thread.currentThread() +"Clicked on continue button");
		
		driver.findElement(By.xpath("//button[@type='submit']")).click();
		LOGS.info(Thread.currentThread() +"Clicked on Place Request Button");
		
		driver.navigate().refresh();
		LOGS.info(Thread.currentThread() +"refreshing the page");
		driver.navigate().refresh();
		LOGS.info(Thread.currentThread() +"refreshing the page again");
		
		if(driver.findElement(By.linkText("View the location now")).isDisplayed()){
			
			ExportResults.exportYextAccounts(BusinessNAME+","+YextLeadAddress+ ","+ lead.getProperty("LeadCity")+","+lead.getProperty("YextState")+","+lead.getProperty("LeadZip")+","
					+businessPhone + "," + AdditionalCondition);	
		}
		else if(driver.findElement(By.xpath("//div[@class='status-action-container']")).isDisplayed())
		{
			LOGS.info(Thread.currentThread() +"Bad Account");
		}
	}
	}
	catch (Exception e)
	{
		ExportResults.exportYextAccounts(BusinessNAME+","+YextLeadAddress+ ","+ lead.getProperty("LeadCity")+","+lead.getProperty("LeadZip")+","
				+businessPhone + "," + AdditionalCondition);
	}
	}
	public  void YextValidation() throws Exception {
		YextLogin();


		SalesforceTasks.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//PriceIncrease.xlsx");
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
		LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

			LOGS.info(Thread.currentThread() +"Searching for BusinessID :" + lineItemInt);
			driver.findElement(By.xpath("//input[@id='search']")).clear();
			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);	
			LOGS.info(Thread.currentThread() +"businessID from Excel :" +businessID);

			driver.findElement(By.xpath("//input[@id='search']")).sendKeys (businessID);
			driver.findElement(By.xpath("//input[@type='submit' and @value='Search']")).click();
			Thread.sleep(2000);
			try
			{
				String SKUDesc= driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[11]")).getText();
				LOGS.info(Thread.currentThread() +"Printing SKU Desc :"+SKUDesc);
				//	String CustID = driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[2]")).getText();
				//	LOGS.info(Thread.currentThread() +"Printing Business ID from YExt :"+CustID);
				String ListingSKU=driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[10]")).getText();
				LOGS.info(Thread.currentThread() +"Printing Business ID from YExt :"+ListingSKU);
				if(driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[10]")).isDisplayed() && SKUDesc.contains("Listings"))
				{
					ImageName = "YextValidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "PASS";
					ExpRes ="Business ID and its Attributes should be displayed in YEXT";
					ActRes = "Business ID and its attributes are  displayed in Yext";
					ExportResults.exportTestResult(businessID+","+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else if (driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[2]")).isDisplayed() && ListingSKU.isEmpty() &&  !SKUDesc.contains("Listings") )
				{
					ImageName = "YextValidationFailure";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes ="Business ID and its Attributes should be displayed in YEXT";

					ActRes = "Business ID is  displayed in Yext but Attributes are not displayed";
					ExportResults.exportTestResult(businessID+"," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}
			catch (Exception e)
			{


				if(driver.findElement(By.xpath("//div[@id='reseller-customer-list-table_wrapper']//td[text()='No data available in table']")).isDisplayed())
				{
					ImageName = "YextValidationFailure";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "FAIl";
					ExpRes ="Business ID and its Attributes should be displayed in YEXT";

					ActRes = "Business ID is not displayed in Yext";
					ExportResults.exportTestResult(businessID+"," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}
			}
		}
		driver.quit();
	}
	public  WebDriver windowsSettings() throws Exception {
		
		try {
			 //windows Settings
			
			if(portNO == 0) {
				 System.setProperty("webdriver.chrome.driver",regardingfilesPath + "\\Drivers\\chromedriver.exe");
				 LOGS.info(Thread.currentThread() +"Windows Settings");
				 ChromeOptions chromeOptions = new ChromeOptions();
				
				 String nodeURL;
				   
				 //  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE);
					chromeOptions.addArguments("--no-sandbox");// Bypass OS security model
				    //chromeOptions.addArguments("--headless"); //to enable headless browser
					//chromeOptions.addArguments("--incognito");// comment it when you are running in windows
/*					chromeOptions.addArguments("--ignore-ssl-errors=yes");
					chromeOptions.addArguments("--ignore-certificate-errors"); */
					chromeOptions.addArguments("window-size=1920x1080");
					//chromeOptions.addArguments("--start-maximized");
					//chromeOptions.addArguments("--disable-extensions"); // disabling extensions
					//chromeOptions.addArguments("--disable-dev-shm-usage");// overcome limited resource problems
			      // chromeOptions.setExperimentalOption("useAutomationExtension", false);
			      // chromeOptions.addArguments("--remote-debugging-port=9222");
			       
			       
			       
			       chromeOptions.addArguments("--allow-insecure-localhost");
			       DesiredCapabilities caps = new DesiredCapabilities();
			       caps.setBrowserName("chrome");
			       caps.setPlatform(Platform.WINDOWS);
			       caps.setCapability(ChromeOptions.CAPABILITY, chromeOptions);
			       caps.setCapability("acceptInsecureCerts", true);
			       caps.setCapability (CapabilityType.ACCEPT_SSL_CERTS, true);
			       caps.setCapability("applicationCacheEnabled", false);	
			       caps.setCapability(CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION, true);
			       caps.setCapability("chrome.switches",Arrays.asList("--incognito"));
			       caps.setCapability("goog:chromeOptions", chromeOptions);
			       chromeOptions.merge(caps);
			       nodeURL = "http://localhost:"+portNO+"/wd/hub";
			       
			       //driver = new RemoteWebDriver(new URL(nodeURL),chromeOptions);
			       
			       driver = new ChromeDriver(chromeOptions);
			       
			       }
			       else {
			    	   
			    	  System.setProperty("webdriver.chrome.driver",regardingfilesPath + "\\Drivers\\chromedriver.exe");
						 LOGS.info(Thread.currentThread() +"Windows Settings");
						 ChromeOptions chromeOptions = new ChromeOptions();
						String nodeURL;
									       
//						   chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE);
							chromeOptions.addArguments("--no-sandbox");// Bypass OS security model
							chromeOptions.addArguments("--headless"); //to enable headless browser
						   //chromeOptions.addArguments("--incognito");// comment it when you are running in windows
							chromeOptions.addArguments("--ignore-ssl-errors=yes");
							chromeOptions.addArguments("--ignore-certificate-errors");
							chromeOptions.addArguments("window-size=1920x1080");
							chromeOptions.addArguments("--start-maximized");
							chromeOptions.addArguments("--disable-extensions"); // disabling extensions
							chromeOptions.addArguments("--disable-dev-shm-usage");// overcome limited resource problems
					      // chromeOptions.setExperimentalOption("useAutomationExtension", false);
					      // chromeOptions.addArguments("--remote-debugging-port=9222");
					       
					       
					       
					       chromeOptions.addArguments("--allow-insecure-localhost");
					       DesiredCapabilities caps =new DesiredCapabilities();
					       caps.setBrowserName("chrome");
					       caps.setPlatform(Platform.WINDOWS);
					       caps.setCapability(ChromeOptions.CAPABILITY, chromeOptions);
					       caps.setCapability("acceptInsecureCerts", true);
					       caps.setCapability (CapabilityType.ACCEPT_SSL_CERTS, true);
					       caps.setCapability("applicationCacheEnabled", false);	
					       caps.setCapability(CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION, true);
					       caps.setCapability("chrome.switches",Arrays.asList("--incognito"));
					       caps.setCapability("goog:chromeOptions", chromeOptions);
					       chromeOptions.merge(caps);
					       nodeURL = "http://localhost:"+portNO+"/wd/hub";
					       LOGS.info("this is the node url " + nodeURL);
					       
					       driver = new RemoteWebDriver(new URL(nodeURL),chromeOptions);
						 }
		       
        }catch(Exception e) {
        	LOGS.info(Thread.currentThread() +"Windows Options" + "load failed" + "," + e.getMessage());
			
			LOGS.error(Thread.currentThread() +"Unable to Login to Salesforce",e);
			LOGS.error(Thread.currentThread() +"Unable to Login to Salesforce"+e.getMessage());
		}
		return driver;
	}
	public  WebDriver linuxSettings() throws Exception {
	
		try {
			//Linux Settings
		      System.setProperty("webdriver.chrome.driver","/usr/bin/chromedriver");
		      LOGS.info(Thread.currentThread() +"Linux Settings");
				ChromeOptions chromeOptions = new ChromeOptions();
				
				chromeOptions.setBinary("/opt/google/chrome/google-chrome");
				chromeOptions.addArguments("--no-sandbox");
				chromeOptions.addArguments("--headless");
				chromeOptions.addArguments("--incognito");
				chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE);
				chromeOptions.addArguments("window-size=1920x1080");
				chromeOptions.addArguments("--start-maximized");
				chromeOptions.addArguments("--disable-gpu");
		        chromeOptions.addArguments("disable-infobars"); // disabling infobars
				chromeOptions.addArguments("--disable-extensions"); // disabling extensions
				chromeOptions.addArguments("--disable-dev-shm-usage");
		        //chromeOptions.setExperimentalOption("useAutomationExtension", false);
		        chromeOptions.addArguments("--remote-debugging-port=9222");
		        chromeOptions.addArguments("--allow-insecure-localhost");
		        DesiredCapabilities caps = new DesiredCapabilities();
			       caps.setCapability(ChromeOptions.CAPABILITY, chromeOptions);
			       caps.setPlatform(org.openqa.selenium.Platform.LINUX);
			       caps.setCapability("acceptInsecureCerts", true);
			       caps.setCapability (CapabilityType.ACCEPT_SSL_CERTS, true);
			       caps.setCapability("applicationCacheEnabled", false);	
			       caps.setCapability(CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION, true);
			       caps.setCapability("chrome.switches",Arrays.asList("--incognito"));
			       caps.setCapability("goog:chromeOptions", chromeOptions);
			       chromeOptions.merge(caps);
			       driver = new ChromeDriver(chromeOptions);
		}catch(Exception e) {
            LOGS.info(Thread.currentThread() +"Linux Options load failed: "+ e.getMessage());
            LOGS.error(Thread.currentThread() +"Unable to load Linux Options",e);
		}
		return driver;
	}
	
	

	
	
	public  String SalesforceLogin(String User, String Pwd) throws Exception {
		try {
			String path = regardingfilesPath+"InputFiles/Order.properties";
			LOGS.info(Thread.currentThread() +path);
			

			// LOGS.info(Thread.currentThread() +OR.getProperty(User));
			LOGS.info(Thread.currentThread() +"Salesforce Login Method");
		
			//Linux Settings
			//driver = linuxSettings();
			
			 System.out.println("HEllo");
	       
	        //windows Settings
			driver = windowsSettings();
	       
			
		     System.out.println("HEllo end");
			
			
		    
	       
			if (SFInspectorPlugin.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Launching Chrome with SF inspector extension");
				
				String ExtensionPath = System.getProperty("user.home")
						+ "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\aodjmnfhjibkcdimpodiifdjnnncaafh\\1.11_0";
				
				ChromeOptions options = new ChromeOptions();
				options.addArguments("load-extension=" + ExtensionPath);
				driver = new ChromeDriver(options);
			}
			
			else if (contractDownload.equalsIgnoreCase("Yes") || signatureDownload.equalsIgnoreCase("Yes")) {

				driver = new ChromeDriver();
				driver.get("chrome://settings/content/pdfDocuments?search=Site+Settings");
				//Thread.sleep(5000);

				WebElement downloadPrompt = driver
						.findElement(By.xpath("//input[@pref='download.prompt_for_download']"));
				((JavascriptExecutor) driver).executeScript("arguments[0].click();", downloadPrompt);

				//Thread.sleep(2000);
			} else {
				//driver = new ChromeDriver(chromeOptions);
				
				//driver = new ChromeDriver();
				//DriverFactory DF = new DriverFactory();
				/*LOGS.info(Thread.currentThread() +"Heyy I am DriverFactory Class");
				driver = DriverFactory.getInstance().getDriver();*/
				
				LOGS.info(Thread.currentThread() +"Chrome Driver initialization");
				DF.setDriver(driver);
				LOGS.info(Thread.currentThread() +"hey---4"+DF);
				LOGS.info("driver value: "+driver);
				driver = DF.getDriver();
				
				
				
				
				
				
			}
			
			//driver.navigate().to("https://hibu--full01.my.salesforce.com");
			driver.navigate().to("https://test.salesforce.com");
			LOGS.info(Thread.currentThread() +"URL launched");
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			LOGS.info(Thread.currentThread() +"Current Page Title is :" + driver.getTitle());
			LOGS.info(Thread.currentThread() +"Current Page URL is :" + driver.getCurrentUrl());
			
				
			
			if(SalesRepType.trim().equalsIgnoreCase("TSales")) {
				LOGS.info(Thread.currentThread() +User+"*********************************"+Pwd);
				Locator("salesforceUser").sendKeys(User);
				Locator("salesforcePwd").sendKeys(Pwd);
			}
			else {
				Properties OR = pr.loadPropertiesFiles("Order");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + OR.getProperty(User));
				LOGS.info(Thread.currentThread() +OR.getProperty(User)+"*********************************"+OR.getProperty(Pwd));
			Locator("salesforceUser").sendKeys(OR.getProperty(User));
			Locator("salesforcePwd").sendKeys(OR.getProperty(Pwd));
			}
			long Seconds = 60;
			wait = new WebDriverWait(driver, Seconds);
			
			
			Locator("SalesforceLogin").click();
			LOGS.info(Thread.currentThread() +"Login button Clicked");
			//Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(100));
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(pageLoadTime));
			
			ActRes = driver.getCurrentUrl();
			ExpRes = "Salesforce page should contain the URL full01 ";
			LOGS.info("Salesforce Page URL: "+ActRes);
			
			
			//switch to classic view
			try {
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(70));
				if(ActRes.contains("lightning")) {
				LOGS.info("Lightning mode on, Switching to Classic Mode .....");	
				WebElement element = driver.findElement(By.xpath("//span[@class='button-container-a11y']/div[2]/ul/li[8]/span/button/div/span/div/span[@class='uiImage']/img[@title='User']"));
				JavascriptExecutor executor = (JavascriptExecutor)driver;
				executor.executeScript("arguments[0].click();", element);
				//Thread.sleep(2000);

				wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//a[contains(text(), 'Switch to Salesforce Classic')]"))));

				driver.findElement(By.xpath("//a[contains(text(), 'Switch to Salesforce Classic')]")).click();
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
				}
				else {
					LOGS.info("Lightning mode Not on....");
				}
			}
			catch(Exception e)
			{
				LOGS.info("There is some exception: "+e);
			}

			try {
				LOGS.info("Results Folder Path value: "+Resultsfolderpath);
				LOGS.info("Results Folder Path value: "+pr.Resultsfolderpath);

				WebElement HomeTab = driver.findElement(By.cssSelector("#home_Tab>a"));
				
				wait.until(ExpectedConditions.elementToBeClickable(HomeTab));
				
				
				JavascriptExecutor jsHT = (JavascriptExecutor) driver;
				jsHT.executeScript("arguments[0].click();", HomeTab);
				
				SalesForceLoginResult = "Pass";
				Status = "Pass";

				
				ExportResults.exportTestResult(
						"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
				LOGS.info(Thread.currentThread() +"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status);
			}catch (Exception e) {
				
				LOGS.info("after Login Waited for Home page but needs more time to load");
				LOGS.error("Unable to Login to Salesforce at first: "+e.getMessage());
				ActRes = driver.getCurrentUrl();
				ExpRes = "Salesforce page should contain the URL full01 ";
				LOGS.info("Salesforce Page URL: "+ActRes);
				
				if (ActRes.contains("full01")) {
					
					SalesForceLoginResult = "Pass";
					Status = "Pass";

					LOGS.info("Results Folder Path value: "+Resultsfolderpath);
					LOGS.info("Results Folder Path value: "+pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status);

					WebElement HomeTab = driver.findElement(By.cssSelector("#home_Tab>a"));
					wait.until(ExpectedConditions.elementToBeClickable(HomeTab));
					
					JavascriptExecutor jsHT = (JavascriptExecutor) driver;
					jsHT.executeScript("arguments[0].click();", HomeTab);

					return SalesForceLoginResult;

				} else {
					SalesForceLoginResult = "Fail";
					ExceptionMsg= "Exception Happened while Logging into the Salesforce";
					Status = "Fail";
					ImageName = "LoginFailure";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					LOGS.info("Results Folder Path value: "+Resultsfolderpath);
					LOGS.info("Results Folder Path value: "+pr.Resultsfolderpath);
					/*wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#Accounts_Tab>a")));
					driver.findElement(By.cssSelector("#Accounts_Tab>a")).click();*/
					
					ExportResults.exportTestResult(
							"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Login to Salesforce," + ExpRes + "," + ActRes + "," + Status);
					return SalesForceLoginResult;
				}

			}
		
			// To check the Scenario Status
			
		} catch (Exception e) {
			SalesForceLoginResult = "False";
			Status = "Fail";
			ExceptionMsg= "Exception Happened while Loggging into the Salesforce";
			ImageName = "SalesforceLogin";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult("Login to Salesforce," + "Login Successful" + ","
					+ "Exception found while Logging into SF" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +
					"Login to Salesforce," + "Login Successful" + "," + e.getMessage() + "," + Status + "," + ImgName);
			
			LOGS.error("Unable to Login to Salesforce",e);
			

			return SalesForceLoginResult;
     
		}
		return SalesForceLoginResult;
	}
	// Edit field should be None if it is not required to update fields in the
	// Accounts
	public  String AELogin() throws Exception{

		try{
			String path = regardingfilesPath + "//InputFiles//Order.properties";
			LOGS.info(Thread.currentThread() +path);
			Properties OR = pr.loadPropertiesFiles("Order");
			//LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + OR.getProperty(AEUsr));
			System.setProperty("webdriver.chrome.driver",regardingfilesPath + "\\Drivers\\chromedriver.exe");
			driver = new ChromeDriver();

			driver.navigate().to(OR.getProperty("AETestSite"));
			LOGS.info(Thread.currentThread() +"URL launched");
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			LOGS.info(Thread.currentThread() +"Current Page Title is :" + driver.getTitle());
			LOGS.info(Thread.currentThread() +"Current Page URL is :" + driver.getCurrentUrl());

			LOGS.info(Thread.currentThread() +OR.getProperty("ghostUN"));

			OR.load(fs);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			String ghostUN = OR.getProperty("ghostUN");
			LOGS.info(Thread.currentThread() +"AE User Name : " + ghostUN);
			String ghostPswd = OR.getProperty("ghostPswd");
			LOGS.info(Thread.currentThread() +"AE pw : " + ghostPswd);
			LOGS.info(Thread.currentThread() +"Navigating to the OH Site");

			try { 

				driver.navigate()
				.to("http://" + ghostUN + ":" + ghostPswd + "@uatkopoh02.hpc01.hibu.int:8080/hibu-activiti-explorer/");
				Thread.sleep(5000);
				String urlGhostxl = "http:" + ghostUN + ":" + ghostPswd
						+ "@http://uatkopoh02.hpc01.hibu.int:8080/hibu-activiti-explorer/";
				LOGS.info(Thread.currentThread() +"OH URL :" + urlGhostxl);
				Thread.sleep(3000);

			}
			catch (Exception e)
			{
				e.printStackTrace();
				driver.navigate().to("http://" + ghostUN + ":" + ghostPswd + "@uatkopoh02.hpc01.hibu.int:8080/hibu-activiti-explorer/");
				Thread.sleep(30000);
				String urlGhostxl = "http:" + ghostUN + ":" + ghostPswd + "@uatkopoh02.hpc01.hibu.int:8080/hibu-activiti-explorer/";
				LOGS.info(Thread.currentThread() +"Ghost URL :" + urlGhostxl);
				Thread.sleep(3000);
			}

			ActRes = driver.getCurrentUrl();
			ExpRes = "AE page should contain the URL activiti ";

			if (ActRes.contains("activiti"))
			{
				AELoginResult = "Pass";
				Status = "Pass";
				ExportResults.exportTestResult(
						"Login to AE," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to AE," + ExpRes + "," + ActRes + "," + Status);

			}
			else
			{

				AELoginResult = "Fail";

				Status = "Fail";
				ImageName = "LoginFailure";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				driver.findElement(By.cssSelector("#Accounts_Tab>a")).click();
				ExportResults.exportTestResult(
						"Login to AE," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Login to AE," + ExpRes + "," + ActRes + "," + Status);
				return AELoginResult;
			}



		}
		catch (Exception e)
		{
			AELoginResult = "Fail";

			Status = "Fail";
			ImageName = "LoginFailure";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			driver.findElement(By.cssSelector("#Accounts_Tab>a")).click();
			ExportResults.exportTestResult(
					"Login to AE," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Login to AE," + ExpRes + "," + ActRes + "," + Status);
			return AELoginResult;
		}
		return AELoginResult;

	}

	public  String FullReport() throws Exception {
		AELogin();
		driver.findElement(By.xpath("//div[contains( text(),'Report - 1.1 - Full History')]")).click();
		LOGS.info(Thread.currentThread() +"clicking on Full History Report");
		Thread.sleep(3000);

		SalesforceTasks.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//PriceIncrease.xlsx");
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
		LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

			LOGS.info(Thread.currentThread() +"Searching for BusinessID :" + lineItemInt);

			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);	
			LOGS.info(Thread.currentThread() +"businessID from Excel :" +businessID);

			try{
				if (driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-error v-textfield-required' and @type = 'text']")).isDisplayed())
				{

					driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-error v-textfield-required' and @type = 'text']")).clear();
					LOGS.info(Thread.currentThread() +"Cleared the business ID field");
					driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-error v-textfield-required' and @type = 'text']")).sendKeys(businessID); //("6820207");
					Thread.sleep(1000);
					LOGS.info(Thread.currentThread() +"Entered the business ID :"+businessID);
				}
			}
			catch (Exception e)
			{


				if (driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-required' and @type = 'text']")).isDisplayed())
				{
					driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-required' and @type = 'text']")).clear();

					LOGS.info(Thread.currentThread() +"Cleared the business ID field");
					driver.findElement(By.xpath("//input[@class='v-textfield v-textfield-required' and @type = 'text']")).sendKeys(businessID); 
					Thread.sleep(1000);
					LOGS.info(Thread.currentThread() +"Entered the business ID :"+businessID);


				}
			}


			driver.findElement(By.xpath("//span[(text()='Generate report' )]")).click();
			Thread.sleep(5000);
			LOGS.info(Thread.currentThread() +"clicking on Generate Report Button");

			ExpRes = businessID;

			try {

				String WebText=driver.findElement(By.xpath("(//div[@class='v-verticallayout'])[5]")).getText();
				LOGS.info(Thread.currentThread() +"Printing WebText:" +WebText);
				if(WebText .contains("Error Tank")|| WebText.contains("inFlightCheckCounter")||WebText .contains("Error"))	
				{
					LOGS.info(Thread.currentThread() +"Business id is having issue");
					Status="Fail";
					ActRes = "BusinessID is having issue";

					ExportResults.exportTestResult("Verifiying the Business ID," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					//LOGS.info(Thread.currentThread() +"Verifiying the Error," + ExpRes + "," + ActRes + "," + Status);

				}
				else{
					LOGS.info(Thread.currentThread() +"Business id is not having issue");
					Status="Pass";
					ActRes = "BusinessID is NOT having issue";

					ExportResults.exportTestResult("Verifiying the Business ID," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
			}
			catch (Exception e)
			{
				LOGS.info(Thread.currentThread() +"Business id is not having issue");
				Status="Pass";
				ActRes = "BusinessID is NOT having issue";

				ExportResults.exportTestResult("Verifiying the Business ID," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				//	LOGS.info(Thread.currentThread() +"Verifiying the Error," + ExpRes + "," + ActRes + "," + Status); 
			}
		}	
		driver.quit();

		return businessID;
	}
	
	public  String SalesforceLogin(String User, String Pwd, String LoginAsUsr) throws Exception {
		
		String loginStatus = SalesforceLogin(User, Pwd);
		if(loginStatus.equalsIgnoreCase("Fail"))
		{
			driver.quit();
		}
		else
		{
		try {
		SRep = LoginAsUsr;
		LOGS.info(Thread.currentThread() +"Clicking on the Setup Link");
		//Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
		//Thread.sleep(5000);
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@id='setupLink']")));
		driver.findElement(By.xpath("//a[@id='setupLink']")).click();
		
		//Thread.sleep(5000);
		LOGS.info(Thread.currentThread() +"Clicking on the Manage Users Link");
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@id='Users_font']")));
		driver.findElement(By.xpath("//a[@id='Users_font']")).click();
		LOGS.info(Thread.currentThread() +"Clicking on the Users Link");
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@id='ManageUsers_font']")));
		driver.findElement(By.xpath("//a[@id='ManageUsers_font']")).click();
		LOGS.info(Thread.currentThread() +"Selecting the CSView");
		//Thread.sleep(5000);
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[@class='noSecondHeader pageType']")));
		String hdng = driver.findElement(By.xpath("//h1[@class='noSecondHeader pageType']")).getText();
		LOGS.info(Thread.currentThread() +"Existing Rep Name- "+hdng);
		if (!hdng.equalsIgnoreCase(LoginAsUsr)) {
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//select[@id='fcf']")));
			WebElement UserView = driver.findElement(By.xpath("//select[@id='fcf']"));
			Select userviewdrpdwn = new Select(UserView);
			userviewdrpdwn.selectByVisibleText(LoginAsUsr);
		}

	
		LOGS.info(Thread.currentThread() +"Clicking on the Login Link - Line789");
		//Thread.sleep(3000);
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
		
		
		//ExpRes = "Second Login Should Happen by Clicking on Login in view.";
		ImageName = "SecondLogin";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
	
		Thread.sleep(4000);
		//driver.findElement(By.xpath("//form[@id='ResetForm']/div[2]/table/tbody/tr[2]/td[1]/a[2]")).click();
		driver.findElement(By.xpath("//div[@class='pbBody']/table/tbody/tr[2]/td[1]/a[2]")).click();
		Thread.sleep(3000);
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
		Thread.sleep(2000);
		
		/*
		Properties OR = pr.loadPropertiesFiles("Order");
		if(LoginAsUsr.contains(OR.getProperty("OpsWizard"))){
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(50));
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			driver.switchTo().window(newWindowHandle.get(1));
			String TabSelected = driver.getTitle();
			LOGS.info(Thread.currentThread() +"Tab Selected: " + TabSelected);
			driver.close();
			driver.switchTo().window(newWindowHandle.get(0));
			driver.navigate().refresh();
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
			//Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"Page Refreshed");
		} */
		
		Status = "Pass";
		ImageName = "AfterSecondLogin";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		//return Status;
		}catch (Exception e) {
			Status = "Fail";
			ImageName = "SecondLogin";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExceptionMsg= "Exception Happened while doing the second login in Salesforce";
			LOGS.error("Second Login Failed", e);
			e.printStackTrace();
			
			return Status;
			
		 }
		}
		return Status;

	}

	public void SFLoginAsUser(String LoginAsUser) throws Exception {
		SFLogout();
		LOGS.info(Thread.currentThread() +"Logout From " + SalesRepType);
		Properties OR = pr.loadPropertiesFiles("Order");
		SalesRep = OR.getProperty(LoginAsUser);
		LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
		LOGS.info(Thread.currentThread() +"Clicking on the Setup Link");
		driver.findElement(By.xpath("//a[@id='setupLink']")).click();
		LOGS.info(Thread.currentThread() +"Clicking on the Manage Users Link");
		driver.findElement(By.xpath("//a[@id='Users_font']")).click();
		LOGS.info(Thread.currentThread() +"Clicking on the Users Link");
		driver.findElement(By.xpath("//a[@id='ManageUsers_font']")).click();
		LOGS.info(Thread.currentThread() +"Selecting the CSView");
		String hdng = driver.findElement(By.xpath("//h1[@class='noSecondHeader pageType']")).getText();
		if (!hdng.equalsIgnoreCase(SalesRep)) {
			WebElement UserView = driver.findElement(By.xpath("//select[@id='fcf']"));
			Select userviewdrpdwn = new Select(UserView);
			userviewdrpdwn.selectByVisibleText(SalesRep);
		}
		String uName = "Kavya spe";
		if (LoginAsUser.equalsIgnoreCase(uName)) {
			LOGS.info(Thread.currentThread() +"Login As SPE :" + LoginAsUser);
		}

		else
			LOGS.info(Thread.currentThread() +"Login As Premise Rep :" + LoginAsUser);

		LOGS.info(Thread.currentThread() +"Clicking on the Login Link");
		driver.findElement(By.xpath("//td[@id='bodyCell']/div[5]/div/div[2]/table/tbody/tr[2]/td[1]/a[2]")).click();

	}

	public  String ValidateContract(String[] Prods, String[] palns) throws Exception {

		try {
			LOGS.info(Thread.currentThread() +"ValidateContract Keyword execution started");
			driver.get(AccURL);
			driver.manage().window().scroll();
			SLocator("ContractsLink").click();
			LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
					SLocator("ContractNolink"));
			SLocator("ContractNolink").click();
			LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			// Thread.sleep(5000);
			LOGS.info(Thread.currentThread() +"Waited 10 Secs for  Amend button to be visible");
			SLocator("Amend").click();
			LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page ");
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(10000);

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"ValidateContract failed");

		}
		return ContractDetailsResult;

	}

	public  String GenerateDocument(String Template) throws Exception {
		try {

			// Stage_Capture();
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//td[@id='topButtonRow']//input[@title='Generate Document']")));
			oneTimeFeesTotal = driver
					.findElement(By.xpath("//td[text()='One Time Fee Total']/following-sibling::td[1]/div")).getText();

			MonthlyInvestmentTotal = driver
					.findElement(By.xpath("//td[text()='Quote Monthly Investment']/following-sibling::td[1]/div"))
					.getText();

			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(5000);
			LOGS.info(Thread.currentThread() +"Clicking On Generate Document Button");
			
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//td[@id='topButtonRow']//input[@title='Generate Document']"))).click();
			//driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Generate Document']")).click();
			
			//Thread.sleep(6000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			LOGS.info(Thread.currentThread() +"Clicked on Generate Document Button");
			ImageName = "AfterclickingGenarateDocument";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			///driver.navigate().refresh();
			//Thread.sleep(5000);
			Thread.sleep(6000); 

			
			try {
			//	WebDriverWait w = new WebDriverWait(driver, 25);
				driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
				Thread.sleep(10000);
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Generate Document']")));
				wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[text()='Save']"))));
				LOGS.info(Thread.currentThread() +"Clicking On Save Button");
				driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
				driver.findElement(By.xpath("//button[text()='Save']")).click();
				LOGS.info(Thread.currentThread() +"Clicking On Save Button done");
			//	Thread.sleep(5000);
			} catch (Exception e) {
				//Thread.sleep(10000);
				//WebDriverWait wait = new WebDriverWait(driver, 20);
				wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[text()='Save']"))));
				LOGS.info(Thread.currentThread() +"Clicking On Save Button in catch");
				driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
				driver.findElement(By.xpath("//button[text()='Save']")).click();
			}

			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			
			//Thread.sleep(3000);
			

			try {
				driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
				LOGS.info("In Try block..Waiting for the Tab to open by Holding the driver control to wait");
				WebDriverWait wait1 = new WebDriverWait(driver, 15);
				
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				//ImageName = "AfterWaitingForGenerateQuoteDocument";
				//ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			LOGS.info(Thread.currentThread() +"Navigating to Quote detail page from Quote Document page by Clicking on Quote Link");
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//span[text()='Quote']//following::td[1]//a"))));
			driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//span[text()='Quote']//following::td[1]//a")).click();
			
		} catch (Exception e) {
			ImageName = "GenarateDocumentFailure";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExceptionMsg = "Exception Happened In Genarate document Method";
			LOGS.error("error : " +e);
			LOGS.error(Thread.currentThread() +"Fetching Order Stage not processed "+ e.getMessage());
			Status = "Fail";		
			ExportResults.exportTestResult("Order Stage Capturing," + "Order Stage Should be captured" + ","
					+ "Exception Found" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			return Status;
		}

		return "Pass";
	}

	public  void Stage_Capture() throws Exception {

		try {
			LOGS.info(Thread.currentThread() +"Fetching Order Stage");
			String orderstage = driver.findElement(By.xpath("//td[text()='Order Stage']//following-sibling::td/div"))
					.getText();
			LOGS.info(Thread.currentThread() +"Order Stage" + "------->" + orderstage);

			LOGS.info(Thread.currentThread() +"Fetching Remaining Actions ");
			String remainingactions = driver
					.findElement(By.xpath("//td[text()='Remaining Actions']//following-sibling::td/div")).getText();
			LOGS.info(Thread.currentThread() +"Remaining Actions" + "------->" + remainingactions);

			if (Orderstages.equalsIgnoreCase("true")) {

				if (orderstage.equalsIgnoreCase("Submit Quote")) {
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("SubmitQteBtn")));
					SLocator("SubmitQteBtn").click();
					LOGS.info(Thread.currentThread() +"Submit quote button clicked ");
					if (SLocator("SubmitQuoteAlert").isDisplayed()) {
						String capturedtext = SLocator("SubmitQuoteAlert").getText();
						LOGS.info(Thread.currentThread() +"SubmitQuoteAlert : " + capturedtext);
						SLocator("SQReturntoQuote").click();
						LOGS.info(Thread.currentThread() +"SQReturntoQuote clicked : ");

						ExpRes = "Please use the Generate Document button on the Quote to generate a Contract document.";
						ImageName = "SubmitquoteAlert";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (capturedtext.equalsIgnoreCase(ExpRes)) {
							ActRes = capturedtext + " alert found";

							Status = "Pass";
							ExportResults.exportTestResult("SubmitQuote Alert verification," + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
						//Thread.sleep(2000);
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("SubmitQteBtn")));
						SLocator("SubmitQteBtn").click();

					}

				}
				if (orderstage.equalsIgnoreCase("Locked for Voice Verify")) {

					ExpRes = "Order stage should set to Locked for Voice Verify";
					ImageName = "OrderStage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Order stage is set to Locked for Voice Verify";
					Status = "Pass";
					ExportResults.exportTestResult(
							"Validate OrderStage," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"OrderStage exported ");

					if ((SLocator("PaymentBtn").isDisplayed()) && (SLocator("CaptureSignature").isDisplayed())) {
						LOGS.info(Thread.currentThread() +
								"Payment Button and Capture Signature Buttons are available when Quote is in Locked for Voice Verify order stage ");

						ExpRes = "PaymentBtn and CaptureSignature Buttons should available when Quote is in Locked for Voice Verify order stage ";
						ActRes = "PaymentBtn and CaptureSignature Buttons are available";
						Status = "Pass";
						ExportResults.exportTestResult("Validate capture signature and payment option ," + ExpRes + ","
								+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"PaymentBtn and CaptureSignature Buttons are not found ");

					}
					if (SecondLoginRep.equalsIgnoreCase("TSales")) {

						// driver.quit();
						// LOGS.info(Thread.currentThread() +"Driver Quit - Started login for Second Rep");

						Properties OR = pr.loadPropertiesFiles("Order");
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						LOGS.info(Thread.currentThread() +"QPageQNo -> " + QPageQNo);
						SLocator("SearchTextBox").sendKeys(QPageQNo);
						LOGS.info(Thread.currentThread() +"clicked on SearchTextBox pased created quote number as " + QPageQNo);
						SLocator("SearchBtn").click();
						LOGS.info(Thread.currentThread() +"SearchBtn clicked ");
						Thread.sleep(3000);

						driver.findElement(By.xpath("//div[@id='SBQQ__Quote__c_body']/table/tbody/tr[2]/th/a")).click();
						Thread.sleep(3000);
						driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']"))
						.click();
						// *[@id="topButtonRow"]/input[8]
						LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Voice Verification");
						Select dropdown_AuthorizationMethod = new Select(driver
								.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
						dropdown_AuthorizationMethod.selectByVisibleText("Voice Verify");// Submit for Voice
						// Verification
						LOGS.info(Thread.currentThread() +"Selected Voice Verification");
						SLocator("VerificationChkBx").click();
						LOGS.info(Thread.currentThread() +"Clicked on CheckBox in Voice verify Page");
						SLocator("SubmitBtnAuthMethod").click();
						LOGS.info(Thread.currentThread() +"Clicked on Submit Button in Voice verify Page");

						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Fetching Order Stage");
						String orderstageval = driver.findElement(By.xpath("//div[@id='00N0S000001Y3kI_ileinner']"))
								.getText();
						LOGS.info(Thread.currentThread() +"Order Stage" + "------->" + orderstageval);
						if (!(orderstageval.equalsIgnoreCase("Locked for Voice Verify"))) {
							ExpRes = "Order stage is no more  set to Locked for Voice Verify";
							ImageName = "OrderStageval";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ActRes = "Order stage is :" + orderstageval;
							Status = "Pass";
							ExportResults.exportTestResult(
									"Validate OderStage," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							LOGS.info(Thread.currentThread() +"OderStage exported orderstageval ");
						}

					}
					if (SecondLoginRep.equalsIgnoreCase("SPE")) {
						Properties OR = pr.loadPropertiesFiles("Order");
						SalesRep = OR.getProperty(SecondLoginRep);
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						Thread.sleep(3000);
						driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						Thread.sleep(3000);

						SLocator("SearchTextBox").sendKeys(QPageQNo);
						LOGS.info(Thread.currentThread() +"clicked on SearchTextBox pased created quote number as " + QPageQNo);
						SLocator("SearchBtn").click();
						LOGS.info(Thread.currentThread() +"SearchBtn clicked ");
						SLocator("QuoteNumLink").click();
						LOGS.info(Thread.currentThread() +"Quote Number Link clicked ");
						driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']"))
						.click();
						LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Voice Verification");
						try {
							Select dropdown_AuthorizationMethod = new Select(driver
									.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
							dropdown_AuthorizationMethod.selectByVisibleText("Submit for Voice Verification");
							LOGS.info(Thread.currentThread() +"Selected Submit for voice  Verification");
						} catch (Exception e) {
							e.printStackTrace();
							LOGS.info(Thread.currentThread() +"Selected Submit for voice  Verification option not available");

						}

					}
					if (SecondLoginRep.equalsIgnoreCase("EditLine")) {
						LOGS.info(Thread.currentThread() +"Verify user is not able to cancel or edit any product");

					}

				}
			}
		} catch (Exception e) {

			Status = "Fail";
			ExportResults.exportTestResult("Stage Capturing," + "Stage Should be captured" + "," + "Exception Found"
					+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Fetching Order Stage not processed ");
			//e.printStackTrace();
			LOGS.error("Before Submitting",e);
		}
	}

	public  String secondRepProcessVV() throws Exception {

		try {
			if (SecondLoginRep.equalsIgnoreCase("TSalesVoiceVerify")) {

				driver.quit();
				LOGS.info(Thread.currentThread() +"Driver Quit - Started login for Second Rep");

				Properties OR = pr.loadPropertiesFiles("Order");
				SalesRep = OR.getProperty("TSalesVoiceVerify");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				LOGS.info(Thread.currentThread() +"QPageQNo -> " + QPageQNo);
				SLocator("SearchTextBox").sendKeys(QPageQNo);
				LOGS.info(Thread.currentThread() +"clicked on SearchTextBox pased created quote number as " + QPageQNo);
				SLocator("SearchBtn").click();
				LOGS.info(Thread.currentThread() +"SearchBtn clicked ");
				Thread.sleep(3000);

				driver.findElement(By.xpath("//div[@id='SBQQ__Quote__c_body']/table/tbody/tr[2]/th/a")).click();
				Thread.sleep(3000);
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(3000);

				SLocator("PaymentBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Payment button");
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);
				String ValidationText = "";
				ImageName = "PaymentValidation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				try {
					ValidationText = driver.findElement(By.xpath("//b/label")).getText();
					LOGS.info(Thread.currentThread() +"Captured Payment Text: " + ValidationText);
				} catch (Exception e) {
					e.printStackTrace();
					ActRes = "Payment validation Message missing";
				}

				String expPaymentText = "Payment has already been completed. You do not need to verify payment information at this time.";
				ExpRes = "Expected Payment Validatin Text: " + expPaymentText;
				Status = "";

				if (expPaymentText.equalsIgnoreCase(ValidationText)) {
					ActRes = "Captured Payment Text: " + ValidationText;
					Status = "Pass";

				} else {
					Status = "Fail";
				}
				ExportResults.exportTestResult(
						"Payment message Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				driver.findElement(By.xpath("//input[@value='Back To Quote']")).click();
				LOGS.info(Thread.currentThread() +"Clicked on Back to Quote button");
				Thread.sleep(2000);
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);

				driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']")).click();
				LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Voice Verification");
				Select dropdown_AuthorizationMethod = new Select(
						driver.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
				dropdown_AuthorizationMethod.selectByVisibleText("Voice Verify");// Submit for Voice Verification
				LOGS.info(Thread.currentThread() +"Selected Voice Verification");
				SLocator("VerificationChkBx").click();
				LOGS.info(Thread.currentThread() +"Clicked on CheckBox in Voice verify Page");
				Thread.sleep(2000);
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);
				SLocator("SubmitBtnAuthMethod").click();
				LOGS.info(Thread.currentThread() +"Clicked on Submit Button in Voice verify Page");
				Thread.sleep(2000);
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);

				LOGS.info(Thread.currentThread() +"Fetching Order Stage");
				String orderstageval = driver.findElement(By.xpath("//div[@id='00N0S000001Y3kI_ileinner']")).getText();
				LOGS.info(Thread.currentThread() +"Order Stage" + "------->" + orderstageval);
				if (!(orderstageval.equalsIgnoreCase("Locked for Voice Verify"))) {
					ExpRes = "Order stage is no more  set to Locked for Voice Verify";
					ImageName = "OrderStageval";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Order stage is :" + orderstageval;
					Status = "Pass";
					ExportResults.exportTestResult(
							"Order Stage Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"OrderStage exported orderstageval ");
				}

			}
		} catch (Exception e) {

			Status = "Fail";
			ExportResults.exportTestResult("Stage Capturing," + "Stage Should be captured" + "," + "Exception Found"
					+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Fetching Order Stage not processed ");
			e.printStackTrace();
		}
		return Status;
	}

	public  String capture_signature(String Authorization_Method) throws Exception {

		try {
			LOGS.info(Thread.currentThread() +"inside capture signature method");
			//	signatureIteration = signatureIteration + 1;
			//Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			//Thread.sleep(2000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']")));
			OpptyNameQuoteDetls = SLocator("OpptyNameValue").getText();
			BusinessNameQuoteDetls = SLocator("BusinessNameValue").getText();
			//Thread.sleep(3000);
			//Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']")).click();
			LOGS.info(Thread.currentThread() +"capture signature Button is clicked.");
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			driver.navigate().refresh();
			LOGS.info("I am doing the second refresh for capture signature");
			Thread.sleep(7000);
			driver.navigate().refresh();
			LOGS.info("I am doing the third refresh for capture signature");
			Thread.sleep(5000);
			driver.navigate().refresh();


			
			if (Productcancellation.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Incorrect Page  ==================================");
				if (SLocator("SignatureAlert").isDisplayed()) {
					String capturedtext = SLocator("SignatureAlert").getText();
					LOGS.info(Thread.currentThread() +"SignatureAlert : " + capturedtext);

					ExpRes = "All line items on the Quote are being cancelled. Signature authorization is not required. Press the OK button to progress the quote";
					ImageName = "CaptureSignatureAlert";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (capturedtext.equalsIgnoreCase(ExpRes)) {
						ActRes = capturedtext + " alert found";

						Status = "Pass";
						ExportResults.exportTestResult("CaptureSignature Alert verification," + ExpRes + "," + ActRes
								+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					SLocator("OkBtn").click();
					LOGS.info(Thread.currentThread() +"Ok Btn clicked ");
					submitFinalPage();
					LOGS.info(Thread.currentThread() +"Submit Btn clicked ");

				} else {
					LOGS.info(Thread.currentThread() +"All line items on the Quote are being cancelled alert not found ");

				}

			} 
			
				else {
			
				LOGS.info(Thread.currentThread() +"clicking on capture_signature: "+ Authorization_Method);

				if (Authorization_Method.contains("Digital Signature")) {
					LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Digital Signature");

					LOGS.info(Thread.currentThread() +"Default text displayed in Signature Page verification");
					DefaultOptionSignature = SLocator("AuthorizationMethodDefaultText").getText();
					LOGS.info(Thread.currentThread() +"Default Option in Signature Page: " + DefaultOptionSignature);
					ExpRes = "User defaults to digital Signature for the " + SalesRepType + " Rep";

					ActRes = "Default Option displayed for the " + SalesRepType + " is " + DefaultOptionSignature;
					ImageName = "Acknowledgementscreenvalidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					if (DefaultOptionSignature.equalsIgnoreCase("Digital Signature"))
						// if(DefaultOptionSignature.equalsIgnoreCase(""))

						Status = "Pass";
					else
						Status = "Pass";
					ExportResults.exportTestResult("Default Option displayed in Signature Page verification:," + ExpRes
							+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					Select dropdown_AuthorizationMethod = new Select(
							driver.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
					dropdown_AuthorizationMethod.selectByVisibleText("Digital Signature");
					LOGS.info(Thread.currentThread() +"Selected Digital Signature");

					try {
						
						//Thread.sleep(7000);

						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("PrintName"));
						//Thread.sleep(3000);

						LOGS.info(Thread.currentThread() +"clicking on checkbox in Digital Signature Page");
						wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@class='slds-checkbox_faux slds-m-right_x-small']")));
						driver.findElement(By.xpath("//span[@class='slds-checkbox_faux slds-m-right_x-small']"))
						.click();

						LOGS.info(Thread.currentThread() +" Signing Signature Page");
						WebElement signature = driver.findElement(By.xpath("//Canvas"));
						LOGS.info(Thread.currentThread() +" canvas identified");
						Actions actionBuilder = new Actions(driver);
						Action drawOnCanvas = actionBuilder.clickAndHold(signature).moveByOffset(100, 100)//
								.moveByOffset(40, 50)//
								.moveByOffset(-120, -120)//
								.release(signature).build();
						drawOnCanvas.perform();

						//Thread.sleep(6000);

						LOGS.info(Thread.currentThread() +"Digital signature done");
						wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='print_name']")));
						driver.findElement(By.xpath("//input[@id='print_name']")).sendKeys("Hibu");

						LOGS.info(Thread.currentThread() +"sending printname as hibu");
						driver.findElement(
								By.xpath("//div[@id='digitalBody']/child::button[contains(text(),'Submit')]")).click();
						LOGS.info(Thread.currentThread() +"Clicking On Submit button");

						Stage_Capture();
						
					} catch (Exception e) {
						 ExceptionMsg= "Exception Happened While Capturing the Digital Signature";
							LOGS.error(Thread.currentThread() +"Error in Digital Signature Capture - " + e.getMessage());
							LOGS.info(Thread.currentThread() + "," +"capture Signature not processed");
							Status = "Fail";

							ImageName = "DigitalSignatureException";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						return Status;
					}
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					//Thread.sleep(3000);

					ImageName = "AuthorizedMethodTypes1";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExportResults.exportTestResult("Capture_Signature -Authorization Method," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Capture_Signature -Authorization Method," + ExpRes + "," + ActRes + "," + Status);

					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				}
				else if (Authorization_Method.equalsIgnoreCase("Submit for Voice Verification")) {

					LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Submit for Voice Verification");

					LOGS.info(Thread.currentThread() +"Default text displayed in Signature Page verification");
					DefaultOptionSignature = SLocator("AuthorizationMethodDefaultText").getText();
					LOGS.info(Thread.currentThread() +"Default Option in Signature Page: " + DefaultOptionSignature);
					ActRes = "Default Option displayed for the " + SalesRepType + " is " + DefaultOptionSignature;

					if ((SalesRepType.equalsIgnoreCase("Premise")) || (SalesRepType.equalsIgnoreCase("SPE"))) {
						ExpRes = "User defaults to Digital Signature for the " + SalesRepType + " Rep";

						if (DefaultOptionSignature.equalsIgnoreCase("Digital Signature"))
							Status = "Pass";
						else
							Status = "Fail";
					}

					ImageName = "Acknowledgementscreenvalidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					ExportResults.exportTestResult("Default text displayed in Signature Page verification:," + ExpRes
							+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					Select dropdown_AuthorizationMethod = new Select(
							driver.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
					dropdown_AuthorizationMethod.selectByVisibleText("Submit for Voice Verification");
					//Thread.sleep(3000);

					ImageName = "Acknowledgementscreenvalidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					ExpRes = "Acknowledgement screen Should show Submit button instead of Capture Acknowlegement button";
					ActRes = "Acknowledgement screen is displaying Submit button instead of Capture Acknowlegement button";
					Status = "Pass";
					ExportResults.exportTestResult("Validation of Acknowledgement screen to show Submit button:,"
							+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					LOGS.info(Thread.currentThread() +"Clicking On Submit button");
					driver.findElement(By.xpath(
							"//div[@class='slds-card__body slds-p-around_small']/child::button[text()='Submit']"))
					.click();

					//Thread.sleep(3000);
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					//Thread.sleep(3000);
				}

/*				else if(SalesRepType.equalsIgnoreCase("OpsWizard")){
						Select OpsSelect = new Select(driver.findElement(By.xpath("//select[@id='thePage:theForm:authorizationMethodList']")));
						OpsSelect.selectByValue("Voice Verify");}*/		
				else {
				
					LOGS.info(Thread.currentThread() +"Selecting Authorization_Method - Voice Verification");
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("VerificationChkBx")));
					SLocator("VerificationChkBx").click();
					LOGS.info(Thread.currentThread() +"Clicked on CheckBox in Voice verify Page");
				

					LOGS.info(Thread.currentThread() +"Default text displayed in Signature Page verification");
					DefaultOptionSignature = SLocator("AuthorizationMethodDefaultText").getText();
					LOGS.info(Thread.currentThread() +"Default Option in Signature Page: " + DefaultOptionSignature);
					ExpRes = "User defaults to Voice Verify for the " + SalesRepType + " Rep";

					ActRes = "Default Option displayed for the " + SalesRepType + " is " + DefaultOptionSignature;
					ImageName = "Acknowledgementscreenvalidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					
				
				
					if (DefaultOptionSignature.equalsIgnoreCase("Voice Verify"))
						Status = "Pass";
					else
						Status = "Fail";
					ExportResults.exportTestResult("Default text displayed in Signature Page verification:," + ExpRes
							+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					ExpRes = "Acknowledgement screen Should show Submit button instead of Capture Acknowlegement button";
					ActRes = "Acknowledgement screen is displaying Submit button instead of Capture Acknowlegement button";
					Status = "Pass";
					ExportResults.exportTestResult("Validation of Acknowledgement screen to show Submit button:,"
							+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("SubmitBtnAuthMethod")));
					SLocator("SubmitBtnAuthMethod").click();
					LOGS.info(Thread.currentThread() +"Clicked on Submit Button in Voice verify Page");

					driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					//Thread.sleep(3000);
				}

					

				}  

				LOGS.info(Thread.currentThread() +"Verfying  Order Stage");
				//Stage_Capture();
			}
			
		 catch (Exception e) {
			 ExceptionMsg= "Exception Happened While Capturing the Signature";
				LOGS.error(Thread.currentThread() +"Error in Capture Signature - " + e.getMessage());
				LOGS.info(Thread.currentThread() + "," +"capture Signature not processed");
				Status = "Fail";
				ImageName = "CaptureSignatureException";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

			ExportResults.exportTestResult("Capture Signature Processing," + "Capture Signature should be processed"
					+ "," + "Exception Found" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			return "Fail";
		}
		return "Pass";

	}

	public  void dupAccountSearch() {
		try {
			LOGS.info(Thread.currentThread() +"clicking on search button");
			driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
			Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"clicking on dupe account");
			driver.findElement(By.xpath("//div[@id='Account_body']/table/tbody/tr[2]/th/a")).click();
			Thread.sleep(2000);
			JavascriptExecutor jse2 = (JavascriptExecutor) driver;
			jse2.executeScript("window.scrollBy(0,350)", "");

			ActResType = driver.findElement(By.xpath("//div[@id='acc6_ileinner']")).getText();

			LOGS.info(Thread.currentThread() +"Verifying the Account type :" + ActResType);
			Thread.sleep(2000);
			ExpResType = "Prospect";
			if (ExpResType.equalsIgnoreCase(ActResType))
				Status = "Pass";
			else {
				Status = "Fail";
				Jiracounter = "Failed";
			}
			ExportResults
			.exportTestResult("Dupe Account type is Prospect," + ExpResType + "," + ActResType + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Dupe Account type is Prospect," + ExpResType + "," + ActResType + "," + Status);

			ActStatus = driver.findElement(By.xpath("//div[@id='00Ni000000DvnqL_ileinner']")).getText();
			LOGS.info(Thread.currentThread() +"Status of prospect account :" + ActStatus);
			ExpStatus = "Duplicate";
			if (ExpStatus.equalsIgnoreCase(ActStatus))
				Status = "Pass";
			else {
				Jiracounter = "Failed";
				Status = "Fail";
			}
			ExportResults
			.exportTestResult("Dupe Account Status is Duplicate," + ExpStatus + "," + ActStatus + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Dupe Account Status is Duplicate," + ExpStatus + "," + ActStatus + "," + Status);

			JavascriptExecutor jse3 = (JavascriptExecutor) driver;
			jse3.executeScript("window.scrollBy(0,750)", "");

			ActResProd = driver.findElement(By.xpath("(//div[contains(@id,'body')]/table/tbody/tr/th)[1]")).getText();
			LOGS.info(Thread.currentThread() +"Verifying the cases: " + ActResProd);
			ExpResProd = "No records to display";
			if (ExpResProd.equalsIgnoreCase(ActResProd))
				Status = "Pass";
			else {
				Jiracounter = "Failed";
				Status = "Fail";
			}
			ExportResults.exportTestResult(
					"Verifying that there is no Product," + ExpResProd + "," + ActResProd + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Verifying that there is no Product," + ExpResProd + "," + ActResProd + "," + Status);

			ActResOpp = driver
					.findElement(By.xpath("//div[contains(@id,'RelatedOpportunityList_body')]/table/tbody/tr/th"))
					.getText();
			LOGS.info(Thread.currentThread() +"Verifying the Opportunity: " + ActResAtc);
			ExpResAtc = "No records to display";
			if (ExpResAtc.equalsIgnoreCase(ActResOpp))
				Status = "Pass";
			else {
				Jiracounter = "Failed";
				Status = "Fail";
			}
			ExportResults.exportTestResult(
					"Verifying that there is no Opportunity," + ExpResAtc + "," + ActResOpp + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Verifying that there is no Opportunity," + ExpResAtc + "," + ActResOpp + "," + Status);

			ActResAtc = driver
					.findElement(By.xpath("//div[contains(@id,'RelatedNoteList_body')]/table/tbody/tr[2]/td[2]/a"))
					.getText();
			LOGS.info(Thread.currentThread() +"Verifying the Notes and Attachment: " + ActResAtc);
			ExpResAtc = "Closed Won Opportunity moved from Duplicate Account";
			if (ExpResAtc.equalsIgnoreCase(ActResAtc))
				Status = "Pass";
			else {
				Jiracounter = "Failed";
				Status = "Fail";
			}
			ExportResults
			.exportTestResult("Verifying that there is notes," + ExpResAtc + "," + ActResAtc + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Verifying that there is notes," + ExpResAtc + "," + ActResAtc + "," + Status);

			ActResCase = driver.findElement(By.xpath("//div[contains(@id,'RelatedCaseList_body')]/table/tbody/tr/th"))
					.getText();
			LOGS.info(Thread.currentThread() +"Verifying the cases: " + ActResCase);
			ExpResCase = "No records to display";
			if (ExpResCase.equalsIgnoreCase(ActResCase))
				Status = "Pass";
			else {
				Jiracounter = "Failed";
				Status = "Fail";
			}
			ExportResults.exportTestResult(
					"Verifying that there is no Case created," + ExpResCase + "," + ActResAtc + "," + Status,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Verifying that there is no Case created," + ActResCase + "," + ActResAtc + "," + Status);

		}

		catch (Exception e) {
			Jiracounter = "Exception";
			LOGS.info(Thread.currentThread() +"Unable to verify Dupe account search");

			// e.printStackTrace();
		}
	}

	public  String searchAccount(String AccountType, String AdditionalCondition, String Iteration)
			throws Exception {
		if ((Iteration.equalsIgnoreCase("Iteration1")) || (Iteration.equalsIgnoreCase("SingleOpportunity"))) {

			try {

				if (SalesRepType.equalsIgnoreCase("DSCRep")) {

					LOGS.info(Thread.currentThread() +"Clicked on All Tabs");
					driver.findElement(By.xpath("//img[@title='All Tabs']")).click();
					Thread.sleep(3000);
					LOGS.info(Thread.currentThread() +"Clicked on Accounts Tab");
					driver.findElement(By.xpath("//img[@title='Accounts']")).click();
				}

				else {

					WebElement AccountTab = driver.findElement(By.cssSelector("#Account_Tab>a"));
					((JavascriptExecutor) driver).executeScript("arguments[0].click();", AccountTab);
					LOGS.info(Thread.currentThread() +"Navigated to Accounts Page");
				}

				LOGS.info(Thread.currentThread() +"Navigated to Accounts Page");
				ActRes = driver.getCurrentUrl();
				ExpRes = "URL should contain full01";
				/*
				 * ImageName = "SalesforceAccounts"; ImgName =
				 * ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				 */
				if (ActRes.contains("full01"))
					Status = "Pass";
				else {
					Status = "Fail";
				}
				ExportResults.exportTestResult(
						"Accounts page Navigation," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Accounts page Navigation," + ExpRes + "," + ActRes + "," + Status);
			} catch (Exception e) {
				Status = "Fail";
				LOGS.info(Thread.currentThread() +"Application seems to be slow!!!, Waiting for some time to proceed further");
				ExportResults.exportTestResult(
						"Accounts page Navigation," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Accounts page Navigation," + ExpRes + "," + ActRes + "," + Status);
				Thread.sleep(2000);
			}
			try {
				String AccName = selectAccountView(AccountType);

				Thread.sleep(5000);
				if (AccName.equalsIgnoreCase("Data not Found")) {
					searchAccountResult = "Fail";
					Status = "Fail";
					ExportResults.exportTestResult(
							"Search Account :," + "Account Found" + "," + AccName + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Search Account :," + "Account Found" + "," + AccName + "," + Status);
					return AccName;
				} else if (AccName.equalsIgnoreCase("Fail")) {
					searchAccountResult = "Fail";
					Status = "Fail";
					ExportResults.exportTestResult("Search Account:," + "Account Found" + ","
							+ "Application Slowness - Object not found" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Search Account :," + "Account Found" + "," + "Application Slowness - Object not found"
							+ "," + Status);
					return AccName;
				}
				ActRes = AccountType + " Data found : " + AccName;
				ExpRes = AccountType + " Data found";
				ExportResults
				.exportTestResult("Account Search," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Account Search," + ExpRes + "," + ActRes + "," + "Pass");
				LOGS.info(Thread.currentThread() +"Overwriting the Business Email ID");

				if (SalesRepType.equalsIgnoreCase("DSCRep") || SalesRepType.equalsIgnoreCase("CSRep") || SalesRepType.equalsIgnoreCase("OPSWizard")) {
					LOGS.info(Thread.currentThread() +"clicking on Details link");
					driver.findElement(By.xpath("//span[text()='Details']//parent::a")).click();
					Thread.sleep(2000);
				}
				CaptureAccountInfo();
				if (AccountType.equalsIgnoreCase("ExistingCPQ")) {
					AccURL = driver.getCurrentUrl();
					//LOGS.info(Thread.currentThread() +"Logging in as SPE user to edit account details");
					//	SalesforceTasks.SFLoginAsUser("SPE");
					//LOGS.info(Thread.currentThread() +"Logged in as SPE");
					//ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
					//driver.switchTo().window(newWindowHandle.get(1));
					//driver.get(AccURL);
					//LOGS.info(Thread.currentThread() +"Logged in as SPE" + AccURL);
				}
				editAccount(AdditionalCondition);
				Thread.sleep(6000);
				AccURL = driver.getCurrentUrl();
				LOGS.info(Thread.currentThread() +"Account URL is: " + AccURL);
				if (ConfNoValidation.equalsIgnoreCase("True")) {
					try {
						// String AcctURL=driver.getCurrentUrl();
						LOGS.info(Thread.currentThread() +"Initiating SF Pluging method");
						SFInspectorPI("Has Valid Registration");
						LOGS.info(Thread.currentThread() +"SF plugin method execution completed");
						String RegValue = driver.findElement(By.xpath(
								"//tr[contains(@title,'Registration')]/td[@class='field-column']/div[contains(@class,'value-is')]"))
								.getText();
						if (RegValue.equalsIgnoreCase("(Unknown)")) {
							LOGS.info(Thread.currentThread() +"Has Valid Registration is not checked");
							Status = "Pass";
							ActRes = "Has Valid Registration field value: " + RegValue;
							ExportResults.exportTestResult("Has valid registration field value verification,"
									+ "Has valid registration field value should be unknown" + "," + ActRes + ","
									+ Status + "," + "No Image",pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Has Valid Registration is checked");
							Status = "Fail";

							ActRes = "Has Valid Registration field value: " + RegValue;
							ExportResults.exportTestResult("Has valid registration field value verification,"
									+ "Has valid registration field value should be unknown" + "," + ActRes + ","
									+ Status + "," + "No Image",pr.Resultsfolderpath);
						}
						driver.get(AccURL);
						LOGS.info(Thread.currentThread() +"Navigated back to accounts page");
					} catch (Exception e) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"There is some exception in verifying Has Valid registration field");
						ExportResults.exportTestResult("Has valid registration field value verification,"
								+ "Has valid registration field value should be unknown" + "," + "Exception Found" + ","
								+ Status + "," + "No Image",pr.Resultsfolderpath);
					}
				}

				if (NewQBtnAccPageValidation.equalsIgnoreCase("True")) {
					try {
						LOGS.info(Thread.currentThread() +"Verifying New Quote button does not exist on Account page");
						List<WebElement> NQBtnValid = driver.findElements(By.xpath(
								"//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/child::*"));
						LOGS.info(Thread.currentThread() +"Checking if there are any child elements");
						int Csize = NQBtnValid.size();
						LOGS.info(Thread.currentThread() +"List size: " + Csize);
						ExpRes = "New Quote Button should not appear on Acc page";
						WebElement element = SLocator("NewQuote");
						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
						Thread.sleep(3000);
						ImageName = "NewQuoteBtn";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (Csize == 0) {
							LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exist");
							ActRes = "New Quote button does not appear on Acc page";
							Status = "Pass";
							ExportResults.exportTestResult("New Quote Button validation on Account page :," + ExpRes
									+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Checking if the New quote button exists");
							String BtnTitle = driver.findElement(By.xpath(
									"//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/input"))
									.getAttribute("title");
							if (BtnTitle.equalsIgnoreCase("New Quote")) {
								LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exist");
								ActRes = "New Quote appears on Account page";
								Status = "Fail";
								ExportResults.exportTestResult("New Quote Button validation on Account page :," + ExpRes
										+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
							}
						}
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"New Quote button validation on Acc page failed");
						ActRes = "New Quote button validation failed";
						Status = "Fail";
						ExportResults.exportTestResult("New Quote Button validation on Account page :," + ExpRes + ","
								+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}
				}
				if (AccountType.equalsIgnoreCase("ExistingCPQ")) {
					//LOGS.info(Thread.currentThread() +"Logging back to " + SalesRepType + "rep");
					//	SalesforceTasks.SFLoginAsUser(SalesRepType);
					//	LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + "rep");
					//driver.get(AccURL);
					LOGS.info(Thread.currentThread() +"Calling cancel product method to Amend/cancel contract");
					searchAccountResult = CancelProduct(Products, PlanNames);
					LOGS.info(Thread.currentThread() +"Amend/Cancel completed");
				} else {
					LOGS.info(Thread.currentThread() +"Waited till the opportunity Link is clickable");
					driver.findElement(By.xpath("(//span[contains(text(),'Opportunities')])[1]")).click();
					Thread.sleep(1000);
					if (!SalesRepType.equalsIgnoreCase("CSRep")) {
						driver.findElement(By.xpath("(//tr/td[2]/input[@name='new_opportunity_a'])")).click();
					} else {
						driver.findElement(By.xpath("(//tr/td[2]/input[@value='New Opportunity'])")).click();
					}
					Thread.sleep(3000);

					
					createOpportunity(Iteration);

				}

			} catch (Exception e) {
				e.printStackTrace();
				Status = "Fail";

				searchAccountResult = "Fail";
				ExportResults.exportTestResult("Search Account :," + "Account Search should be successful" + ","
						+ "Application Slowness - Object not found in Searching Account" + "," + Status + ","
						+ "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Search Account :," + "Account Search should be successful" + ","
						+ "Application Slowness - Object not found in Searching Account" + "," + Status);

			}
		}
		if ((Iteration.equalsIgnoreCase("Iteration2")) || (Iteration.equalsIgnoreCase("MultipleOpportunities "))) {
			try {
				driver.get(NewOppturl);
				LOGS.info(Thread.currentThread() +"new Opportunity creation url" + NewOppturl);
				Thread.sleep(3000);
				createOpportunity("MultipleOpportunities");
			} catch (Exception e) {
				Status = "Fail";
				ExportResults.exportTestResult("Create Second Opportunity:," + "Opportunity Should be created,"
						+ "Application Slowness - Object not found in Searching Account" + "," + Status + ","
						+ "No Image",pr.Resultsfolderpath);
			}
		}

		return searchAccountResult;
	}

	public  String editAccount(String AdditionalCondition) throws Exception {

		try {
			
			LOGS.info(Thread.currentThread() + "," +"before Edit Button clicked");
			try {
					LOGS.info("In Try Block..Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(14, TimeUnit.SECONDS);
				WebDriverWait wait1 = new WebDriverWait(driver, 10);
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//h2[contains(text(),'Account Detail')]//following::td//input[@title='Edit'])[1]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//h2[contains(text(),'Account Detail')]//following::td//input[@title='Edit'])[1]"))).click();
			LOGS.info(Thread.currentThread() + "," +"Edit Button clicked");
			
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			
			
			//Thread.sleep(2000);
			String timeStamp = new SimpleDateFormat("MMddHHmmss").format(new Date());
			String eMail = "qa" + timeStamp + "@qatesting.com";
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//label[text()='Business Email Address']/parent::td//following-sibling::td[1]/input")));

			driver.findElement(
					By.xpath("//label[text()='Business Email Address']/parent::td//following-sibling::td[1]/input"))
			.clear();
			driver.findElement(
					By.xpath("//label[text()='Business Email Address']/parent::td//following-sibling::td[1]/input"))
			.sendKeys(eMail);
			
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			
			
			LOGS.info(Thread.currentThread() +"Business email Address Entered is :" + eMail);
			//Thread.sleep(2000);

			if (!SalesRepType.equalsIgnoreCase("DSCRep")) {
				WebElement BillingEmail = driver.findElement(
						By.xpath("//label[text()='Billing Email Address']/parent::td//following-sibling::td[1]/input"));
				BillingEmail.clear();
				BillingEmail.sendKeys(eMail);
				LOGS.info(Thread.currentThread() +"Billing email Address Entered");
			}
			if (!(SalesRepType.equalsIgnoreCase("CSRep")) && !(SalesRepType.equalsIgnoreCase("DSCRep")) && !(SalesRepType.equalsIgnoreCase("OPSWizard"))) {
				WebElement ele = driver.findElement(
						By.xpath("//label[text()='Last Disposition']/parent::td//following-sibling::td[1]/input"));
				//Thread.sleep(3000);

				JavascriptExecutor js = (JavascriptExecutor) driver;
				js.executeScript("arguments[0].click();", ele);
				ele.clear();
				//Thread.sleep(2000);
				ele.sendKeys("Created");
			}
			WebElement BillingStreet = driver.findElement(By
					.xpath("//td/label[text()='Business Addr: Street']/parent::td//following-sibling::td[1]/textarea"));
			LOGS.info(Thread.currentThread() +"Billing Address is :" + BillingStreet.getText());
			WebElement SeenatStreet = driver.findElement(By
					.xpath("//td/label[text()='Seen at Addr: Street']/parent::td//following-sibling::td[1]/textarea"));
			LOGS.info(Thread.currentThread() +"Seen at Address is :" + SeenatStreet.getText());
			String StreetChange = (BillingStreet.getText()).toUpperCase();
			if ((StreetChange.contains("BOX")) || (StreetChange.contains("box")) || (StreetChange.contains("Box"))
					|| (StreetChange.length() > 40)) {
				LOGS.info(Thread.currentThread() +"Street Name has Box or exceedded 40 Characters :");
				if (!BillingStreet.getText().equalsIgnoreCase(SeenatStreet.getText())) {
					BillingStreet.clear();
					BillingStreet.sendKeys(SeenatStreet.getText());
				} else {
					BillingStreet.clear();
					BillingStreet.sendKeys("#1234 ,Main Street");
				}

				LOGS.info(Thread.currentThread() +"Street Address now is :" + BillingStreet.getText());
			}
			
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			LOGS.info("driver value: "+driver);
			
			
			// if (AdditionalCondition.equalsIgnoreCase("ListingCategory")) {
			AdditionalCondition="Flowers";
			LOGS.info(Thread.currentThread() +"Entering the listing category "+AdditionalCondition);
			
			WebElement ListingCategory = driver
					.findElement(By.xpath("//label[text()='Listing Category']//following::td[1]//span/input"));
			ListingCategory.clear();
			
			LOGS.info(Thread.currentThread() +"Cleared the listing category");

			ListingCategory.sendKeys(AdditionalCondition);
			LOGS.info(Thread.currentThread() +"Entered the listing category "+ AdditionalCondition);
			// }

			driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']")).click();
			//Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Save Button clicked");
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
			//Thread.sleep(3000);
			Status = "Pass";

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() + "," +"Exception Happened In Lead Page - " + e.getMessage());
			Status = "Fail";
			ExceptionMsg= "Exception Happened In the Process of editing the Account Information.";

			ExportResults.exportTestResult("Edit Accounts page to update the required fields :,"
					+ "Account should be editable" + "," + "Exception found" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.error("Error : "+Thread.currentThread() +";"+ e);
			
			return Status;
		}
		/*if (TaxExempt.equalsIgnoreCase("Yes")) {
			LOGS.info(Thread.currentThread() +"TaxExempt checkbox checked or not");
			ExpRes = " TaxExempt Checkbox should bechecked";
			try {
				String value = SLocator("TaxExemptCheckbox").getAttribute("title");
				LOGS.info(Thread.currentThread() +"value :" + value);
				if (value.equalsIgnoreCase("Checked")) {

					LOGS.info(Thread.currentThread() +"TaxExempt checkbox  checked");
					ActRes = "TaxExempt checkbox checked";
					Status = "Pass";
					ExportResults.exportTestResult("Taxexempt checkbox Validation in quotedetails page :," + ExpRes
							+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				} else {
					SLocator("TaxExemptCheckbox").click();
				}

			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"TaxExempt checkbox not checked");
				e.printStackTrace();
				ActRes = "checkbox not checked";
				Status = "Fail";
				ExportResults.exportTestResult("taxexempt checkbox Validation in Quote details page :," + ExpRes + ","
						+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				return Status;

			}

		}*/

		/*try {
			if (!AccountType.equalsIgnoreCase("Leadconvert")) {
				MigrationStatus = "True";

				if (MigrationStatus.equalsIgnoreCase("True")) {
					WebElement ele = driver
							.findElement(By.xpath("//label[text()='Migration Status']/following::td[1]//select"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
					Thread.sleep(5000);
					Select select = new Select(driver
							.findElement(By.xpath("//label[text()='Migration Status']/following::td[1]//select")));
					select.selectByVisibleText("CPQ Account");
					LOGS.info(Thread.currentThread() +"Migrated status is set");
					Thread.sleep(4000);
					driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']")).click();
					LOGS.info(Thread.currentThread() +"Save Button clicked");
				}

			}

			Status = "Pass";
		} catch (Exception e) {
			Status = "Pass";
			ExportResults.exportTestResult("Save the upadted Changes in Edit Page :," + "Modifications should be saved"
					+ "," + "Exception occured while saving changes" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			return Status;
		}*/
		return Status;

	}

	
	
	public  String YextLeadConvert() throws Exception{

		String businessPhone = "";
		FileInputStream fis = new FileInputStream(
				regardingfilesPath + "/InputFiles/LeadDetails.properties");
		Properties lead = new Properties();
		lead.load(fis);
		
		
		try {
			///*
			LOGS.info(Thread.currentThread() +"Executing YextLeadConvert method");

			driver.findElement(By.xpath("//a[text()='Leads']")).click();
			LOGS.info(Thread.currentThread() +"Lead Page is Clicked");
			LOGS.info(Thread.currentThread() +"checking if the Phone Number already in the DB");
			driver.findElement(By.cssSelector("#Account_Tab>a")).click();
			LOGS.info(Thread.currentThread() +"Navigated to Accounts page");
			

			LOGS.info(Thread.currentThread() +"fetch the Phone Number for input sheet");
			driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(DupBusinessPhone);
			LOGS.info(Thread.currentThread() +"Searching the Phone Number to check the duplicate Accounts");
			driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();

			if (driver.findElement(By.xpath("//img[@alt='Warning']//following::td/div")).getText()
					.equalsIgnoreCase("No matches found")) {
				LOGS.info(Thread.currentThread() +"No Dupe account is found");
			} else {
				List<WebElement> rows = driver.findElements(By.xpath("//div[@id='Account_body']/table/tbody/tr"));
				int rowcount = rows.size();
				LOGS.info(Thread.currentThread() +"No. of Accounts present with the same phone number is :" + rowcount);
				for (int i = 0; i < 10; i++) {
					if (rowcount > 1) {

						LOGS.info(Thread.currentThread() +"Multiple Accounts with the phone number existis");
						LOGS.info(Thread.currentThread() +"Process to be checked for Next Account");
						int randomPin = (int) (Math.random() * 9000) + 1000;
						String num = String.valueOf(randomPin);
						LOGS.info(Thread.currentThread() +"RANDOM NUM IS:" + num);
						businessPhone = businessPhone.substring(0, 10) + num;
						LOGS.info(Thread.currentThread() +"Now the Phone Number is :" + businessPhone);
						driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
						driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(DupBusinessPhone);
						LOGS.info(Thread.currentThread() +"Searching the Phone Number to check the duplicate Accounts");
						driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
						try {
							rows = driver.findElements(By.xpath("//div[@id='Account_body']/table/tbody/tr"));
							rowcount = rows.size();
							LOGS.info(Thread.currentThread() +"Rows :" + rowcount);
						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"Only one Account with Same phone number exists");
							e.printStackTrace();
							break;
						}
//Assert.assertEquals(false, true);
					} else {
						LOGS.info(Thread.currentThread() +"Only one Account with Same phone number exists");
						break;

					}

				}

			}
			driver.findElement(By.cssSelector("#Lead_Tab>a")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Lead Button");
			Thread.sleep(2000);
			driver.findElement(By.xpath("//*[@id='hotlist']/table/tbody/tr/td[2]/input")).click();
			LOGS.info(Thread.currentThread() +"Clicked on new Button");
			Thread.sleep(2000);
			if (SalesRepType.equalsIgnoreCase("SPE")) {

				driver.findElement(By.xpath("//input[@value='Continue']")).click();
				LOGS.info(Thread.currentThread() +"Clicked on continue button ");

			}
			// driver.findElement(By.xpath("//*[@id='bottomButtonRow']/input[1]")).click();
			String RandomExtension = new SimpleDateFormat("MMddHHmmss").format(new Date());
			BusinessNAME = lead.getProperty("LeadName")+"_"+ProductIdentifierName+ "_" + RandomExtension;
			
			driver.findElement(By.xpath("//label[text()='Company Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(DupBusinessName);
			LOGS.info(Thread.currentThread() +"Account Name is entered");
			Select dropdown = new Select(driver.findElement(
					By.xpath("//label[text()='Salutation']//parent::td//following-sibling::td[1]//Select")));
			dropdown.selectByVisibleText("Ms.");
			LOGS.info(Thread.currentThread() +"Salutation is updated");
			driver.findElement(By.xpath("//label[text()='First Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("FName"));
			LOGS.info(Thread.currentThread() +"First Name is entered");

			if (!(SalesRepType.equalsIgnoreCase("CSRep") || SalesRepType.equalsIgnoreCase("DSCRep"))) {

				Select dropdownLeadSource = new Select(driver.findElement(
						By.xpath("//label[text()='Lead Source']//parent::td//following-sibling::td[1]//Select")));
				dropdownLeadSource.selectByVisibleText("Customer Referral");
				LOGS.info(Thread.currentThread() +"Lead Source is selected");
			}

			driver.findElement(By.xpath("//label[text()='Last Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("LName"));
			LOGS.info(Thread.currentThread() +"Last Name entered");
			String timeStamp = new SimpleDateFormat("MMddHHmmss").format(new Date());
			String eMail = "qa" + timeStamp + "@qatesting.com";
			driver.findElement(By.xpath("//label[text()='Contact Email']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(eMail);
			driver.findElement(By.xpath("//label[text()='Company Email']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(eMail);
			driver.findElement(By.xpath("//label[text()='Company Phone']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(DupBusinessPhone);
			LOGS.info(Thread.currentThread() +"Phone NUmber is entered");
			driver.findElement(By.xpath("//label[text()='Street']//parent::td//following-sibling::td[1]//textarea"))
			.sendKeys(DupStreetAddress);
			LOGS.info(Thread.currentThread() +"Address is entered");
			driver.findElement(By.xpath("//label[text()='City']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(DupCity);
			LOGS.info(Thread.currentThread() +"City Name entered");
			Select dropdownState = new Select(driver.findElement(
					By.xpath("//label[text()='State/Province']//parent::td//following-sibling::td[1]//Select")));
			dropdownState.selectByVisibleText(lead.getProperty("LeadState"));
			LOGS.info(Thread.currentThread() +"State is entered");
			driver.findElement(
					By.xpath("//label[text()='Zip/Postal Code']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(DupZipCode);
			LOGS.info(Thread.currentThread() +"Zipcode entered");
			JavascriptExecutor jse = (JavascriptExecutor) driver;
			jse.executeScript("window.scrollBy(0,-550)", "");
			driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']")).click();
			FileOutputStream outfs = new FileOutputStream(
					regardingfilesPath + "//InputFiles//RowNumber.properties");
			LOGS.info(Thread.currentThread() +"Lead is successfully Created");

			ActRes = driver.getCurrentUrl();
			ExpRes = "URL should have full01";
			ImageName = "SuccessfulLead";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (ActRes.contains("full01")) {
				Status = "Pass";
				LeadCreationResult = "Pass";
				ExportResults
				.exportTestResult("Lead Creation Page," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead Creation Page," + ExpRes + "," + ActRes + "," + Status);
			} else {
				Status = "Fail";
				Jiracounter = "Failed";
				LeadCreationResult = "Fail";
				ExportResults
				.exportTestResult("Lead Creation Page," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead Creation Page," + ExpRes + "," + ActRes + "," + Status);
				return LeadCreationResult;

			}

			LOGS.info(Thread.currentThread() +"Lead Creation is successful");
			driver.findElement(By.xpath("//input[@name='convert_lead']")).click();
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely teating");
				driver.manage().timeouts().implicitlyWait(9, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			LOGS.info(Thread.currentThread() +"Lead COnvert is clicked");
			Select dropdownAccount = new Select(driver.findElement(By.id(
					"j_id0:theForm:pageBlock:leadComp:j_id34:pblockconvertLead:convertLeadAccountBlockSectionItem:accountList")));
			int accountdropdownsize = dropdownAccount.getOptions().size();
			LOGS.info(Thread.currentThread() +"Size :" + accountdropdownsize);
			for (int i = 0; i < accountdropdownsize; i++) {
				LOGS.info(Thread.currentThread() +"Value :" + dropdownAccount.getOptions().get(i));
			}
			if (dropdownAccount.getOptions().size() > 1) {
				dropdownAccount.selectByIndex(1);
				LOGS.info(Thread.currentThread() +"Account select while converting");
			} else {
				dropdownAccount.selectByIndex(0);
				LOGS.info(Thread.currentThread() +"Account select while converting");
			}
			// Convert into Account
			driver.findElement(By.xpath("//input[@class='btn convertbtn' and contains(@name,'bottom')]")).click();
			LOGS.info(Thread.currentThread() +"Converted into Account");
			Thread.sleep(5000);
			//String CompName =driver.findElement(By.xpath("//div[@id=\"acc2_ileinner\"]")).getText();

			ActRes = "Lead is converted into an account ";
			// ActRes=driver.getTitle();
			ExpRes = "Lead should be converted to an Account";
			ImageName = "convertedLead";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (ActRes.contains("Lead")) {
				LeadCreationResult = "Pass";
				Status = "Pass";
				ExportResults
				.exportTestResult("Lead Conversion," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead COnversion," + ExpRes + "," + ActRes + "," + Status);
			} else {
				Status = "Fail";
				Jiracounter = "Failed";
				LeadCreationResult = "Fail";
				ExportResults.exportTestResult("Lead Conversion," + ExpRes + ","
						+ "Application Slowness - Object not found in Lead Conversion" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead COnversion" + "Application Slowness - Object not found in Lead Conversion" + ","
						+ ActRes + "," + Status);
				return LeadCreationResult;
			}

			// Edit Account
			Thread.sleep(6000);
			//driver.navigate().refresh();
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(6000);
			AccURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Account URL : "+ AccURL);			
			editAccount("Health Clinics");
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);
			//AccURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Clicking the opportunity link, to edit it");
			LOGS.info(Thread.currentThread() +"waiting for the link to be enabled");
			driver.findElement(By.xpath("(//span[contains(text(),'Opportunities')])[1]")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);

			driver.findElement(By.xpath("//input[@value='New Opportunity']")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);
			createOpportunity("SingleOpportunity");

		} catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			searchAccountResult = "Fail";
			ExportResults.exportTestResult("Search Account :," + "Account Search should be successful" + ","
					+ "Application Slowness - Object not found in Searching Account" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Search Account :," + "Account Search should be successful" + ","
					+ "Application Slowness - Object not found in Searching Account" + "," + Status);

		}
		return LeadCreationResult;
	
	}
	
	
	public  String LeadConvert() throws Exception {
		String businessPhone = "";
		FileInputStream fis = new FileInputStream(regardingfilesPath+"InputFiles/LeadDetails.properties");
		Properties lead = new Properties();
		lead.load(fis);
		
		try {
			
			AccURL = "";
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			LOGS.info(Thread.currentThread() +"Executing Lead Convert method");
			
		/*driver.findElement(By.cssSelector("#Account_Tab>a")).click();
			LOGS.info(Thread.currentThread() + "," +"Navigated to Accounts page");*/
			
			int randomPhoneExtn = 3000000 + new Random().nextInt(90000);
			businessPhone = lead.getProperty("LeadPhone") + Integer.toString(randomPhoneExtn);
			//businessPhone = "8045621563";
			LOGS.info(Thread.currentThread() + "," +"Phone number :" + businessPhone);

			LOGS.info(Thread.currentThread() + "," +"fetch the Phone Number for input sheet");
			/*wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='phSearchInput']")));
			driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessPhone);

			LOGS.info(Thread.currentThread() + "," +"Searching the Phone Number to check the duplicate Accounts");
			LOGS.info(Thread.currentThread() + "," +"click ph no");
			
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='phSearchButton']")));
			//input[@id='phSearchInput']
			
			driver.findElement(By.xpath("//*[@id='phSearchButton']")).click();*/
			
			

			
			
	
			
			
			////////////////////
			
			/*try {

				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				//Boolean dupeNoBoolean =	new WebDriverWait(driver, 20).until(ExpectedConditions.invisibilityOfElementWithText(By.xpath("//img[@alt='Warning']//following::td/div"), "No matches found"));
			if (driver.findElement(By.xpath("//img[@alt='Warning']//following::td/div")).getText()
					.equalsIgnoreCase("No matches found")) {
				LOGS.info(Thread.currentThread() + "," +"No Dupe account is found");
			   } 
			}catch(Exception e) {
				LOGS.info(Thread.currentThread() + "," +" Dupe account is found");
				LOGS.error("Error : "+Thread.currentThread() +";"+ e);
				//td//h3//span[contains(text(),'Accounts ')]
				String dupeCount = driver.findElement(By.xpath("//td//h3//span[contains(text(),'Accounts ')]")).getText();
				dupeCount = dupeCount.replace("Accounts (",""); //Accounts (1) 
				dupeCount = dupeCount.replace(") Show Filters","");
				int DupeCount=Integer.parseInt(dupeCount); 
				LOGS.info(Thread.currentThread() +"Dupe Accounts count: "+DupeCount);
				do {
					LOGS.info(Thread.currentThread() + "," +"checking if the Phone Number already in the DB");
					driver.findElement(By.cssSelector("#Account_Tab>a")).click();
					LOGS.info(Thread.currentThread() + "," +"Navigated to Accounts page");
					randomPhoneExtn = 3000000 + new Random().nextInt(90000);
					businessPhone = lead.getProperty("LeadPhone") + Integer.toString(randomPhoneExtn);
					LOGS.info(Thread.currentThread() + "," +"Phone number :" + businessPhone);
					LOGS.info(Thread.currentThread() + "," +"fetch the Phone Number for input sheet");
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessPhone);
					LOGS.info(Thread.currentThread() + "," +"Searching the Phone Number to check the duplicate Accounts");
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).click();
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() + "," +"click ph no");
					driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
					ImageName = "PhoneSearch";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					try {
						ActRes = "PhoneSearch";
						ExpRes = "PhoneNumberSearch";
						ImageName = "SuccessfulSearch";
						Status = "PhSearch";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExportResults.exportTestResult("Linux server," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
						if (driver.findElement(By.xpath("//img[@alt='Warning']//following::td/div")).getText()
							.equalsIgnoreCase("No matches found")) {
						LOGS.info(Thread.currentThread() + "," +"No Dupe account is found");
						DupeCount=0;
					   }
					} catch(Exception exp) {
						
						dupeCount = driver.findElement(By.xpath("//td//h3//span[contains(text(),'Accounts ')]")).getText();
						dupeCount = dupeCount.replace("Accounts (",""); //Accounts (1) 
						dupeCount = dupeCount.replace(") Show Filters","");
						DupeCount=Integer.parseInt(dupeCount); 
					}
					
				}while(DupeCount>=1);
			}
				*/
			
			
			Thread.sleep(3000); //5 seconds wait time
			wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#Lead_Tab>a")));
			
			driver.findElement(By.cssSelector("#Lead_Tab>a")).click();
			Thread.sleep(3000); // 5 seconds wait time
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='hotlist']/table/tbody/tr/td[2]/input")));
			driver.findElement(By.xpath("//*[@id='hotlist']/table/tbody/tr/td[2]/input")).click();
			LOGS.info(Thread.currentThread() +"Clicked on new Button");
			Thread.sleep(3000); //5 seconds wait time
			if (SalesRepType.equalsIgnoreCase("SPE")) {

				driver.findElement(By.xpath("//input[@value='Continue']")).click();
				LOGS.info(Thread.currentThread() +"Clicked on continue button ");

			}
			// driver.findElement(By.xpath("//*[@id='bottomButtonRow']/input[1]")).click();
			String RandomExtension = new SimpleDateFormat("MMddHHmmss").format(new Date());
			BusinessNAME = lead.getProperty("LeadName")+ "_" + RandomExtension;
			
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//label[text()='Company Name']//parent::td//following-sibling::td[1]//input")));
			
			driver.findElement(By.xpath("//label[text()='Company Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(BusinessNAME);
			
			LOGS.info(Thread.currentThread() +"Account Name is entered");
			
			Select dropdown = new Select(driver.findElement(
					By.xpath("//label[text()='Salutation']//parent::td//following-sibling::td[1]//Select")));
			
			dropdown.selectByVisibleText("Ms.");
			
			
			LOGS.info(Thread.currentThread() +"Salutation is updated");
			driver.findElement(By.xpath("//label[text()='First Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("FName"));
			LOGS.info(Thread.currentThread() +"First Name is entered");

			if (!(SalesRepType.equalsIgnoreCase("CSRep") || SalesRepType.equalsIgnoreCase("DSCRep"))) {

				Select dropdownLeadSource = new Select(driver.findElement(
						By.xpath("//label[text()='Lead Source']//parent::td//following-sibling::td[1]//Select")));
				dropdownLeadSource.selectByVisibleText("Customer Referral");
				LOGS.info(Thread.currentThread() +"Lead Source is selected");
			}

			driver.findElement(By.xpath("//label[text()='Last Name']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("LName"));
			LOGS.info(Thread.currentThread() +"Last Name entered");
			String timeStamp = new SimpleDateFormat("MMddHHmmss").format(new Date());
			String eMail = "qa" + timeStamp + "@qatesting.com";
		//  String eMail = "accountsemaone@qatesting.com";
			driver.findElement(By.xpath("//label[text()='Contact Email']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(eMail);
			driver.findElement(By.xpath("//label[text()='Company Email']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(eMail);
			driver.findElement(By.xpath("//label[text()='Company Phone']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(businessPhone);
			LOGS.info(Thread.currentThread() +"Phone NUmber is entered");
			driver.findElement(By.xpath("//label[text()='Street']//parent::td//following-sibling::td[1]//textarea"))
			.sendKeys("# " + RandomExtension + " " + lead.getProperty("LeadStreet"));
			LOGS.info(Thread.currentThread() +"Address is entered");
			driver.findElement(By.xpath("//label[text()='City']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("LeadCity"));
			LOGS.info(Thread.currentThread() +"City Name entered");
			Select dropdownState = new Select(driver.findElement(
					By.xpath("//label[text()='State/Province']//parent::td//following-sibling::td[1]//Select")));
			dropdownState.selectByVisibleText(lead.getProperty("LeadState"));
			LeadState = lead.getProperty("LeadState");
			LOGS.info(Thread.currentThread() +"State is entered is: "+LeadState);
			driver.findElement(
					By.xpath("//label[text()='Zip/Postal Code']//parent::td//following-sibling::td[1]//input"))
			.sendKeys(lead.getProperty("LeadZip"));
			LOGS.info(Thread.currentThread() +"Zipcode entered");
			JavascriptExecutor jse = (JavascriptExecutor) driver;
			jse.executeScript("window.scrollBy(0,-550)", "");
			driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']")).click();
			Thread.sleep(6000);
			FileOutputStream outfs = new FileOutputStream(
					regardingfilesPath + "//InputFiles//RowNumber.properties");
			LOGS.info(Thread.currentThread() +"Lead is successfully Created");

			ActRes = driver.getCurrentUrl();
			ExpRes = "URL should have full01";
			ImageName = "SuccessfulLead";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (ActRes.contains("full01")) {
				Status = "Pass";
				LeadCreationResult = "Pass";
				ExportResults
				.exportTestResult("Lead Creation Page," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead Creation Page," + ExpRes + "," + ActRes + "," + Status);
			} else {
				Status = "Fail";
				Jiracounter = "Failed";
				LeadCreationResult = "Fail";
				ExportResults
				.exportTestResult("Lead Creation Page," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead Creation Page," + ExpRes + "," + ActRes + "," + Status);
				return LeadCreationResult;

			}

			LOGS.info(Thread.currentThread() +"Lead Creation is successful");
			driver.findElement(By.xpath("//input[@name='convert_lead']")).click();
			
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20)); //40 seconds wait
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely : Duration");
				//driver.manage().timeouts().implicitlyWait(9, TimeUnit.SECONDS);
				/*driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				
			WebDriverWait wait1 = new WebDriverWait(driver, 30);
			wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));*/
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			
			//Thread.sleep(7000);
			LOGS.info(Thread.currentThread() +"Lead Convert is clicked");
			wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id(
					"j_id0:theForm:pageBlock:leadComp:j_id34:pblockconvertLead:convertLeadAccountBlockSectionItem:accountList")));
			
			Select dropdownAccount = new Select(driver.findElement(By.id(
					"j_id0:theForm:pageBlock:leadComp:j_id34:pblockconvertLead:convertLeadAccountBlockSectionItem:accountList")));
			
			
			
			int accountdropdownsize = dropdownAccount.getOptions().size();
			LOGS.info(Thread.currentThread() +"Size :" + accountdropdownsize);
			for (int i = 0; i < accountdropdownsize; i++) {
				LOGS.info(Thread.currentThread() +"Value :" + dropdownAccount.getOptions().get(i));
			}
			if (dropdownAccount.getOptions().size() > 1) {
				dropdownAccount.selectByIndex(1);
				LOGS.info(Thread.currentThread() +"Account select while converting");
			} else {
				dropdownAccount.selectByIndex(0);
				LOGS.info(Thread.currentThread() +"Account select while converting");
			}
			// Convert into Account
			Thread.sleep(3000); //5 seconds wait time
			driver.findElement(By.xpath("//input[@class='btn convertbtn' and contains(@name,'bottom')]")).click();
			LOGS.info(Thread.currentThread() +"Converted into Account");
			//Thread.sleep(5000);
			//String CompName =driver.findElement(By.xpath("//div[@id=\"acc2_ileinner\"]")).getText();

			ActRes = "Lead is converted into an account ";
			// ActRes=driver.getTitle();
			ExpRes = "Lead should be converted to an Account";
			ImageName = "convertedLead";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (ActRes.contains("Lead")) {
				LeadCreationResult = "Pass";
				Status = "Pass";
				ExportResults
				.exportTestResult("Lead Conversion," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead COnversion," + ExpRes + "," + ActRes + "," + Status);
			} else {
				Status = "Fail";
				Jiracounter = "Failed";
				LeadCreationResult = "Fail";
				ExportResults.exportTestResult("Lead Conversion," + ExpRes + ","
						+ "Application Slowness - Object not found in Lead Conversion" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Lead COnversion" + "Application Slowness - Object not found in Lead Conversion" + ","
						+ ActRes + "," + Status);
				return LeadCreationResult;
			}

			// Edit Account
			//Thread.sleep(6000);
			//driver.navigate().refresh();

			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			//Thread.sleep(6000);
			
			String editAccountResult = editAccount("Health Clinics");
			if(editAccountResult.trim().equalsIgnoreCase("Fail")) {
				ImageName = "EditAccountException";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Fail";
				ExceptionMsg= "Exception Happened In the Process of editing the Account Information.";
				LeadCreationResult = "edit";
				driver.quit();
				return LeadCreationResult;
				
			}
			
            LOGS.info(Thread.currentThread() +"Product Name before Estimating the LR Budget: "+currentPlan);
            
            if( currentPlan.trim().contains("a la carte") || currentPlan.trim().equalsIgnoreCase("Reviews")
            		|| currentPlan.trim().contains("Guaranteed") || currentPlan.trim().contains("Listings")
            		|| LRSelection.trim().equalsIgnoreCase("WithoutLRBudgetEstimate")) {
            	
            	LOGS.info(Thread.currentThread() +"Selected Plan should go Without LR Budget Estimation. Plan name: "+currentPlan);
            }
            else {
            	
		String lrResult=LRBudgetTool();
			if(lrResult.equalsIgnoreCase("fail"))
			{
				count = count+1;
				
			}
			}
			if(count==0) {
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);
			//Thread.sleep(2000);
			String accountURL = driver.getCurrentUrl();
			
			 String[] AccURLarray = accountURL.split("/e");
			 AccURL = AccURLarray[0].toString();
			//AccURL = driver.getCurrentUrl();

			 try {
			LOGS.info(Thread.currentThread() + "," +"Account page url:" +AccURL);

			LOGS.info(Thread.currentThread() + "," +"Clicking the opportunity link, to edit it");
			LOGS.info(Thread.currentThread() + "," +"waiting for the link to be enabled");
			
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[contains(text(),'Opportunities')]/span")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[contains(text(),'Opportunities')]/span"))).click();
			
				
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			LOGS.info(Thread.currentThread() + "," + ": Printing the no of handles after clicking on opportunity link : "+newWindowHandle.size());
			if(newWindowHandle.size() > 1) {
			driver.switchTo().window(newWindowHandle.get(1));
			driver.close();
			}
			driver.switchTo().window(newWindowHandle.get(0));
			
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//td[text()='New']//parent::tr//th/a")));

            driver.findElement(By.xpath("//td[text()='New']//parent::tr//th/a")).click();   
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS); 
			driver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);
			opptyURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Opportunity URL is: " + opptyURL);
			}catch(Exception e)
			{
				ExceptionMsg = "Exception happened in opportunity page";
				ImageName="OpportunityException";
				ImgName= ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LeadCreationResult="opportunity";
				LOGS.info("Exception happened in opportunity page");
				return LeadCreationResult;
			}
				try {
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']")));
            WebElement placeOrder = driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']"));
           // WebElement placeOrder =   wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']")));
            driver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS);
            JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
            jseSubmitBTN.executeScript("arguments[0].click()", placeOrder); 
				}catch(Exception e)
				{
					ExceptionMsg = "Exception happened in placing order";
					ImageName="PlacingOrderException";
					ImgName= ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					LeadCreationResult="order";
					LOGS.info("Exception happened in placing order");
					return LeadCreationResult;
				}
			
/*			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);
			AccURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Clicking the opportunity link, to edit it");
			LOGS.info(Thread.currentThread() +"waiting for the link to be enabled");
			driver.findElement(By.xpath("(//span[contains(text(),'Opportunities')])[1]")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);

			driver.findElement(By.xpath("//input[@value='New Opportunity']")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(2000);
			createOpportunity("SingleOpportunity");*/

			}
		} catch (Exception e) {
			ImageName = "LeadConverCatch";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.error("Error : "+Thread.currentThread() +";"+ e);
			ExceptionMsg = "Exception Happened In Lead Page";
			LOGS.info(Thread.currentThread() + "," +"Exception Happened In Lead Page - " + e.getMessage());
		
			Status = "Fail";
			Jiracounter = "Exception";
			searchAccountResult = "Fail";
			LeadCreationResult = "Fail";
			ExportResults.exportTestResult("Search Account :," + "Account Search should be successful" + ","
					+ "Application Slowness - Object not found in Searching Account" + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Search Account :," + "Account Search should be successful" + ","
					+ "Application Slowness - Object not found in Searching Account" + "," + Status);
			return LeadCreationResult;
		}
		if(count!=0)
		{
			return "lr";
		}
		return LeadCreationResult;
	}
	
	public  String LRBudgetTool() throws Exception {

		try {
		driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
		//Thread.sleep(2000);
		AccURL = driver.getCurrentUrl();
		
		//WebDriverWait wait1 = new WebDriverWait(driver,1);
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		Wait<WebDriver> wait1 = new FluentWait<WebDriver>(driver)							
				.withTimeout(Duration.ofSeconds(8)) 			
				.pollingEvery(Duration.ofSeconds(2)) 			
				.ignoring(Exception.class);
		
		/* wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//h3[contains(text(),'Local Ranking')]")));
		
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement Element = driver.findElement(By.xpath("//h3[contains(text(),'Local Ranking')]"));
		LOGS.info(Thread.currentThread() +"Found");
		
		//Finding the Frames Count 
		List<WebElement> f = driver.findElements(By.tagName("iframe"));
	      LOGS.info(Thread.currentThread() +"Total number of Frames in a window: " + f.size());
	      
	    //Javascript executor script to get the window length
	      JavascriptExecutor exe = (JavascriptExecutor) driver;
	      int framecount = Integer.parseInt(exe.executeScript("return window.length").toString());
	      LOGS.info(Thread.currentThread() +"No. of iframes on the page are " + framecount);
		
		
	      
		js.executeScript("arguments[0].scrollIntoView();", Element);
		driver.findElement(By.xpath("//h3[contains(text(),'Local Ranking')]")).click();
		LOGS.info(Thread.currentThread() +"Clicking on Manged Budget Tool link");
		
		driver.switchTo().frame("0660S000000mGQR");
		 //driver.switchTo().frame(7);
	        LOGS.info(Thread.currentThread() +"At frame 7..");
	        LOGS.info(Thread.currentThread() +"jjjjjjjj");
	        
	        ActRes = "Managed Budgets Tool link should be visible";
			// ActRes=driver.getTitle();
			ExpRes = "Managed Budgets Tool link should be visible";
			ImageName = "ManagedBudgetLink";
			Status="Pass";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults
			.exportTestResult("Lead Conversion," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
	 
	        LOGS.info(Thread.currentThread() +"Clicking on Manged Budget Tool link");
	        //Thread.sleep(5000);
	        
	        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//html/body/div[1]/lightning-formatted-url/a")));
	        
	        WebElement BudgetsTool = driver.findElement(By.xpath("//html/body/div[1]/lightning-formatted-url/a"));
	       
	        JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
	        jseSubmitBTN.executeScript("arguments[0].click()", BudgetsTool);
	       // Thread.sleep(5000);	
	        ImageName = "AfterClickingManagedBudgetLink";
	        ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);*/
		
		
		
		//driver.findElement(By.linkText("Manage Budgets")).click();
		/*Thread.sleep(5000);
		WebElement BudgetsTool = driver.findElement(By.xpath("//html/body/div[1]/lightning-formatted-url/a"));
		JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
		jseSubmitBTN.executeScript("arguments[0].click()", BudgetsTool);*/
		
		//driver.findElement(By.linkText("Manage Budgets")).click();
		//driver.findElement(By.xpath("//html/body/div[1]/lightning-formatted-url/a")).click();
	        
	      //td/h2[text()='Account Detail']//ancestor::tr//td[@id='topButtonRow']//input[@name='local_ranking']
		try {
			LOGS.info("In Try Block..Waiting for Page to load Completely");
			driver.manage().timeouts().implicitlyWait(12, TimeUnit.SECONDS);
		WebDriverWait wait2 = new WebDriverWait(driver, 15);
		wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
	
	}catch(Exception ex) {
		LOGS.info("Wait is over and the Pocess continues.");
		}wait.until(ExpectedConditions.
	        		elementToBeClickable(By.xpath("//td/h2[text()='Account Detail']//ancestor::tr//td[@id='topButtonRow']//input[@name='local_ranking']")));
	        driver.findElement
	        (By.xpath("//td/h2[text()='Account Detail']//ancestor::tr//td[@id='topButtonRow']//input[@name='local_ranking']")).click();
	        
	        ImageName = "AfterClickingLocalRankButtonTool";
	        ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
	        LOGS.info(Thread.currentThread() +"Waiting for budget tool page to get open");
		driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
		
		//Thread.sleep(5000);	
		String BudgetTool = "True";
		if(BudgetTool.contains("True")){
			
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			LOGS.info(Thread.currentThread() +"No of Windows Opened: "+newWindowHandle.size());
			
			driver.switchTo().window(newWindowHandle.get(1));
			try {
				driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			
			//Thread.sleep(15000);
			LOGS.info(Thread.currentThread() +"Current Url is: "+driver.getCurrentUrl());
			LOGS.info(Thread.currentThread() +"Current Tab Title is: "+driver.getTitle());
			
			 ActRes = "Managed Budgets Tool Should be opened";
				// ActRes=driver.getTitle();
				ExpRes = "Managed Budgets Tool Should be opened";
				ImageName = "ManagedBudgetTool";
				Status="Pass";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults
				.exportTestResult("Lead Conversion," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			String TabSelected = driver.getTitle();
			LOGS.info(Thread.currentThread() +"BudgetTool Screen Opened: " + TabSelected);
			//Thread.sleep(2000);
			driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
/*			driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//Button[contains(text(),'Advanced')]")).click();
			
			driver.findElement(By.xpath("//a[contains(text(),'Proceed to samiuat.hibu.int (unsafe)')]")).click();
			Thread.sleep(6000);
			driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
			Thread.sleep(6000)*/;
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			driver.manage().timeouts().implicitlyWait(12, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(text(),'NEXT')]")));
			driver.findElement(By.xpath("//button[contains(text(),'NEXT')]")).click();
			//Thread.sleep(6000);
			//driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
			try {
				driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			LOGS.info(Thread.currentThread() +"Selecting Categories");
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='typeahead-template']")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='typeahead-template']")));
			
			WebElement Category = driver.findElement(By.xpath("//input[@id='typeahead-template']"));
			Category.sendKeys("Flower");
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='chk-0']")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-0']")));
			
			ImageName = "SelectingCategories";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-1']")));
			driver.findElement(By.xpath("//input[@id='chk-1']")).click();
			//Thread.sleep(3000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-2']")));
			driver.findElement(By.xpath("//input[@id='chk-2']")).click();
			//Thread.sleep(3000);
			/*wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-3']")));
			driver.findElement(By.xpath("//input[@id='chk-3']")).click();*/
			//Thread.sleep(3000);
			//driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			LOGS.info(Thread.currentThread() +"Selected Categories");
			
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[contains(text(),'NEXT')]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(text(),'NEXT')]")));
			
			
			driver.findElement(By.xpath("//button[contains(text(),'NEXT')]")).click();
			//driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
			//Thread.sleep(6000);
			try {
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='chk-0']")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-0']")));
			
			
			
			LOGS.info(Thread.currentThread() +"Selecting Services");
			ImageName = "SelectingServices";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			//Thread.sleep(3000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-1']")));
			driver.findElement(By.xpath("//input[@id='chk-1']")).click();
			//Thread.sleep(3000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-2']")));
			driver.findElement(By.xpath("//input[@id='chk-2']")).click();
			//Thread.sleep(3000);
			/*driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			Thread.sleep(3000);
			driver.findElement(By.xpath("//input[@id='chk-0']")).click();*/
			LOGS.info(Thread.currentThread() +"Selected Services");
			//Thread.sleep(3000);
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 15);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[contains(text(),'NEXT')]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(text(),'NEXT')]")));
			
			Thread.sleep(3000);
			driver.findElement(By.xpath("//button[contains(text(),'NEXT')]")).click();
			//Thread.sleep(6000);
			//driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
			LOGS.info(Thread.currentThread() +"Selecting Target Areas");
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='typeahead-template']")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='typeahead-template']")));
			
			try {
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			
			ImageName = "SelectingTargetAreas";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		
			WebElement TargetAreas = driver.findElement(By.xpath("//input[@id='typeahead-template']"));
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(19, TimeUnit.SECONDS);
			TargetAreas.sendKeys("hi");
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='chk-0']")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-0']")));
			
			
			driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			//Thread.sleep(3000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-1']")));
			driver.findElement(By.xpath("//input[@id='chk-1']")).click();
			//Thread.sleep(3000);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='chk-2']")));
			driver.findElement(By.xpath("//input[@id='chk-2']")).click();
			//Thread.sleep(3000);
			/*driver.findElement(By.xpath("//input[@id='chk-0']")).click();
			Thread.sleep(3000);
			driver.findElement(By.xpath("//input[@id='chk-0']")).click();*/
			//Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Selected Target Areas");
			//Thread.sleep(3000);
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[contains(text(),'NEXT')]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(text(),'NEXT')]")));
			
			Thread.sleep(3000);
			driver.findElement(By.xpath("//button[contains(text(),'NEXT')]")).click();
			
			LOGS.info(Thread.currentThread() +"Selecting Keywords");
			//Thread.sleep(6000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//table[@class='table table-borderless sort-table']//tr[1]/td[1]/input")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//table[@class='table table-borderless sort-table']//tr[1]/td[1]/input")));
			
			try {
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			
			ImageName = "SelectingKeywords";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//table[@class='table table-borderless sort-table']//tr[1]/td[1]/input")).click();
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//table[@class='table table-borderless sort-table']//tr[2]/td[1]/input")));

			driver.findElement(By.xpath("//table[@class='table table-borderless sort-table']//tr[2]/td[1]/input")).click();
			//Thread.sleep(6000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//table[@class='table table-borderless sort-table']//tr[3]/td[1]/input")));

			driver.findElement(By.xpath("//table[@class='table table-borderless sort-table']//tr[3]/td[1]/input")).click();
			//Thread.sleep(6000);
		
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//table[@class='table table-borderless sort-table']//tr[4]/td[1]/input")));

			driver.findElement(By.xpath("//table[@class='table table-borderless sort-table']//tr[4]/td[1]/input")).click();
			
			
			//driver.findElement(By.xpath("//div[2]//table//tr[4]/td[1]/input")).click();
			//Thread.sleep(6000);
			/*driver.manage().timeouts().pageLoadTimeout(80, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//div[2]//table//tr[7]/td[1]/input")).click();
			Thread.sleep(6000);
			driver.manage().timeouts().pageLoadTimeout(80, TimeUnit.SECONDS);
			driver.findElement(By.xpath("//div[2]//table//tr[9]/td[1]/input")).click();*/
			//Thread.sleep(6000);
			
			LOGS.info(Thread.currentThread() +"Selected Keywords");
			
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(7, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[contains(text(),'NEXT')]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(text(),'NEXT')]")));
			
			ImageName = "SelectedKeywords";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			driver.findElement(By.xpath("//button[contains(text(),'NEXT')]")).click();
			
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(7, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			
			//Thread.sleep(6000);
			driver.manage().timeouts().implicitlyWait(18, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//app-summary//div[2][@class='summary-budget']")));
			
			
			String BudgetAmount = driver.findElement(By.xpath("//app-summary//div[2][@class='summary-budget']")).getText();
			//Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Budget Amount on Tool" +BudgetAmount);
			BdgetAmount = BudgetAmount;
			WebElement BudgetName = driver.findElement(By.xpath("//input[@id='inputDescription']"));
			//Thread.sleep(3000);
			BudgetName.sendKeys("LR_Budget");
			//Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button/span[contains(text(),'SAVE BUDGET')]")));
			driver.findElement(By.xpath("//button/span[contains(text(),'SAVE BUDGET')]")).click();
			
			try {
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				LOGS.info("Waiting for Page to load Completely");
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			ImageName = "BudgetSaved";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			//Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Saving Budget");
			//Thread.sleep(3000);
			driver.close();	
			driver.switchTo().window(newWindowHandle.get(0));
			//Thread.sleep(3000);
			driver.navigate().refresh();
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(7, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}
			
			driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
			LOGS.info(Thread.currentThread() +"Page Refreshed");
		}
	}
		catch(Exception e) {
			driver.quit();
			return "fail";
		}
		return BdgetAmount;
			
	}

	/*public String CreateClosedOppty(String Iteration) throws Exception {

		try {
			if (!(Iteration.equalsIgnoreCase("Iteration2"))
					|| !(Iteration.equalsIgnoreCase("MultipleOpportunities "))) {
				try {

					Select dropdownDigital = new Select(driver
							.findElement(By.xpath("//div[@class='OppTypeSelect']//child::table//child::td[2]/select")));

					if ((SelectOpptType.equalsIgnoreCase("Print")))
						dropdownDigital.selectByVisibleText("Print");
					else
						dropdownDigital.selectByVisibleText("Digital");

					driver.findElement(By.xpath("//a[contains(text(),'Proceed')]")).click();
					LOGS.info(Thread.currentThread() +"Clicked on Proceed button");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Opportunity type  dropdown not  displayed");

				}
			}
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			Thread.sleep(4000);

			// Click on Opportunity
			driver.findElement(
					By.xpath("//label[text()='Opportunity Name']/parent::td//following-sibling::td[1]/div/input"))
			.sendKeys("Opportunity New");
			LOGS.info(Thread.currentThread() +"Opportunity name Entered");
			Select dropdownStage = new Select(driver.findElement(
					By.xpath("//label[text()='Stage']/parent::td//following-sibling::td[1]/descendant::select")));

			dropdownStage.selectByVisibleText("Closed Won");

			LOGS.info(Thread.currentThread() +"Clicking on Save Button");
			driver.findElement(By.xpath("//*[@id='topButtonRow']/input[1]")).click();

			LOGS.info(Thread.currentThread() +"Opportunity saved btn clicked ");
			Thread.sleep(2000);
			if (driver.findElement(By.xpath("//div[@class='pbError']")).isDisplayed()) {
				LOGS.info(Thread.currentThread() +"captue alert started :");
				String Alert = driver.findElement(By.xpath("//div[@class='pbError']")).getText();
				LOGS.info(Thread.currentThread() +"Alert :" + Alert);
				ActRes = Alert;
				ExpRes = "Alert msg should displayed if we close oppertunity manually";
				ImageName = "Opportunity";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				OpportunitysResults = Status;
				ExportResults.exportTestResult("validate error message is displayed  :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);

			} else {
				LOGS.info(Thread.currentThread() +"captue alert not found :");

			}

			MoveOrCopyFile.copyFunction("C:\\Automation\\OutputFiles\\TestResult.xlsx",
					Resultsfolderpath + "\\TestResult.xlsx");
			String Summary = "DIG-1774 / DIG-2657_TC03 : Validate ManualClosure Of The NewOpp By The CPQTsalesRep";
			String Description = "Validatation  ManualClosure Of The New Opportunity  By The CPQTsalesRep is done";
			TestCaseNum = ZephyrTestCase.createZephyrTestCase(Summary, Description);
			testResults = "Business Id : ";
			System.out.println("Zephyr Card No = " + TestCaseNum);

			driver.close();
			System.exit(0);

		} catch (Exception e) {
			
			String Alert = driver.findElement(By.xpath("//div[@class='pbError']")).getText();
			LOGS.info(Thread.currentThread() +"Alert :" + Alert);
			ActRes = Alert;
			ExpRes = "Alert msg should displayed if we close oppertunity manually";
			ImageName = "Opportunity";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			OpportunitysResults = Status;
			ExportResults.exportTestResult(
					"validate error message is displayed  :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return OpportunitysResults;

	}
*/
	public  String createOpportunity(String Iteration) throws Exception {
		LOGS.info(Thread.currentThread() +"Executing the createOpportunity method");

		try {
			if (!(Iteration.equalsIgnoreCase("Iteration2"))
					|| !(Iteration.equalsIgnoreCase("MultipleOpportunities "))) {
				try {

					Select dropdownDigital = new Select(driver
							.findElement(By.xpath("//div[@class='OppTypeSelect']//child::table//child::td[2]/select")));

					if ((SelectOpptType.equalsIgnoreCase("Print")))
						dropdownDigital.selectByVisibleText("Print");
					else
						dropdownDigital.selectByVisibleText("Digital");

					driver.findElement(By.xpath("//a[contains(text(),'Proceed')]")).click();
					LOGS.info(Thread.currentThread() +"Clicked on Proceed button");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Opportunity type  dropdown not  displayed");

				}
			}
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);

			// Click on Opportunity
			driver.findElement(
					By.xpath("//label[text()='Opportunity Name']/parent::td//following-sibling::td[1]/div/input"))
			.sendKeys("Opportunity New");
			LOGS.info(Thread.currentThread() +"Opportunity name Entered");
			Select dropdownStage = new Select(driver.findElement(
					By.xpath("//label[text()='Stage']/parent::td//following-sibling::td[1]/descendant::select")));
			if (OpportunityStage.equalsIgnoreCase("Closed Won")) {

				dropdownStage.selectByVisibleText("Closed Won");

				LOGS.info(Thread.currentThread() +"Clicking on Save Button");
				driver.findElement(By.xpath("//*[@id='topButtonRow']/input[1]")).click();

				LOGS.info(Thread.currentThread() +"Opportunity saved btn clicked ");
				Thread.sleep(2000);
				if (driver.findElement(By.xpath("//div[@class='pbError']")).isDisplayed()) {
					LOGS.info(Thread.currentThread() +"captue alert started :");
					String Alert = driver.findElement(By.xpath("//div[@class='pbError']")).getText();
					LOGS.info(Thread.currentThread() +"Alert :" + Alert);
					ActRes = Alert;
					ExpRes = "Alert msg should displayed if we close oppertunity manually";
					ImageName = "Opportunity";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					OpportunitysResults = Status;
					ExportResults.exportTestResult("validate error message is displayed  :," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

					// driver.close();
					// LOGS.info(Thread.currentThread() +"Driver closed");

				} else {
					LOGS.info(Thread.currentThread() +"captue alert not found :");

				}

			} else {
				dropdownStage.selectByVisibleText("New");
			}
			// String OpptyOwner =
			// driver.findElement(By.xpath("//label[contains(text(),'Opportunity
			// Owner')]/parent::td//following-sibling::td")).getText();
			String OpptyOwner = driver.findElement(By.xpath("//div[@id='ep']/div[2]/div[3]/table/tbody/tr[1]/td[4]"))
					.getText();
			LOGS.info(Thread.currentThread() +"OpptyOwner :" + OpptyOwner);
			if (SalesRepType.equalsIgnoreCase("SPE")) {
				try {
					Select dropdownSubType = new Select(driver.findElement(By.xpath(
							"//label[contains(text(),'Subtype')]//parent::td//following-sibling::td[1]/descendant::select")));
					dropdownSubType.selectByVisibleText("New");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"sub type is not there for:" + OpptyOwner);
				}
			}
			LOGS.info(Thread.currentThread() +"Opportunity Owner Name: " + OpptyOwner);

			LOGS.info(Thread.currentThread() +"Clicking on Save Button");
			driver.findElement(By.xpath("//*[@id='topButtonRow']/input[1]")).click();
			LOGS.info(Thread.currentThread() +"Opportunity saved successfully :"
					+ driver.findElement(By.xpath("//h2[@class='pageDescription']")).getText());
			opptyURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Opportunity URL is: " + opptyURL);
			ActRes = "Opportunity Created :" + driver.findElement(By.xpath("//h2[@class='pageDescription']")).getText();
			ExpRes = "Opportunity Created :";
			ImageName = "Opportunity";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (ExpRes.equalsIgnoreCase(ActRes)) {
				Status = "Fail";
				Jiracounter = "Failed";
				searchAccountResult = "Fail";
				ExportResults.exportTestResult(
						"Opportunity Creation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Opportunity Creation :," + ExpRes + "," + ActRes + "," + Status);
				return searchAccountResult;
			} else {
				Status = "Pass";
				searchAccountResult = "Pass";
				ExportResults.exportTestResult(
						"Opportunity Creation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Opportunity Creation :," + ExpRes + "," + ActRes + "," + Status);
			}

			if (NewQBtnOppPageValidation.equalsIgnoreCase("True")) {
				try {
					LOGS.info(Thread.currentThread() +"Verifyig New Quote button does not exist on Opportunity page");
					List<WebElement> NQBtnValid = driver.findElements(By.xpath(
							"//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/child::*"));
					LOGS.info(Thread.currentThread() +"Checking if there are any child elements");
					int Csize = NQBtnValid.size();
					LOGS.info(Thread.currentThread() +"List size: " + Csize);
					ExpRes = "New Quote Button should not appear on Opp page";
					WebElement element = SLocator("NewQuote");
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
					Thread.sleep(3000);
					ImageName = "NewQuoteBtn";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Csize == 0) {
						LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exist");
						ActRes = "New Quote button does not appear on Opp page";
						Status = "Pass";
						ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + ","
								+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}
					if (Csize > 0) {
						LOGS.info(Thread.currentThread() +"Checking if the New quote button exists");
						Iterator<WebElement> itr = NQBtnValid.iterator();
						while (itr.hasNext()) {
							String BtnTitle = driver.findElement(By.xpath(
									"//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/input"))
									.getAttribute("title");
							if (!BtnTitle.equalsIgnoreCase("New Quote")) {
								LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exists");
								ActRes = "New Quote button doesnot exist on Opp page";
								Status = "Pass";
								ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes
										+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
							} else {
								LOGS.info(Thread.currentThread() +"New Quote Button exists");
								ActRes = "New Quote button exists on Opp page";
								Status = "Fail";
								ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes
										+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"New Quote button validation on Opp page failed");
					ActRes = "New Quote button validation failed";
					Status = "Fail";
					ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}

			Oppwindow = driver.getWindowHandle();

			String SFDriver = driver.getWindowHandle();
			LOGS.info(Thread.currentThread() +"Clicking on Place Order");
			driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Place Order']")).click();
			Thread.sleep(2000);

			Set<String> multiple = driver.getWindowHandles();
			LOGS.info(Thread.currentThread() +"List of Handles after wait : " + multiple.size());
			if (multiple.size() > 1) {
				for (String handle : multiple) {

					if (!handle.equals(SFDriver)) {
						LOGS.info(Thread.currentThread() +"Inside the Handle Condition");
						driver.switchTo().window(handle);
						driver.close();
						driver.switchTo().window(SFDriver);
					}
				}
			}

			Thread.sleep(5000);

			WebElement placeOrder = driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']"));
			JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
			jseSubmitBTN.executeScript("arguments[0].click()", placeOrder);

			Thread.sleep(3000);

			if (Cardnum.equalsIgnoreCase("DIG_201_509_TC01")) {

				String userNametitle = driver.findElement(By.xpath("//div[@id='userNav']")).getAttribute("title");

				Properties OR = pr.loadPropertiesFiles("Order");

				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login SaleROGUhsguihszdugs Rep -> " + SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("Premise")) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login SaleROGUhsguihszdugs Rep -> " + SalesRep);
				}
				if (userNametitle.contains(SalesRep)) {

					LOGS.info(Thread.currentThread() +"here i got u-1");
					LOGS.info(Thread.currentThread() +"After clicking on place order User able to land on QLE page");
					ActRes = "Sales rep in the CPQ pilot group was able to add products and Save Quote in SF.";
					ExpRes = "Sales rep in the CPQ pilot group is allowed to add products and Save Quote in SF";
					Status = "Pass";
					ImageName = "Validate lands in quote line editor after Placing Order button.";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Validation displayed message  :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				} else {

					LOGS.info(Thread.currentThread() +"here i got u-2");
					LOGS.info(Thread.currentThread() +"After clicking on place order User able to land on QLE page");
					ActRes = "Sales rep in the CPQ pilot group was unable to add products and Save Quote in SF.";
					ExpRes = "Sales rep in the CPQ pilot group is allowed to add products and Save Quote in SF";
					Status = "Fail";
					ImageName = "Validate lands in quote line editor after Placing Order button.";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Validation displayed message  :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

			}

		} catch (Exception e) {
			Status = "Fail";
			ExportResults.exportTestResult("Opportunity Creation and Place Order Clicking :,"
					+ "Opportunity should be created and Place Order should be clicked" + "," + "Exception Occured"
					+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Some Exception encountered while creating Opportunity");
			e.printStackTrace();
		}
		return OpportunitysResults;
	}

	public  String selectAccountView(String AccountType) {
		LOGS.info(Thread.currentThread() +"Executing the Select Account View");
		String AccResults = "";
		try {
			LOGS.info(Thread.currentThread() +"Selecting the View Based on the Scenario");
			Select Viewdropdown = new Select(driver.findElement(By.xpath("//Select[contains(@id,'fcf')]")));
			if (AccountType.equalsIgnoreCase("Existing")) {
				driver.findElement(By.xpath("//input[@id='phSearchInput']")).click();
				driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
				driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(orderId);
				LOGS.info(Thread.currentThread() +"Order Number Entered in the Account Search Field");
				Thread.sleep(10000);
				driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();

				AccResults = driver.findElement(By.xpath("(//a[@data-seclke='Opportunity'])[3]")).getText();

				driver.findElement(By.xpath("(//a[@data-seclke='Opportunity'])[3]")).click();
				Thread.sleep(2000);
				return AccResults;
			} else {

				if (AccountType.equalsIgnoreCase("Prospect")) {
					if (viewName.equalsIgnoreCase("None"))
						// viewName = "Automation Prospect Accounts non Taxable";
						// viewName = "Automation Prospect State Hawaii Ghost";
						viewName = "Prospect Accounts New";
					// Automation Prospect Accounts TaxableHI
				} else if (AccountType.equalsIgnoreCase("Pending")) {
					if (viewName.equalsIgnoreCase("None"))
						viewName = "Automation_Current_MigratnStatusMigrated";
					// viewName = "AutomationPend_MigrationStatusCPQAccount";
				} else if (AccountType.equalsIgnoreCase("Inactive")) {
					if (viewName.equalsIgnoreCase("None"))
						viewName = "Automation Inactive Accounts non Taxable";
				} else if (AccountType.equalsIgnoreCase("ExistingCPQ")) {
					if (viewName.equalsIgnoreCase("None"))
						// viewName = "Automation Current Accounts non Taxable";
						// viewName = "AutomationCurren_MigratnStatusCPQAccount";
						viewName = "Automation CPQ Current Cust_CPQAcct";

				}

				if (Viewdropdown.getFirstSelectedOption().getText().equalsIgnoreCase(viewName)) {
					LOGS.info(Thread.currentThread() +"View Already Selected" + viewName);
					driver.findElement(By.xpath("//input[@name='go']")).click();
					LOGS.info(Thread.currentThread() +"Go Button CLicked");

				} else {
					Viewdropdown.selectByVisibleText(viewName);
					LOGS.info(Thread.currentThread() +"Expected View :" + viewName + " is selected");
				}
				AccResults = validateDuplicacy("Prospect");
			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Unable to Search Account");
			// e.printStackTrace();
		}
		return AccResults;
	}

	public  String ValidateProduct(String ProductName) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Execution of ValidateProduct method started");
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			driver.switchTo().window(newWindowHandle.get(1));
			String TabSelected = driver.getTitle();
			LOGS.info(Thread.currentThread() +"Tab Selected:" + TabSelected);

			WebDriverWait wait = new WebDriverWait(driver, 10);
			// wait.until(ExpectedConditions.visibilityOf(SLocator("AddProdBtn")));
			LOGS.info(Thread.currentThread() +"Waited 10 Secs for Add Product button to be visible");
			SLocator("AddProdBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Add Products Button");

			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
					SLocatorDynamic("AddProductCBDynamic1_" + ProductName + "_AddProductCBDynamic2"));
			LOGS.info(Thread.currentThread() +"Scrolled down");
			// SLocator("AddWebsiteCB").click();
			// SLocatorDynamic("AddProductCBDynamic1_"+ProductName+"_AddProductCBDynamic2").click();
			LOGS.info(Thread.currentThread() +"verifying productname in list");
			if (SLocatorDynamic("AddProductCBDynamic1_" + ProductName + "_AddProductCBDynamic2").isDisplayed()) {
				LOGS.info(Thread.currentThread() +"ProductName is found in product list");
				ValidateProductResult = "Fail";
				ExpRes = "add product list should not contain " + ProductName;
				ActRes = ProductName + " found";
				Status = "fail";
				ImageName = "Productpage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult(
						"ValidateProduct name," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			} else {
				LOGS.info(Thread.currentThread() +"ProductName is not found in product list");
				ValidateProductResult = "Pass";
				ExpRes = "add product list should not contain " + ProductName;
				ActRes = ProductName + " not found";
				Status = "pass";
				ImageName = "Productpage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult(
						"ValidateProduct name," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"ValidateProduct not processed");
			e.printStackTrace();
		}
		return ValidateProductResult;
	}

	public  String CreateQuote(String[] Prods, String[] Plans) throws Exception {
		try {
             //Thread.sleep(10000);
			LOGS.info(Thread.currentThread() +"Execution of CreateQuote method started");

			
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			try {
				driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
				LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
				WebDriverWait wait1 = new WebDriverWait(driver, 15);
				
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				ImageName = "BeforeClickingAddProduct ";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info("Wait is over and the Pocess continues.");
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			LOGS.info(Thread.currentThread() +"No.of Tabs Opened: " + newWindowHandle.size());
			
			/*if(newWindowHandle.size() > 2) {
				driver.switchTo().window(newWindowHandle.get(1));
				driver.close();
				}
			*/
			driver.switchTo().window(newWindowHandle.get(1));
			String TabSelected = driver.getTitle();
			LOGS.info(Thread.currentThread() +"Tab Selected:" + TabSelected);
			}
			
			
			
			try {
				if (driver.findElement(By.xpath("//input[@type='submit']")).isEnabled()) {
					LOGS.info(Thread.currentThread() + "," +": Contact Help Desk is Enabled.....");
					
					
					wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@type='submit']"))); //Back button in when we click place order first time
					driver.findElement(By.xpath("//input[@type='submit']")).click();
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					wait.until(ExpectedConditions.visibilityOfElementLocated(
							By.xpath("//td[@id='topButtonRow']/input[@name='place_order']")));
					wait.until(ExpectedConditions.elementToBeClickable(
							By.xpath("//td[@id='topButtonRow']/input[@name='place_order']")));
					WebElement placeOrder = driver
							.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']"));
					JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
					jseSubmitBTN.executeScript("arguments[0].click()", placeOrder);
				} 
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() + "We dont have Please contact help desk page");
				
			}
		

			AddingProduct(Prods, Plans);
			
			LOGS.info(Thread.currentThread() + "," +": Adding Product is Completed : ");
			
			/*if (!driver.findElements(By.xpath("//*[@id='mainButton']")).isEmpty()) {

			} else {
*/
				//Thread.sleep(8000);
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
				ExpRes = "Quote should be created";
				ImageName = "Quote Creation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Quote']//following-sibling::h2")));
				QuoteHeader = SLocator("QuoteHdr").getText();
				LOGS.info(Thread.currentThread() +"Quote Header: " + QuoteHeader);
				if (QuoteHeader.contains("Q-")) {
					LOGS.info(Thread.currentThread() +"Verifying if Quote header has quote number");
					QuoteNumber = QuoteHeader;
					ActRes = QuoteNumber + "is created successfully";
					Status = "Pass";
					QuoteStatus = "Draft";
					CreateQuoteResult = "Pass";
					ExportResults.exportTestResult(
							"Quote Creation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					List<WebElement> QuoteLines = driver.findElements(
							By.xpath("//th[text()='Product Name']//parent::tr//following-sibling::tr/td[4]/a"));
					QuoteLineItemNames.clear();
					for (WebElement quotelineItems : QuoteLines) {
						QuoteLineItemNames.add(quotelineItems.getText());
					}
				} else {
					LOGS.info(Thread.currentThread() +"Quote is not created");
					ActRes = "Quote creation Failed";
					Status = "Fail";
					CreateQuoteResult = "Fail";
					ExportResults.exportTestResult(
							"Quote Creation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			//}

		} catch (Exception e) {
			ImageName = "QuoteCreationException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExceptionMsg = "Exception Happened while Adding product To Quote";
			LOGS.info(Thread.currentThread() + "," +"Error in Adding the product - " + e.getMessage());
			LOGS.error("Error : "+Thread.currentThread() +";"+ e);
			
			Status = "Fail";
			Jiracounter = "Exception";
			CreateQuoteResult = "Fail";
			ExportResults.exportTestResult("Quote Creation :," + "Quote Creation should be successful" + ","
					+ "Application Slowness - Object not found in Quote Creation" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			return CreateQuoteResult;
		}

		
		return CreateQuoteResult;
	}

	public  String ValidateQuote() throws Exception {
		try {
			if (Productcancellation.equalsIgnoreCase("True")) {
				try {

					LOGS.info(Thread.currentThread() +"capturing cancellation reason after  Productcancellation ");
					Thread.sleep(15000);
					String CancellationReason = SLocator("CancellationReason").getText();
					LOGS.info(Thread.currentThread() +"CancellationReason captured from Quote Page: " + CancellationReason);

					String CancellationType = SLocator("CancellationType").getText();
					LOGS.info(Thread.currentThread() +"CancellationType captured from Quote Page: " + CancellationType);

					ActRes = "Product name contains: ";
					ExpRes = "QuoteDetail Screen shows Cancellation Reason and Cancellation type field populated";
					// ValidateQuoteRes="Pass";
					ExportResults.exportTestResult("cancellation Reason and type Validation :," + ExpRes + "," + ActRes
							+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
				} catch (Exception e) {
					e.printStackTrace();
					// ValidateQuoteRes="Fail";
					LOGS.info(Thread.currentThread() +"error in CancellationType captured from Quote Page: ");

				}

				// ------------------------------------After capture
				// signature-------------------------------------------------
				try {

					LOGS.info(Thread.currentThread() +"Signature Captured, Payment Verified & " + " Selected CheckBox virification");
					String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");

					String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");
					String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");
					if (sigCapChkbox.equalsIgnoreCase("Checked") && payVerifChkbox.equalsIgnoreCase("Checked")
							&& consulSelChkbox.equalsIgnoreCase("Checked")) {

						LOGS.info(Thread.currentThread() +"Signature Captured, Payment Verified & Consultation Selected CheckBox is Checked");
						ImageName = "Signature Captured, Payment Verified & Consultation Selected CheckBox";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						Status = "Pass";
						ExpRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox Should be Checked";
						ActRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox is Checked";

					} else {
						LOGS.info(Thread.currentThread() +
								"Signature Captured, Payment Verified & Consultation Selected CheckBox is not Checked");
						ImageName = "Signature Captured, Payment Verified & Consultation Selected CheckBox";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						Status = "Pass";
						ExpRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox Should be Checked";
						ActRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox is not Checked";
						ExportResults.exportTestResult(
								"QuotePage CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					}

				}

				catch (Exception e) {
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Signature Captured, Payment Verified & Consultation Selected CheckBox not verified");

				}
				ValidateQuoteRes = "Pass";
			} else if (ROICalc.equalsIgnoreCase("true")) {
				try {
					int i = 0;
					LOGS.info(Thread.currentThread() +"ROI Calculation section verification");
					ExpRes = "ROI Calculation section should be displayed";
					WebElement element = driver.findElement(By.xpath("//h3[text()='ROI Calculator']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
					ImageName = "ROICalculation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (element.isDisplayed()) {
						LOGS.info(Thread.currentThread() +"ROI Calculation section is displayed");
						Status = "Pass";
						ActRes = "ROI Calculation section is displayed";
						ExportResults.exportTestResult("ROI Calculation section verification :," + ExpRes + "," + ActRes
								+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					WebElement Q1 = driver.findElement(
							By.xpath("//td[contains(text(),'Customer worth')]/following-sibling::td/div[1]"));
					Actions action = new Actions(driver);
					action.doubleClick(Q1);
					/*
					 * action.keyDown(Keys.CLEAR); action.keyUp(Keys.CLEAR);
					 */
					action.sendKeys("$50,000,000,000,000").build().perform();
					Thread.sleep(5000);
					/*
					 * action.sendKeys("$50,000,000,000,000"); action.build().perform();
					 */
					LOGS.info(Thread.currentThread() +"Value for first field entered");
					// Thread.sleep(5000);
					WebElement Q2 = driver
							.findElement(By.xpath("//td[contains(text(),'Recommended')]/following-sibling::td/div[1]"));
					action.doubleClick(Q2);
					/*
					 * action.keyDown(Keys.CLEAR); action.keyUp(Keys.CLEAR);
					 */
					action.sendKeys("$300,000,000,000,000").build().perform();
					Thread.sleep(5000);
					/*
					 * action.sendKeys("$300,000,000,000,000"); action.build().perform();
					 */
					LOGS.info(Thread.currentThread() +"Value for second field entered");
					Thread.sleep(3000);
					WebElement Q3 = driver
							.findElement(By.xpath("//td[text()='Desired ROI']/following-sibling::td/div[1]"));
					action.doubleClick(Q3);
					/*
					 * action.keyDown(Keys.CLEAR); action.keyUp(Keys.CLEAR);
					 */
					action.sendKeys("50%").build().perform();
					Thread.sleep(5000);
					/*
					 * action.sendKeys("50%"); action.build().perform();
					 */
					LOGS.info(Thread.currentThread() +"Value for third field entered");
					Thread.sleep(5000);
					WebElement Q4 = driver.findElement(
							By.xpath("//td[contains(text(),'# of Calls to get')]/following-sibling::td/div[1]"));
					action.doubleClick(Q4);
					/*
					 * action.keyDown(Keys.CLEAR); action.keyUp(Keys.CLEAR);
					 */
					action.sendKeys("410.22").build().perform();
					Thread.sleep(3000);
					/*
					 * action.sendKeys("410.22"); action.build().perform();
					 */
					LOGS.info(Thread.currentThread() +"Value for fourth field entered");
					Thread.sleep(3000);
					WebElement saveBtn = driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@title='Save']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", saveBtn);
					saveBtn.click();
					LOGS.info(Thread.currentThread() +"Clicked on Save button");
					Thread.sleep(5000);
					WebElement element1 = driver.findElement(By.xpath("//h3[text()='ROI Calculator']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element1);
					int S1 = 0, S2 = 0, S3 = 0, S4 = 0, S5 = 0;
					String A1 = driver
							.findElement(
									By.xpath("//td[contains(text(),'Customer worth')]/following-sibling::td/div[1]"))
							.getText();
					LOGS.info(Thread.currentThread() +"Field value 1: " + A1);
					String A2 = driver
							.findElement(By.xpath("//td[contains(text(),'Recommended')]/following-sibling::td/div[1]"))
							.getText();
					LOGS.info(Thread.currentThread() +"Field value 2: " + A2);
					String A3 = driver.findElement(By.xpath("//td[text()='Desired ROI']/following-sibling::td/div[1]"))
							.getText();
					LOGS.info(Thread.currentThread() +"Field value 3: " + A3);
					String A4 = driver
							.findElement(
									By.xpath("//td[contains(text(),'# of Calls to get')]/following-sibling::td/div[1]"))
							.getText();
					LOGS.info(Thread.currentThread() +"Field value 4: " + A4);
					String A5 = driver
							.findElement(
									By.xpath("//td[contains(text(),'Calls to Return')]/following-sibling::td/div[1]"))
							.getText();
					LOGS.info(Thread.currentThread() +"Field value 5: " + A5);
					ExpRes = "Fields should be editable and decimals should round off";
					ImageName = "ROIFieldValues";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (A1.equalsIgnoreCase("$50,000,000,000,000"))
						S1 = 1;
					if (A2.equalsIgnoreCase("$300,000,000,000,000"))
						S2 = 1;
					if (A3.equalsIgnoreCase("50%"))
						S3 = 1;
					if (A4.equalsIgnoreCase("410"))
						S4 = 1;
					if (A5.equalsIgnoreCase("3690"))
						S5 = 1;
					if (S1 == 1 && S2 == 1 && S3 == 1 && S4 == 1 && S5 == 1) {
						LOGS.info(Thread.currentThread() +"Fields are editable and values are rounding off");
						Status = "Pass";
						ActRes = "Fields are editable and decimals are rounded off";
						ExportResults.exportTestResult(
								"ROI fields verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Fields are not editable and values are not rounding off");
						Status = "Fail";
						ActRes = "Fields are not editable and decimals are not rounded off";
						ExportResults.exportTestResult(
								"ROI fields verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Error entering and retrieving ROI");
				}
			} else {

				LOGS.info(Thread.currentThread() +"Execution of Validate Quote method started");
				QPageQNo = SLocator("QuoteNumb").getText();
				LOGS.info(Thread.currentThread() +"Quote No on Quote Page: " + QPageQNo);
				ExpRes = "Quote Number should be Generated";
				ImageName = "QuotePage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Verifying if Quote number is generated");
				if (QPageQNo.contains("Q-")) {
					LOGS.info(Thread.currentThread() +"Quote Number verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ActRes = "Quote Number is:" + QPageQNo;
					ExportResults.exportTestResult(
							"Quote Number Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Quote Number verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Quote Number is not Generated";
					ExportResults.exportTestResult(
							"Quote Number Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

				String SalesRepName = SLocator("SalesRep").getText();
				LOGS.info(Thread.currentThread() +"Sales rep on Quote Page: " + SalesRepName);
				LoginAsRepName = SLocator("LoginAsUserName").getText();
				LOGS.info(Thread.currentThread() +"Sales rep on Quote Page: " + LoginAsRepName);
				ExpRes = "Sales Rep should be:" + LoginAsRepName;
				LOGS.info(Thread.currentThread() +"Verifying if Sales Rep is Populated");
				if (SalesRepName.equalsIgnoreCase(LoginAsRepName)) {
					LOGS.info(Thread.currentThread() +"Sales Rep verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ActRes = "Sales Rep is:" + SalesRepName;
					ExportResults.exportTestResult(
							"Sales Rep Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Sales Rep verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Sales Rep is:" + SalesRepName;
					ExportResults.exportTestResult(
							"Sales Rep Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}

				String QType = SLocator("QuoteType").getText();
				LOGS.info(Thread.currentThread() +"Quote type captured from Quote Page: " + QType);
				ExpRes = "Type should be Quote";
				LOGS.info(Thread.currentThread() +"Verifying if Type is Quote");
				if (QType.equalsIgnoreCase("Quote")) {
					LOGS.info(Thread.currentThread() +"Quote Type verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ActRes = "Type is: " + QType;
					ExportResults.exportTestResult(
							"Type Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Quote Type verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Type is: " + QType;
					ExportResults.exportTestResult(
							"Type Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}

				String QPrimarycheckbox = driver
						.findElement(By.xpath(
								"//span[text()='Primary']//parent::td//following-sibling::td//descendant::div/img"))
						.getAttribute("alt");
				// QPrimarycheckbox=QPrimarycheckbox;
				LOGS.info(Thread.currentThread() +"Primary checkbox in Qpage Status: " + QPrimarycheckbox);
				ExpRes = "Primary checkbox in Qpage should be checked";
				LOGS.info(Thread.currentThread() +"Verifying if Status is Draft");
				if (QPrimarycheckbox.equalsIgnoreCase("Checked")) {
					LOGS.info(Thread.currentThread() +"Primary checkbox Status verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ActRes = "Status is: " + "Checked";
					ExportResults.exportTestResult("Primary checkbox status validation :," + ExpRes + "," + ActRes + ","
							+ Status + "," + "No Image",pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Primary checkbox Status verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Status is: " + "Unchecked";
					ExportResults.exportTestResult("Primary checkbox status validation :," + ExpRes + "," + ActRes + ","
							+ Status + "," + "No Image",pr.Resultsfolderpath);
				}

				String QPrimaryContact = driver.findElement(By.xpath(
						"//span[text()='Primary Contact']//parent::td//following-sibling::td//descendant::div/a"))
						.getText();

				LOGS.info(Thread.currentThread() +"Primary Contact captured from Quote Page: " + QPrimaryContact);
				ExpRes = "Primary Contact Should be same as mentioned in Account Page";
				LOGS.info(Thread.currentThread() +"Verifying if Status is Draft");
				if (QPrimaryContact.equalsIgnoreCase("Automation Testuser")) {
					LOGS.info(Thread.currentThread() +"Primary Contact verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ImageName = "rimary Contact verification";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Primary Contact Should be same as mentioned in Account Page:" + QPrimaryContact;
					ExportResults.exportTestResult(
							"QPrimaryContact Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Primary Contact verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Primary Contact mismatch mentioned in Account Page";
					ExportResults.exportTestResult(
							"QPrimaryContact Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}

				String QStatus = SLocator("QuoteStatus").getText();
				QuoteStatus = QStatus;
				LOGS.info(Thread.currentThread() +"Quote Status captured from Quote Page: " + QStatus);
				ExpRes = "Status should be Draft";
				LOGS.info(Thread.currentThread() +"Verifying if Status is Draft");
				if (QStatus.equalsIgnoreCase("Draft")) {
					LOGS.info(Thread.currentThread() +"Quote Status verification Passed");
					Status = "Pass";
					ValidateQuoteRes = "Pass";
					ActRes = "Status is: " + QStatus;
					ExportResults.exportTestResult(
							"Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Quote Status verification Failed");
					Status = "Fail";
					ValidateQuoteRes = "Fail";
					ActRes = "Type is: " + QStatus;
					ExportResults.exportTestResult(
							"Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}

				if (TaxExempt.equalsIgnoreCase("Yes")) {
					LOGS.info(Thread.currentThread() +"TaxExempt checkbox checked or not");
					ExpRes = " TaxExempt Checkbox should bechecked";
					try {
						String value = SLocator("TaxExemptCheckbox").getAttribute("title");
						LOGS.info(Thread.currentThread() +"value :" + value);
						if (value.equalsIgnoreCase("Checked")) {

							LOGS.info(Thread.currentThread() +"TaxExempt checkbox  checked");
							ActRes = "TaxExempt checkbox checked";
							Status = "Pass";
							ExportResults.exportTestResult("Taxexempt checkbox Validation in quotedetails page :,"
									+ ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
						}

					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"TaxExempt checkbox not checked");
						e.printStackTrace();
						ActRes = "checkbox not checked";
						Status = "Fail";
						ExportResults.exportTestResult("taxexempt checkbox Validation in Quote details page :," + ExpRes
								+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

					}
				}

				if ((NewQBtnQPageValidation.equalsIgnoreCase("True"))
						|| (CloneRelatedQPageValidation.equalsIgnoreCase("True"))) {
					LOGS.info(Thread.currentThread() +"Validating New quote button or clone related button on quote page");
					List<WebElement> QPageBtsPanel = driver.findElements(By.xpath("//td[@id='topButtonRow']//input"));
					// (List<WebElement>) SLocator("QPageBtns");
					LOGS.info(Thread.currentThread() +"Captured all the Button Objects from the top row of quotes page");
					String NewQuoteBtn = " ";
					if (NewQBtnQPageValidation.equalsIgnoreCase("True")) {
						try {
							LOGS.info(Thread.currentThread() +"Validating New Quote button does not exist on quote page");
							ExpRes = "New Quote Button should not exist on Quote page";
							ImageName = "NewQuoteButtononQPage";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							Iterator<WebElement> itr = QPageBtsPanel.iterator();
							while (itr.hasNext()) {
								LOGS.info(Thread.currentThread() +"Entered while loop and iterating all the objects");
								String Value = itr.next().getAttribute("value");
								LOGS.info(Thread.currentThread() +"Content of the attribute value: " + Value);
								if (Value.equalsIgnoreCase("New Quote")) {
									LOGS.info(Thread.currentThread() +"Setting NewQuoteBtn flag to True");
									NewQuoteBtn = "True";
								} else {
									LOGS.info(Thread.currentThread() +"Setting NewQuoteBtn flag to False");
									NewQuoteBtn = "False";
								}
							}
							if (NewQuoteBtn.equalsIgnoreCase("False")) {
								LOGS.info(Thread.currentThread() +"New Quote Button does not exist on Quote page");
								ActRes = "New Quote Button does not exist on Quote page";
								Status = "Pass";
								ExportResults.exportTestResult("New Quote Button Validation :," + ExpRes + "," + ActRes
										+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
							}
						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"New Quote Button validation on quote page failed");
							ActRes = "New Quote Button validation failed";
							Status = "Fail";
							ExportResults.exportTestResult("New Quote Button Validation :," + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}
					if (CloneRelatedQPageValidation.equalsIgnoreCase("True")) {
						try {
							LOGS.info(Thread.currentThread() +"Validating if Clone With Related button exist on quote page");
							ExpRes = "Clone with Related Button should appear on Quote Detail Page";
							ImageName = "CloneWithRelated";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							Iterator<WebElement> itr = QPageBtsPanel.iterator();
							while (itr.hasNext()) {
								LOGS.info(Thread.currentThread() +"Entered while loop and iterating all the objects");
								String Value = itr.next().getAttribute("value");
								LOGS.info(Thread.currentThread() +"Content of the attribute value: " + Value);
								if (Value.equalsIgnoreCase("Clone with Related")) {
									LOGS.info(Thread.currentThread() +"Clone with Related button exist on quote page");
									ActRes = "Clone with Related Button appears on Quote Detail Page";
									Status = "Pass";
									ExportResults.exportTestResult("Clone with Related Button Validation :," + ExpRes
											+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}
							}
						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"Clone With Related Button validation on quote page failed");
							ActRes = "Clone With Related Button validation failed";
							Status = "Fail";
							ExportResults.exportTestResult("Clone With Related Button Validation :," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}
				}

			}

		}

		catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			ValidateQuoteRes = "Fail";
			ExportResults.exportTestResult("Quote Validation :," + "Quote validation should be successful" + ","
					+ "Application Slowness - Object not found in Quote Validation" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return ValidateQuoteRes;
	}

	public  String ValidateOpportunity(String[] Prods, String[] palns) throws Exception {
		try {

			LOGS.info(Thread.currentThread() +"ValidateOpportunity Keyword execution started");
			Thread.sleep(4000);
			LOGS.info(Thread.currentThread() +"ValidateOpportunity Keyword execution started");
			SLocator("Opptlink").click();
			LOGS.info(Thread.currentThread() +"Opportunity link clicked");
			JavascriptExecutor jse5 = (JavascriptExecutor) driver;
			jse5.executeScript("window.scrollBy(0,1500)", "");
			LOGS.info(Thread.currentThread() +"scrolling  down done");

			driver.navigate().refresh();
			Thread.sleep(5000);
			driver.navigate().refresh();
			Thread.sleep(3000);

			try {

				LOGS.info(Thread.currentThread() +"Identifying productname in oppertunity page");
				for (int i = 0; i < Prods.length; i++) {
					String productname = SLocator("Product").getText();
					ActRes = "Product name contains: " + Prods[i];
					ExpRes = "verify" + Prods[i] + "is displaying";
					ImageName = "ProdNameValidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					if (productname.equalsIgnoreCase(Prods[i])) {
						LOGS.info(Thread.currentThread() +"Product name contains " + Prods[i]);
						Status = "Pass";
						ValidateOpptResult = "Pass";
						ExportResults.exportTestResult(
								"Productname validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				}
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"Product Not Found");
				ValidateOpptResult = "Fail";
				Status = "Fail";
				ExportResults.exportTestResult(
						"Productname validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}
			try {
				LOGS.info(Thread.currentThread() +"Identifying QuoteNumber in opportunity page");

				String QuoteNumber = SLocator("Quote").getText();
				LOGS.info(Thread.currentThread() +"QuoteNumber:" + QuoteNumber);

				ActRes = QPageQNo;
				ExpRes = QuoteNumber;
				ImageName = "QuoteNo";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (QuoteNumber.equalsIgnoreCase(ActRes)) {
					LOGS.info(Thread.currentThread() +"QuoteNumber is same as quote page");
					Status = "Pass";
					ValidateOpptResult = "Pass";

					ExportResults.exportTestResult(
							"QuoteNumber validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

			} catch (Exception e) {

				LOGS.info(Thread.currentThread() +"QuoteNumber Not Found");
				ValidateOpptResult = "Fail";
				Status = "Fail";
				ExportResults.exportTestResult(
						"QuoteNumber validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}

			try {

				if (SecondndQuoteCreation.equalsIgnoreCase("true")) {

					LOGS.info(Thread.currentThread() +"SecondndQuoteCreation started");

					Set<String> setWindowHandles = driver.getWindowHandles();
					// Iterating over all windows handles
					for (String strWindowHandle : setWindowHandles) {
						// If the window handle is not same as the one stored before opening up second
						// window, it is the new window
						if (!strWindowHandle.equals(Oppwindow)) {
							// Switch to the new window
							driver.switchTo().window(strWindowHandle);
							// Print window title
							System.out.println(driver.getTitle());
							// Close this browser window
							driver.close();
							// Exit from loop
							break;
						}
					}
					// Switch back to the parent browser window
					driver.switchTo().window(Oppwindow);
					// Print window title
					System.out.println(driver.getTitle());

					WebElement placeOrder = driver
							.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='place_order']"));
					JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
					jseSubmitBTN.executeScript("arguments[0].click()", placeOrder);
					LOGS.info(Thread.currentThread() +"placeOrder btn clicked :");

					Thread.sleep(3000);

					ProductIdentifierName = "07";

					String inputdata = FetchProductplan(ProductIdentifierName);
					LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
					String[] allProdsplans = inputdata.split("&");
					String allProds = allProdsplans[0];
					LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
					String[] Prods1 = allProds.split(",");
					String allpalns = allProdsplans[1];
					LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
					String[] Plans = allpalns.split(",");
					LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);

					CreateQuote(Prods1, palns);
					LOGS.info(Thread.currentThread() +"CreateQuote done");

					// edit the quote

					String Quote2 = driver
							.findElement(By.xpath("//td[text()='Quote Number']//following::div[@id='Name_ileinner']"))
							.getText();
					LOGS.info(Thread.currentThread() +"creating Quate 2nd time for Same Oppurtunity :" + Quote2);

					Thread.sleep(3000);

					String Q2Primarycheckbox = driver
							.findElement(By.xpath(
									"//span[text()='Primary']//parent::td//following-sibling::td//descendant::div/img"))
							.getAttribute("alt");
					// QPrimarycheckbox=QPrimarycheckbox;
					LOGS.info(Thread.currentThread() +"Primary checkbox in Qpage Status: " + Q2Primarycheckbox);
					ExpRes = "Primary checkbox in Qpage should be checked";
					LOGS.info(Thread.currentThread() +"Verifying if Status is Draft");

					if (Q2Primarycheckbox.equalsIgnoreCase("Checked")) {

						LOGS.info(Thread.currentThread() +"Primary checkbox Status verification Passed");
						Status = "Pass";
						ValidateQuoteRes = "Pass";
						ActRes = "Status is: " + "Checked";
						ImageName = "Q2Primarycheckbox";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExportResults.exportTestResult("Quate primary checkbox status validation :," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {

						LOGS.info(Thread.currentThread() +"Primary checkbox Status verification Failed");
						Status = "Fail";
						ValidateQuoteRes = "Fail";
						ActRes = "Status is: " + "Unchecked";
						ExportResults.exportTestResult("Quate primary checkbox status validation :," + ExpRes + ","
								+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}

					try {

						SLocator("Opptlink").click();
						LOGS.info(Thread.currentThread() +"Opportunity link clicked");
						// JavascriptExecutor jse51 = (JavascriptExecutor) driver;
						// jse51.executeScript("window.scrollBy(0,1500)", "");
						LOGS.info(Thread.currentThread() +"scrolling  down done");

						driver.navigate().refresh();
						Thread.sleep(5000);
						driver.navigate().refresh();
						Thread.sleep(3000);

						String Productcountfromopptunitypage = driver
								.findElement(By.xpath("//span[text()='Products (CPQ Aug2018)']/span")).getText();
						Productcountfromopptunitypage = Productcountfromopptunitypage.replace("[", "");
						Productcountfromopptunitypage = Productcountfromopptunitypage.replace("]", "");
						if (Productcountfromopptunitypage.contains("+"))
							Productcountfromopptunitypage = Productcountfromopptunitypage.replace("+", "");
						LOGS.info(Thread.currentThread() +"Productcountfromopptunitypage count is" + Productcountfromopptunitypage);
						int Productcountfromopptunitypage1 = Integer.parseInt(Productcountfromopptunitypage) + 1;
						LOGS.info(Thread.currentThread() +"Productcountfromopptunitypage count after converting to integer is"
								+ Productcountfromopptunitypage1);

						driver.findElement(By.xpath("//span[text()='Products (CPQ Aug2018)']")).click();
						Thread.sleep(3000);

						LOGS.info(Thread.currentThread() +"Identifying productname in oppertunity page");

						for (int i = 2; i <= Productcountfromopptunitypage1; i++) {

							String productname = driver.findElement(By.xpath(
									"//span[@title='Products (CPQ Aug2018) Help (New Window)']//following::div//tr[2]/th[1]/a"))
									.getText();
							ActRes = "Product name contains: " + Prods1[i];
							ExpRes = "verify" + Prods1[i] + "is displaying";
							ImageName = "ProdNameValidation";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

							if (productname.equalsIgnoreCase(Prods1[i])) {
								LOGS.info(Thread.currentThread() +"Product name contains " + Prods[i]);
								Status = "Pass";
								ValidateOpptResult = "Pass";
								ExportResults.exportTestResult("Productname validation," + ExpRes + "," + ActRes + ","
										+ Status + "," + ImgName,pr.Resultsfolderpath);
							}
						}
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Product Not Found");
						ValidateOpptResult = "Fail";
						Status = "Fail";
						ExportResults.exportTestResult(
								"Productname validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					}

				}

				
			} catch (Exception e) {
				ActRes = "not verified";
				ValidateOpptResult = "Fail";
				LOGS.info(Thread.currentThread() +"primary checkbox is not checked");
				Status = "Fail";
				ExportResults.exportTestResult(
						"Primary checkbox validation," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"ValidateOpportunity Keyword execution stopped");
			e.printStackTrace();
			Status = "Fail";
			ValidateOpptResult = "Fail";
			ExportResults.exportTestResult("ValidateOpportunity :," + "ValidateOpportunity should be successful" + ","
					+ "Application Slowness - Object not found in ValidateOpportunitys" + "," + Status + ","
					+ "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"ValidateOpportunity :," + "ValidateOpportunity should be successful" + ","
					+ "Application Slowness - Object not found in Searching Account" + "," + Status);

		}

		if (NewQBtnOppPageValidation.equalsIgnoreCase("True")) {
			try {
				LOGS.info(Thread.currentThread() +"Verifyig New Quote button does not exist on Opportunity page");
				List<WebElement> NQBtnValid = driver.findElements(
						By.xpath("//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/child::*"));
				LOGS.info(Thread.currentThread() +"Checking if there are any child elements");
				int Csize = NQBtnValid.size();
				LOGS.info(Thread.currentThread() +"List size: " + Csize);
				ExpRes = "New Quote Button should not appear on Opp page";
				WebElement element = SLocator("NewQuote");
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				Thread.sleep(3000);
				ImageName = "NewQuoteBtn";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Csize == 0) {
					LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exist");
					ActRes = "New Quote button does not appear on Opp page";
					Status = "Pass";
					ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				if (Csize > 0) {
					LOGS.info(Thread.currentThread() +"Checking if the New quote button exists");
					Iterator<WebElement> itr = NQBtnValid.iterator();
					while (itr.hasNext()) {
						String BtnTitle = driver.findElement(By.xpath(
								"//h3[text()='Quotes']/parent::td/following-sibling::td[@class='pbButton']/input"))
								.getAttribute("title");
						if (!BtnTitle.equalsIgnoreCase("New Quote")) {
							LOGS.info(Thread.currentThread() +"New Quote Button doesnt not exists");
							ActRes = "New Quote button doesnot exist on Opp page";
							Status = "Pass";
							ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"New Quote Button exists");
							ActRes = "New Quote button exists on Opp page";
							Status = "Fail";
							ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}
				}
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"New Quote button validation on Opp page failed");
				ActRes = "New Quote button validation failed";
				Status = "Fail";
				ExportResults.exportTestResult("New Quote Button validation on Opp page :," + ExpRes + "," + ActRes
						+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		}
		return ValidateOpptResult;

	}

	public  String EnterBudget(String ProductName, String PlanName) throws Exception {

		try {
			BudgetToEnter = 0;
			LOGS.info(Thread.currentThread() +" EnterBudget method started");
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(4, TimeUnit.SECONDS);
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}

			if (ProductName.contains("Mobile Boost") || ProductName.contains("Presence + Mobile")) {
				LOGS.info(Thread.currentThread() +"Entering Budget for " + ProductName);
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'Mobile Boost')]//ancestor::sb-swipe-container//descendant::sb-option-cell[@item='record.CPQ_Minimum_Budget__c']//span[@id='me']")));
				captureMinBudget = SLocator("mobileBoostMinBudget").getText();
				
				LOGS.info(Thread.currentThread() +"Captured Minimum Budget: " + captureMinBudget);

				Actions actions = new Actions(driver);
				actions.moveToElement(SLocator("mobileBoostEnterBudget"));
				actions.click();
				LOGS.info(Thread.currentThread() +"Clicked on Budget textfield for the product " + ProductName);
				LOGS.info(Thread.currentThread() +"Plans Available: " + ProductName + ", Budget entered should be in multiple of 10 !!!");
				actions.sendKeys(Budgetvalue);
				actions.build().perform();

				LOGS.info(Thread.currentThread() +" budget entered by multiple of 10");
				ExpRes = "Budget should be rounded down to the nearest $10";
				ActRes = "Budget rounded down to the nearest $10:" + Budgetvalue;
				Status = "Pass";
				ImageName = "Productpage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Adding budget," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"Budget entered then clicking on save");

				wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
				SLocator("Save").click();
				
				//Thread.sleep(5000);
				LOGS.info(Thread.currentThread() +"Clicked First Save on Configure Products Page");
				String amount = "";
				if (ProductName.contains("Presence + Mobile")) {
					amount = SLocator("MobileBoostEdit").getText();
				} else if (ProductName.contains("Mobile Boost")) {
					amount = SLocator("Price").getText();
				}
				LOGS.info(Thread.currentThread() +"captureed Budget amount :" + amount);

				String params[] = amount.split("\\.");
				LOGS.info(Thread.currentThread() +"Budget amount beforedecimal :" + params[0]);
				if (params[0].equalsIgnoreCase("$20")) {
					ExpRes = "Budget should be rounded down to the nearest $10 ";
					ActRes = "Budget rounded down to the nearest $10:" + params[0];
					Status = "Pass";
					ImageName = "EditProductpage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Budget ammount Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

			} else if (ProductName.equalsIgnoreCase("Search (A la carte)")
					// || ProductName.equalsIgnoreCase("Presence + Performance Sync")
					|| ProductName.equalsIgnoreCase(OR.getProperty("02"))
					|| ProductName.equalsIgnoreCase(OR.getProperty("09"))
					// || ProductName.contains("Diversified Digital"))


					|| ProductName.equalsIgnoreCase(OR.getProperty("16")) 
					|| ProductName.equalsIgnoreCase(OR.getProperty("17"))
					)

			{
				try {
					LOGS.info(Thread.currentThread() +"Entering Budget for " + PlanName);


					if ((PlanName.equalsIgnoreCase(OR.getProperty("09")))
							// || (PlanName.equalsIgnoreCase("Search - Guaranteed Clicks"))
							|| PlanName.equalsIgnoreCase("Managed Search")
							|| PlanName.equalsIgnoreCase("Search (a la carte)"))

					{
						LOGS.info(Thread.currentThread() +"PlanName :" + PlanName);

						
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						//Thread.sleep(3000);
						wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[text()='Managed Search']//ancestor::sb-option-cell//following-sibling::sb-option-cell[contains(@field-label,'Minimum')]//descendant::span//descendant::span")));
						String MinBudget = SLocatorDynamic(
								"MinBudgetDynamic1_" + "Managed Search" + "_MinBudgetDynamic2").getText();

						LOGS.info(Thread.currentThread() +"Captured Minimum Budget value" + MinBudget);
						String RepMinBudget = MinBudget.replace("$", "");
						LOGS.info(Thread.currentThread() +"$ Replaced Min Budget: " + RepMinBudget);

						if (bugentOfSearchProductasperHGCP.equalsIgnoreCase("True")) {
							LOGS.info(Thread.currentThread() +"inside diffrent_Budget");

							if (search$399_$898.equalsIgnoreCase("True")) {

								BudgetToEnter = ThreadLocalRandom.current().nextInt(400, 897);
								System.out.println("search$399_$898 Random number generated is : " + BudgetToEnter);
							} else if (search$899_$2998.equalsIgnoreCase("True")) {

								BudgetToEnter = ThreadLocalRandom.current().nextInt(899, 2998);
								System.out.println("search$899_$2998 Random number generated is : " + BudgetToEnter);
							} else if (search$2999_$9999.equalsIgnoreCase("True")) {

								BudgetToEnter = ThreadLocalRandom.current().nextInt(2999, 9999);
								System.out.println("search$2999_$9999 Random number generated is : " + BudgetToEnter);
							} else if (searchabove$9999.equalsIgnoreCase("True")) {

								BudgetToEnter = ThreadLocalRandom.current().nextInt(9999, 999999);
								System.out.println("searchabove$9999 Random number generated is : " + BudgetToEnter);

							}
						} else if (TestCaseName.equalsIgnoreCase("DIG_2169_2398")) {
							BudgetToEnter = 5000;
							LOGS.info(Thread.currentThread() +"Taking Budget Amount from Test case - " + BudgetToEnter);

						}else if (userDefinedBudget.equalsIgnoreCase("True")) {

							Properties uDB = pr.loadPropertiesFiles("Budget");
							BudgetToEnter = Float.parseFloat(uDB.getProperty("userDefinedBudgetSearch"));

						} else {

							float convertMinBudg = Float.parseFloat(RepMinBudget);
							if (BudgetLTMinBudget.equalsIgnoreCase("True")) {
								BudgetToEnter = convertMinBudg - 100;
							} else {
								BudgetToEnter = convertMinBudg + 200;
							}

						}
						LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
						Actions actions = new Actions(driver);
						actions.moveToElement(
								SLocatorDynamic("BudgetTADynamic1_" + "Managed Search" + "_BudgetTADynamic2"));
						actions.click();
						LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
						actions.sendKeys(String.valueOf(BudgetToEnter));
						actions.build().perform();
						LOGS.info(Thread.currentThread() +"Entered the budget");
						Status = "Pass";
						ImageName = "EnterBudget";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Budget greater than Min budget-" + MinBudget + " should be saved with no error";

						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Clicked on Save Button");
						//Thread.sleep(5000);

						if (ProductName.equalsIgnoreCase(OR.getProperty("02"))) {
							// if (!PlanName.equalsIgnoreCase("Managed Search")){
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
							SLocator("Save").click();
							//Thread.sleep(5000);
							driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
							LOGS.info(Thread.currentThread() +"Clicked second Save Button");
							//Thread.sleep(5000);
						}
						// }

					}
					// else if (PlanName.equalsIgnoreCase("Search - Guaranteed Clicks")) {
					else if (PlanName.equalsIgnoreCase(OR.getProperty("08"))) {

						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						if (clicks_45.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("45 Clicks - $140");
							LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
						} else if (clicks_60.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("65 Clicks - $185");
							LOGS.info(Thread.currentThread() +"Selected : 60 Clicks - $185");
						} else if (clicks_90.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("90 Clicks - $270");
							LOGS.info(Thread.currentThread() +"Selected : 90 Clicks - $270");
						} else {
							guaranteedClicks.selectByVisibleText("45 Clicks - $140");
							LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
						}
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						LOGS.info(Thread.currentThread() +"Clicked on Save Button");
						//Thread.sleep(5000);

					}

					if (BudgetLTMinBudget.equalsIgnoreCase("True")) {
						String ExpErrMsg = "Please enter a budget amount equal to or greater than the budget minimum";
						String ActErrMsg = driver.findElement(By.xpath("//div[contains(@class,'notify__content')]/h2"))
								.getText();
						if (ActErrMsg.contains(".")) {
							ActErrMsg = ActErrMsg.replace(".", "");
						}
						ExpRes = "Following Validation msg should be thrown: " + ExpErrMsg;
						ImageName = "BudgetErrMsg";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (ExpErrMsg.equalsIgnoreCase(ActErrMsg)) {
							LOGS.info(Thread.currentThread() +"Expected and Actual error messages match");
							Status = "Pass";
							ActRes = "Validation msg thrown is: " + ActErrMsg;
							ExportResults.exportTestResult("Verifying error message for lower budget," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Expected and Actual error messages does not match");
							Status = "Fail";
							ActRes = "Validation msg thrown is: " + ActErrMsg;
							ExportResults.exportTestResult("Verifying error message for lower budget," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}

						LOGS.info(Thread.currentThread() +"End of execution");
						driver.quit();
						return "Pass";
					}

					// SLocator("Save").click();

					//Thread.sleep(3000);

					
					LOGS.info(Thread.currentThread() +"Clicked on  First Save Button again");
					ActRes = "Budget saved successfully with no error. Budget entered is : " + BudgetToEnter;
					ExportResults.exportTestResult(
							"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					//e.printStackTrace();
					LOGS.error("Error in Budget",e);
				}
			}
			
			if ((PlanName.contains("Display")) || (PlanName.contains("Social")) || (PlanName.contains("Managed Search"))
					|| PlanName.contains("Foundation + 1 Ad Campaign") 
					|| (PlanName.contains("Foundation + Display & Social"))
					|| (PlanName.contains("Foundation + Display & Search - Small"))
					|| (PlanName.contains("Foundation + Display & Search - Medium"))
					|| (PlanName.contains("Foundation + Display & Search - Large"))
					|| (PlanName.contains("Foundation + Social & Search - Small"))
					|| (PlanName.contains("Foundation + Social & Search - Medium"))
					|| (PlanName.contains("Foundation + Social & Search - Large"))

					||  PlanName.contains("Smart Presence + 1 Ad Campaign")
					|| (PlanName.contains("Smart Presence + Display & Social"))
					|| (PlanName.contains("Smart Presence + Display & Search - Small"))
					|| (PlanName.contains("Smart Presence + Display & Search - Medium"))
					|| (PlanName.contains("Smart Presence + Display & Search - Large"))
					|| (PlanName.contains("Smart Presence + Social & Search - Small"))
					|| (PlanName.contains("Smart Presence + Social & Search - Medium"))
					|| (PlanName.contains("Smart Presence + Social & Search - Large")

							|| PlanName.contains("Smart Sync - Small")
							|| PlanName.contains("Smart Sync - Medium")
							|| PlanName.contains("Smart Sync - Large")

							|| PlanName.contains("Synchronized Marketing - Small")
							|| PlanName.contains("Synchronized Marketing - Medium")
							|| PlanName.contains("Synchronized Marketing - Large")
							)
					
					) 
			{
				LOGS.info(Thread.currentThread() +"Entering Budget for " + PlanName);
				if (PlanName.contains("(a la carte)")) {
					PlanName = PlanName.replace(" (a la carte)", "");
					LOGS.info(Thread.currentThread() +"Plan name is: " + PlanName);
				}

				//Thread.sleep(5000);
				String MinBudget = SLocatorDynamic("MinBudgetDynamic1_" + PlanName + "_MinBudgetDynamic2").getText();
				LOGS.info(Thread.currentThread() +"Captured Minimum Budget value on display" + MinBudget);
				
				String RepMinBudget = MinBudget.replace("$", "");
				RepMinBudget = RepMinBudget.replace(",", "");
				LOGS.info(Thread.currentThread() +"$ Replaced Min Budget: " + RepMinBudget);
				convertMinBudg = Float.parseFloat(RepMinBudget);
				
				if (budgetOfDisplayProductasperHGCP.equalsIgnoreCase("True")) {

					LOGS.info(Thread.currentThread() +"inside diffrent_Bugent");

					if (Display$149_248.equalsIgnoreCase("True")) {

						BudgetToEnter = ThreadLocalRandom.current().nextInt(149, 248);
						System.out.println("Display$149_248 Random number generated is : " + BudgetToEnter);
					} else if (Display$249_498.equalsIgnoreCase("True")) {

						BudgetToEnter = ThreadLocalRandom.current().nextInt(249, 498);
						System.out.println("Display$249_498 Random number generated is : " + BudgetToEnter);
						SLocator("Save").click();
						LOGS.info(Thread.currentThread() +"Clicked on First Save Button");
					} else if (Userdefiedvalue.equalsIgnoreCase("True")) {

						BudgetToEnter = userdefinepricefordisplay;

						System.out.println("User defined price for Display:" + BudgetToEnter);
					}
				} else if (TestCaseName.equalsIgnoreCase("DIG_2169_2768")) {
					BudgetToEnter = 500;
					LOGS.info(Thread.currentThread() +"Taking Budget Amount from Test case - " + BudgetToEnter);

				} else if (TestCaseName.equalsIgnoreCase("DIG_2169_2769")) {
					BudgetToEnter = 300;
					LOGS.info(Thread.currentThread() +"Taking Budget Amount from Test case - " + BudgetToEnter);

				} 


				else {
					if (BudgetLTMinBudget.equalsIgnoreCase("True")) {
						BudgetToEnter = convertMinBudg - 100;
					} else {
						BudgetToEnter = convertMinBudg + 200;
					}

				}

				LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
				Actions actions = new Actions(driver);
				actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName + "_BudgetTADynamic2"));
				actions.click();
				LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
				actions.sendKeys(String.valueOf(BudgetToEnter));
				actions.build().perform();
				ImageName = "EnterBudget" + PlanName;
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				
				if (!(EntrBdgtSave.equalsIgnoreCase("True"))) // To skip clicking Save button for Local Ranking
				{
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
					SLocator("Save").click(); 
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
					LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
				}
				MinBudget = MinBudget.replace(",","");
				LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + PlanName);
				Status = "Pass";
				ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
				ActRes = "Budget saved successfully with no error. Budget entered is :" + BudgetToEnter;
				ExportResults.exportTestResult(
						"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				//Thread.sleep(5000);
				

				// if (ProductName.equalsIgnoreCase("Presence + Performance Sync"))
				if (ProductName.equalsIgnoreCase(OR.getProperty("02"))) {
					driver.findElement(By.xpath("//paper-button[@id='pcSave']")).click();

					LOGS.info(Thread.currentThread() +"you crossed ");
					//Thread.sleep(5000);
				}

				if (budgetOfDisplayProductasperHGCP.equalsIgnoreCase("True")) {
					//Thread.sleep(5000);

					LOGS.info(Thread.currentThread() +"you crossed 2 ");
					driver.findElement(By.xpath(
							"//div[text()='Display']//following::div[@index='4' and @field='CPQ_Tax__c']//following::div[1]/span"))
					.click();
					LOGS.info(Thread.currentThread() +"Clicked on Arrow");

					//Thread.sleep(5000);

					if ((BudgetToEnter >= 149) && (BudgetToEnter <= 248)) {

						String Term = driver.findElement(By.xpath("//div[text()='Term']//following::div[2]/span"))
								.getText();

						LOGS.info(Thread.currentThread() +"Term for Budget with in Display $149_248 price Range:" + Term);

						ExpRes = "Term for Budget within Display $149_248 price range should be '12 months Package Term'";
						ImageName = "Validate Term for Display $149_248 price Range";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						if (Term.equalsIgnoreCase("12 months Package Term")) {

							LOGS.info(Thread.currentThread() +"Term for Budget with in Display $149_248 price Range is:" + Term);
							ActRes = "Term for Budget with in Display $149_248 price Range is:" + Term;

							ExportResults.exportTestResult("Validate Term for Display $149_248 price Range:, " + ExpRes
									+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						} else {

							LOGS.info(Thread.currentThread() +
									"Term for Budget within Display $149_248 price range is not '12 months Package Term'");
							ActRes = "Term for Budget within Display $149_248 price range is not '12 months Package Term'";

							ExportResults.exportTestResult("Validate Term for Display $149_248 price Range:, " + ExpRes
									+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}

					if ((BudgetToEnter >= 249) && (BudgetToEnter <= 498)) {

						String Term = driver.findElement(By.xpath("//div[text()='Term']//following::div[2]/span"))
								.getText();

						LOGS.info(Thread.currentThread() +"Term for Budget with in Display $249_498 price Range:" + Term);

						ExpRes = "Term for Budget within Display $249_498 price range should be '12 months Package Term'";
						ImageName = "Validate Term for Display $249_498 price Range";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						if (Term.equalsIgnoreCase("6 months Package Term")) {

							LOGS.info(Thread.currentThread() +"Term for Budget with in Display $249_498 price Range is:" + Term);
							ActRes = "Term for Budget with in Display $249_498 price Range is:" + Term;

							ExportResults.exportTestResult("Validate Term for Display $249_498 price Range:, " + ExpRes
									+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						} else {

							LOGS.info(Thread.currentThread() +
									"Term for Budget within Display $249_498 price range is not '6 months Package Term'");
							ActRes = "Term for Budget within Display $249_498 price range is not '6 months Package Term'";

							ExportResults.exportTestResult("Validate Term for Display $249_498 price Range:, " + ExpRes
									+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}

				}

				if (BudgetLTMinBudget.equalsIgnoreCase("True")) {
					LOGS.info(Thread.currentThread() +"Verifying Error message");
					String ExpErrMsg = "Please enter a budget amount equal to or greater than the budget minimum";
					String ActErrMsg = driver.findElement(By.xpath("//div[contains(@class,'notify__content')]/h2"))
							.getText();
					ExpRes = "Following validation msg should be thrown: " + ExpErrMsg;
					ImageName = "BudgetErrMsg";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (ExpErrMsg.equalsIgnoreCase(ActErrMsg)) {
						LOGS.info(Thread.currentThread() +"Expected and Actual error messages match");
						Status = "Pass";
						ActRes = "Validation msg thrown is: " + ActErrMsg;
						ExportResults.exportTestResult("Verifying error message for lower budget," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Expected and Actual error messages does not match");
						Status = "Fail";
						ActRes = "Validation msg thrown is: " + ActErrMsg;
						ExportResults.exportTestResult("Verifying error message for lower budget," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					System.exit(0);
					LOGS.info(Thread.currentThread() +"End of execution");
					driver.quit();
				}
			} 
		} catch (Exception e) {
			ImageName = "BudgetEntrException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExceptionMsg = "Exception Happened While Adding the Budget Details to Product in Quote";
			LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
			LOGS.info(Thread.currentThread() + "," +"EnterBudget not processed");
			LOGS.error("Exception: ",e);
		}
		return "Pass";
	}

	public  String SearchProdfamily(String[] ProdName, String[] PlanName) throws Exception {
		try {

			LOGS.info(Thread.currentThread() +"SearchProdfamily method started");
			LOGS.info(Thread.currentThread() +"ProductName is :" + ProdName[i]);
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			driver.switchTo().window(newWindowHandle.get(1));
			String TabSelected = driver.getTitle();
			LOGS.info(Thread.currentThread() +"Tab Selected:" + TabSelected);
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

			Thread.sleep(15000);

			SLocator("AddProdBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Add Products Button");
			ExpRes = " Orderplacement should landed to Quote Line Editor As Rep is added in CPQ pilot Group ";
			ActRes = " Orderplacement landed to Quote Line Editor";
			Status = "Pass";
			ExportResults.exportTestResult(
					"Quoteline verification :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

			Thread.sleep(3000);
			// WebElement
			// ele=driver.findElement(By.xpath("//footer/paper-button/sb-i18n[text()='Suggest']"));
			WebElement ele = SLocator("SuggestBtn");
			((JavascriptExecutor) driver).executeScript("arguments[0].click();", ele);

			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(10000);
			SLocator("FilterBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Filter icon");

			if (ProdName[i].equalsIgnoreCase("Website - Next Gen")) {

				LOGS.info(Thread.currentThread() +"ProductName is" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Website - Next Gen");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				String ProductName = SLocatorDynamic("prodname1_" + PlanName + "_prodname2").getText();
				if (ProductName.contains("Website (Beta)")) {
					LOGS.info(Thread.currentThread() +"Validate Website (Beta) products appears");
					ExpRes = " Website (Beta) products should appears ";
					ActRes = " Website (Beta) displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Website(Beta) products Aappears," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				SLocatorDynamic("AddProductCBDynamic1_" + PlanName + "_AddProductCBDynamic2").click();
				LOGS.info(Thread.currentThread() +"Checked the Checkbox of productname");
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("SelectProdBtn"));
				LOGS.info(Thread.currentThread() +"scrolled Up");

				SLocator("SelectProdBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Select Button");
				Thread.sleep(3000);

				if ((SLocator("StandardWS").isDisplayed()) && (SLocator("StandardWSSB").isDisplayed())
						&& (SLocator("Prowebsite").isDisplayed()) && (SLocator("Prowebsite").isDisplayed())
						&& (SLocator("ProwebsiteSB").isDisplayed())) {
					LOGS.info(Thread.currentThread() +
							"StarterWebsite StandardWebsite StandardWebsiteSpreadBilling ProWebsite ProWebsitespreadBilling displayed");
					ExpRes = " Website Selections screen should appears with StarterWebsite StandardWebsite StandardWebsiteSpreadBilling ProWebsite ProWebsitespreadBilling ";
					ActRes = "StarterWebsite StandardWebsite StandardWebsiteSpreadBilling ProWebsite ProWebsitespreadBilling displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "WebsiteSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Website Selections screen," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}
			if (ProdName[i].equalsIgnoreCase("Search")) {

				LOGS.info(Thread.currentThread() +"ProductName is : " + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Search");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);

				if ((SLocator("ManagedSearch").isDisplayed()) && (SLocator("GuaranteedClicks").isDisplayed())) {
					LOGS.info(Thread.currentThread() +"Managed Search and Guarantee Clicks appears");
					ExpRes = " Managed Search and Guarantee Clicks sould appear ";
					ActRes = "Managed Search and Guarantee Clickss displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "SearchAlaCartePage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Search (A la carte) Option ," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			if (ProdName[i].equalsIgnoreCase("Social")) {
				LOGS.info(Thread.currentThread() +"ProductName is :" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Social");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				
				if ((SLocator("SocialAlaCarte").isDisplayed())) {
					LOGS.info(Thread.currentThread() +" Social (A la carte)  appears");
					ExpRes = "Social (a la carte) should appears ";
					ActRes = " Social (a la carte) displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Social (a la carte) Aappears," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}
			}

			// if(ProdName[i].equalsIgnoreCase("Listings Management")){
			if (ProdName[i].equalsIgnoreCase(OR.getProperty("01"))) {
				LOGS.info(Thread.currentThread() +"ProductName is :" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Listings Management");
				LOGS.info(Thread.currentThread() +"Listings Management Selected");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				if ((SLocator("ListingManagementAI").isDisplayed()) && (SLocator("ListingManagement").isDisplayed())) {
					LOGS.info(Thread.currentThread() +"Listings management Listings management Additional Instances appears");
					ExpRes = " Listings Management and Listings Management Additional Instances should appear ";
					ActRes = "Listing sManagement and Listings Management Additional Instances displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ListingManagement";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Listing Management Product ," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			// if(ProdName[i].equalsIgnoreCase("Mobile Boost (a la carte)")){
			if (ProdName[i].equalsIgnoreCase(OR.getProperty("05"))) {
				LOGS.info(Thread.currentThread() +"ProductName is" + ProductName);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Mobile");
				LOGS.info(Thread.currentThread() +"Mobile Selected");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				String ProductName = SLocatorDynamic("prodname1_" + PlanName + "_prodname2").getText();
				// if(ProductName.contains("Mobile Boost (a la carte)")){
				if (ProductName.contains(OR.getProperty("05"))) {
					LOGS.info(Thread.currentThread() +"Mobile Boost (a la carte)  appears");
					ExpRes = "Mobile Boost (a la carte) should appears ";
					ActRes = " Mobile Boost (a la carte) displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Mobile Boost (a la carte) Aappears," + ExpRes + ","
							+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			// if(ProdName[i].equalsIgnoreCase("Reviews")){
			if (ProdName[i].equalsIgnoreCase(OR.getProperty("07"))) {
				LOGS.info(Thread.currentThread() +"ProductName is" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Review");
				LOGS.info(Thread.currentThread() +"Reviews Selected");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				/*
				 * String ProductName=SLocatorDynamic("prodname1_" + PlanName[0] +
				 * "_prodname2").getText(); LOGS.info(Thread.currentThread() +"ProductName displayed:"+ProductName);
				 * 
				 * String ProductName1=SLocatorDynamic("prodname1_" + PlanName[1] +
				 * "_prodname2").getText(); LOGS.info(Thread.currentThread() +"ProductName displayed:"+ProductName1);
				 */

				if ((SLocator("ReviewsAI").isDisplayed()) && (SLocator("Reviews").isDisplayed())) {
					LOGS.info(Thread.currentThread() +"Reviews and Reviews - Additional Instances appears");
					ExpRes = "Reviews and Reviews - Additional Instances should appears ";
					ActRes = " Reviews and Reviews - Additional Instances displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Validate Reviews Aappears," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			if // (ProdName[i].equalsIgnoreCase("Raputation")){
			(ProdName[i].equalsIgnoreCase(OR.getProperty("06"))) {
				LOGS.info(Thread.currentThread() +"ProductName is :" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Reputation");
				LOGS.info(Thread.currentThread() +"Raputation Selected");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				
				if ((SLocator("RaputationAI").isDisplayed()) && (SLocator("Raputation").isDisplayed())) {
					LOGS.info(Thread.currentThread() +"Raputation and Raputation - Additional Instances appears");
					ExpRes = "Raputation and Raputation - Additional Instances should appears ";
					ActRes = " Raputation and Raputation - Additional Instances displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Raputation Products Aappears," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			if (ProdName[i].equalsIgnoreCase("Solution")) {
				LOGS.info(Thread.currentThread() +"ProductName is :" + ProdName[i]);
				Select ProdFamilyDropDown = new Select(driver.findElement(By.xpath(
						"//sb-filter-item[@label='Product Family']//div[@class='style-scope sb-field']/sb-select//child::select")));
				ProdFamilyDropDown.selectByVisibleText("Solution");
				LOGS.info(Thread.currentThread() +"Solution Selected");
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
				Thread.sleep(5000);
				
				if ((SLocator("SocialAS").isDisplayed()) && (SLocator("PresenceFoundation").isDisplayed())) {
					LOGS.info(Thread.currentThread() +"Presence Foundation and Social Advanced Solution appears");
					ExpRes = "Presence Foundation and Social Advanced Solution should appears ";
					ActRes = " Presence Foundation and Social Advanced Solution displayed";
					Status = "Pass";
					SearchProdFamilyRes = "Pass";
					ImageName = "ProductSelections";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Validate Raputation Products Aappears," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

		} catch (Exception e) {
			SearchProdFamilyRes = "Fail";
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Search productFamily not processed is");

		}
		return SearchProdFamilyRes;
	}
	
	
	public void AddSynchronizedMktngPackage(String[] Prods, String[] Plans) throws Exception
	{
		try {
			int i, j;
			LOGS.info(Thread.currentThread() +"Add Synchronized Package Details method started");
			/*
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
			//WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
			//wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			} */
			
			for (i = 0; i < Prods.length; i++) 
			{
			
				if (Prods[i].equalsIgnoreCase("Synchronized Marketing Solutions"))
				{
					int childNo=0;
					
					if(Plans[0].equalsIgnoreCase("Synchronized Marketing - Small"))
					{
						childNo = 1;							
					}
					else if(Plans[0].equalsIgnoreCase("Synchronized Marketing - Medium"))
					{
						childNo = 3;
					}
					else if(Plans[0].equalsIgnoreCase("Synchronized Marketing - Large"))
					{
						childNo = 5;
					}
										
					LOGS.info("childNo: "+childNo);
					System.out.println("childNo: "+childNo);
					LOGS.info("Plan Name: "+Plans[0]);
					
					WebElement shadowDomHostElement300 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last300 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement300);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement301 = last300.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last301 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement301);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement302 = last301.findElement(By.cssSelector("#bundles"));
					SearchContext last302 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement302);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement303 = last302.findElement(By.cssSelector("#features"));
					SearchContext last303 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement303);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement304 = last303.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last304 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement304);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement305 = last304.findElement(By.cssSelector(".--desktop"));
					SearchContext last305 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement305);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement306 = last305.findElement(By.cssSelector("#ot"));
					SearchContext last306 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement306);
					//Thread.sleep(1000);
										
					WebElement shadowDomHostElement307 = last306.findElement(By.cssSelector("div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
					
					LOGS.info("Dynamic Element: "+shadowDomHostElement307);
					SearchContext last307 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement307);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement308 = last307.findElement(By.cssSelector("#selection"));
					SearchContext last308 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement308);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement309 = last308.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last309 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement309);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement310 = last309.findElement(By.cssSelector("#radio"));
					SearchContext last310 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement310);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement311 = last310.findElement(By.cssSelector("#offRadio"));
					
					JavascriptExecutor jseRadioBtn = (JavascriptExecutor) driver;
					jseRadioBtn.executeScript("arguments[0].click();", shadowDomHostElement311);
				}
				
				 if( Plans[0].contains("Synchronized Marketing - Small")
					|| Plans[0].contains("Synchronized Marketing - Medium")
					|| Plans[0].contains("Synchronized Marketing - Large"))
				 {
					 	int sChildNo=0;
					 	int budgetAmnt = 0;
					 	String tierName = "";
						
						if(Plans[0].contains("Synchronized Marketing - Small"))
						{
							sChildNo=1;
							tierName = "Search Budget Max = $999";
							budgetAmnt = 700;
						}
						if(Plans[0].contains("Synchronized Marketing - Medium"))
						{
							sChildNo=3;
							tierName = "Search Budget Max =  $1599";
							budgetAmnt = 1100;
						}
						if(Plans[0].contains("Synchronized Marketing - Large"))
						{
							sChildNo=5;
							tierName = "Search Budget Max is Unlimited";
							budgetAmnt = 1700;
						}
						LOGS.info(Thread.currentThread() +"Plan Name is: "+Plans[0]);
						 //wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon")));
					     //wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon"))).click();
					     //SLocator("ConfIcon").click();
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
						
						WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
						SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
						SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector(".--desktop"));
						SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
						SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+sChildNo+")"));
						SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("sb-actions[class='--desktop']"));
						SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
						//Thread.sleep(1000);
						last8.findElement(By.cssSelector("#_0")).click();
						
											     
						driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(15));
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Synchronized Mrktng Solutions Products");
						Thread.sleep(3000);
						
//						System.out.println("ProductName: "+ProductName);
//						System.out.println("maxBudget: "+maxBudget);
//						
//						System.out.println("Plan Name: "+PlanName);
//						System.out.println("maxBudget: "+maxBudget);
						
						int addNum=0;
						
						for(int k=1; k<Plans.length; k++)
						{
						WebElement shadowDomHostElement400 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last400 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement400);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement401 = last400.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last401 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement401);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement402 = last401.findElement(By.cssSelector("#bundles"));
						SearchContext last402 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement402);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement403 = last402.findElement(By.cssSelector("#features"));
						SearchContext last403 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement403);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement404 = last403.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last404 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement404);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement405 = last404.findElement(By.cssSelector("sb-product-feature[name='Performance ("+tierName+")']"));
						SearchContext last405 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement405);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement406 = last405.findElement(By.cssSelector("#ot"));
						SearchContext last406 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement406);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement407 = last406.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(k+addNum)+")"));
						SearchContext last407 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement407);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement408 = last407.findElement(By.cssSelector("#row"));
						SearchContext last408 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement408);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement409 = last408.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
						SearchContext last409 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement409);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement410 = last409.findElement(By.cssSelector("#field"));
						SearchContext last410 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement410);
						//Thread.sleep(1000);
//						WebElement shadowDomHostElement411 = last410.findElement(By.cssSelector("sb-input[class='--desktop']"));
//						SearchContext last411 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement411);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement412 = last410.findElement(By.cssSelector("#blank"));

						//LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
						Actions actions = new Actions(driver);
						//actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName + "_BudgetTADynamic2"));
						actions.moveToElement(shadowDomHostElement412);
						actions.click();
						LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
						//actions.sendKeys(String.valueOf((BudgetToEnter/NoOfBudget)));
						actions.sendKeys(String.valueOf(budgetAmnt));
						actions.build().perform();
						
						addNum = addNum+1;
						}
						ImageName = "EnterBudget" + Plans[0];
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						
						LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + Plans[0]);
						Status = "Pass";
						//ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
						ExpRes = "Budget greater than Min budget should be saved with no error";
						ActRes = "Budget saved successfully with no error. Budget entered is :" + budgetAmnt;
						ExportResults.exportTestResult(
								"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						
						if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
						{
							LOGS.info(Thread.currentThread() +"Assistant Selection:  " + AssistantSelection);
							
							WebElement shadowDomHostElement418 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last418 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement418);
							
							WebElement shadowDomHostElement419 = last418.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last419 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement419);
							
							WebElement shadowDomHostElement420 = last419.findElement(By.cssSelector("#bundles"));
							SearchContext last420 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement420);
							
							WebElement shadowDomHostElement421 = last420.findElement(By.cssSelector("#features"));
							SearchContext last421 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement421);
							
							WebElement shadowDomHostElement422 = last421.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last422 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement422);
							
							WebElement shadowDomHostElement423 = last422.findElement(By.cssSelector("sb-product-feature[name='Foundation Presence']"));
							SearchContext last423 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement423);
							
							WebElement shadowDomHostElement424 = last423.findElement(By.cssSelector("#ot"));
							SearchContext last424 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement424);
							
							WebElement shadowDomHostElement425 = last424.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
							SearchContext last425 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement425);
							
							WebElement shadowDomHostElement426 = last425.findElement(By.cssSelector("#selection"));
							SearchContext last426 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement426);
							
							WebElement shadowDomHostElement427 = last426.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
							SearchContext last427 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement427);
							
							WebElement shadowDomHostElement428 = last427.findElement(By.cssSelector("#checkbox"));
							SearchContext last428 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement428);
						
							WebElement shadowDomHostElement429 = last428.findElement(By.cssSelector("#checkboxContainer"));
							
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement429));
							//last428.findElement(By.cssSelector("#checkboxContainer")).click();
							
							JavascriptExecutor jsAst = (JavascriptExecutor) driver;
							jsAst.executeScript("arguments[0].click();", shadowDomHostElement429);
							
							LOGS.info(Thread.currentThread() +"Unselected Assistant Check Box to go without Assistant product");
							
//							if(shadowDomHostElement429.isSelected())
//							{
//								shadowDomHostElement429.click();
//							}
							
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
							
						}
						
						
						if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
						{
							LOGS.info(Thread.currentThread() +"LR Selection:  " + LRSelection);
							
							WebElement shadowDomHostElement500 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last500 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement500);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement501 = last500.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last501 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement501);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement502 = last501.findElement(By.cssSelector("#bundles"));
							SearchContext last502 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement502);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement503 = last502.findElement(By.cssSelector("#features"));
							SearchContext last503 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement503);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement504 = last503.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last504 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement504);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement505 = last504.findElement(By.cssSelector("sb-product-feature[name='Foundation Presence']"));
							SearchContext last505 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement505);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement506 = last505.findElement(By.cssSelector("#ot"));
							SearchContext last506 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement506);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement507 = last506.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(7)"));
							SearchContext last507 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement507);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement508 = last507.findElement(By.cssSelector("#selection"));
							SearchContext last508 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement508);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement509 = last508.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
							SearchContext last509 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement509);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement510 = last509.findElement(By.cssSelector("#checkbox"));
							SearchContext last510 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement510);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement511 = last510.findElement(By.cssSelector("#checkboxContainer"));
							
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement511));
							//last428.findElement(By.cssSelector("#checkboxContainer")).click();
							
							JavascriptExecutor jsLR = (JavascriptExecutor) driver;
							jsLR.executeScript("arguments[0].click();", shadowDomHostElement511);
							
							LOGS.info(Thread.currentThread() +"Selected LR Check Box to go with LR product");
							
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
						}
						
						
						//save inside configure products page
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
						WebElement shadowDomHostElement413 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last413 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement413);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement414 = last413.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last414 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement414);
						//Thread.sleep(1000);
						last414.findElement(By.cssSelector("#pcSave")).click();
					 
						
						Thread.sleep(6000);
						//click on second save btn
						driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(50));
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
						WebElement shadowDomHostElement415 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last415 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement415);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement416 = last415.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last416 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement416);
						WebElement shadowDomHostElement417 = last416.findElement(By.cssSelector("#pcSave"));
						
						JavascriptExecutor jse = (JavascriptExecutor) driver ;
						jse.executeScript("arguments[0].click();", shadowDomHostElement417);
					 
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
				 }
					
			} //for loop
			
	
		}
			catch (Exception e) {
				ImageName = "PackageDetailsException";
				Status = "Fail";
				ExpRes = "Adding Package is successful";
				ActRes = "There is some exception - Unable to Add Product";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"There is some error adding package details");
				ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
				LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
				LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
				ExportResults.exportTestResult(
						"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		
	}
	
	
	//Add website package - shadow dom
	public void AddWebsitesPackage(String[] Prods, String[] Plans) throws Exception
	{
		try {
			
			int childNo=0;
			//int i, j;
			LOGS.info(Thread.currentThread() +"Add Website Package Details method started");
			
			/*
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
			//WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
			//wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			} */
			
			if(Plans[j].equalsIgnoreCase("Smart Site - Standard"))
			{
				childNo = 1;							
			}
			else if(Plans[j].equalsIgnoreCase("Smart Site - Standard (Spread Billing)"))
			{
				childNo = 3;
			}
			else if(Plans[j].equalsIgnoreCase("Smart Site - Pro"))
			{
				childNo = 5;
			}
			else if(Plans[j].equalsIgnoreCase("Smart Site - Pro (Spread Billing)"))
			{
				childNo = 7;
			}
			
			LOGS.info("childNo: "+childNo);
			System.out.println("childNo: "+childNo);
			LOGS.info("Plan Name: "+Plans[j]);
			
			WebElement shadowDomHostElement300 = driver.findElement(By.cssSelector("#sbPageContainer"));
			SearchContext last300 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement300);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement301 = last300.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
			SearchContext last301 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement301);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement302 = last301.findElement(By.cssSelector("#bundles"));
			SearchContext last302 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement302);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement303 = last302.findElement(By.cssSelector("#features"));
			SearchContext last303 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement303);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement304 = last303.findElement(By.cssSelector("sb-product-feature-list"));
			SearchContext last304 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement304);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement305 = last304.findElement(By.cssSelector(".--desktop"));
			SearchContext last305 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement305);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement306 = last305.findElement(By.cssSelector("#ot"));
			SearchContext last306 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement306);
			//Thread.sleep(1000);
								
			WebElement shadowDomHostElement307 = last306.findElement(By.cssSelector("div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
			
			LOGS.info("Dynamic Element: "+shadowDomHostElement307);
			SearchContext last307 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement307);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement308 = last307.findElement(By.cssSelector("#selection"));
			SearchContext last308 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement308);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement309 = last308.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
			SearchContext last309 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement309);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement310 = last309.findElement(By.cssSelector("#radio"));
			SearchContext last310 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement310);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement311 = last310.findElement(By.cssSelector("#offRadio"));
			
			JavascriptExecutor jseRadioBtn = (JavascriptExecutor) driver;
			jseRadioBtn.executeScript("arguments[0].click()", shadowDomHostElement311);
			
			
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
			
			ImageName = "WebSitePackage" + Plans[j];
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			//LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + Plans[j]);
			Status = "Pass";
			//ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
			ExpRes = "Website Package should be selected with no error";
			ActRes = "Website Package selected with no error :" + Plans[j];
			ExportResults.exportTestResult(
					"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			
			//clicking on Save Btn in Configure Products Page
			
			try {
									
				// ------------- Clicking on Save btn in Configure Products Page --------------------------------------------
				
				//Thread.sleep(2000);
				WebElement shadowDomHostElement412 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last412 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement412);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement413 = last412.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last413 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement413);
				Thread.sleep(1000);
				last413.findElement(By.cssSelector("#pcSave")).click();
				
				LOGS.info(Thread.currentThread() +"First Save btn clicked");
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"First Save btn click not required");
			}
			
	
		}
			catch (Exception e) {
				ImageName = "PackageDetailsException";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"There is some error adding package details");
				ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
				LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
				LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
			}
		
	}



// Add Mobile Boost - Shadow DOM
public void AddMobileBoostPackage(String[] Prods, String[] Plans) throws Exception
{
	try {
		
		int budgetAmntMB=50;
		//int i, j;
		LOGS.info(Thread.currentThread() +"Add Mobile Boost Package Details method started");
		
		try {
			LOGS.info("In Try Block..Waiting for Page to load Completely");
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
		//WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
		//wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
	
	}catch(Exception ex) {
		LOGS.info("Wait is over and the Pocess continues.");
		}
		
		WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
		SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
		SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
		SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
		SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
		SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector(".--desktop"));
		SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
		SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector("#row"));
		SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#row"));
		SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
		SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#field"));
		SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement11 = last10.findElement(By.cssSelector("#blank"));
		
		Actions actions = new Actions(driver);
		//actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName + "_BudgetTADynamic2"));
		actions.moveToElement(shadowDomHostElement11);
		actions.click();
		LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
		//actions.sendKeys(String.valueOf((BudgetToEnter/NoOfBudget)));
		actions.sendKeys(String.valueOf(budgetAmntMB));
		actions.build().perform();			
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
		
		ImageName = "EnterBudget" + PlanName;
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		
		LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + Plans[0]);
		Status = "Pass";
		//ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
		ExpRes = "Budget greater than Min budget should be saved with no error";
		ActRes = "Budget saved successfully with no error. Budget entered is :" + budgetAmntMB;
		ExportResults.exportTestResult(
				"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
		
		//clicking on Save Btn in Configure Products Page
		
		WebElement shadowDomHostElement12 = driver.findElement(By.cssSelector("#sbPageContainer"));
		SearchContext last12 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement12);
		Thread.sleep(1000);
		WebElement shadowDomHostElement13 = last12.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
		SearchContext last13 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement13);
		Thread.sleep(1000);
		last13.findElement(By.cssSelector("#pcSave")).click();
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		

	}
		catch (Exception e) {
			ImageName = "PackageDetailsException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"There is some error adding package details");
			ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
			LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
			LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
		}
	
}
	
	
	
	
	//Add Package method for Smart Sync Product
	
	public void AddSmartSyncPackage(String[] Prods, String[] Plans) throws Exception
	{
		try {
			int i, j;
			LOGS.info(Thread.currentThread() +"Add Smart Sync Package Details method started");
			
			/*
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
			WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			} */
			
			for (i = 0; i < Prods.length; i++) 
			{
			
				if (Prods[i].equalsIgnoreCase("Smart Synchronized Solutions"))
				{
					int childNo=0;
					
					if(Plans[0].equalsIgnoreCase("Smart Sync - Small"))
					{
						childNo = 1;							
					}
					else if(Plans[0].equalsIgnoreCase("Smart Sync - Medium"))
					{
						childNo = 3;
					}
					else if(Plans[0].equalsIgnoreCase("Smart Sync - Large"))
					{
						childNo = 5;
					}
										
					LOGS.info("childNo: "+childNo);
					System.out.println("childNo: "+childNo);
					LOGS.info("Plan Name: "+Plans[0]);
					
					WebElement shadowDomHostElement300 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last300 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement300);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement301 = last300.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last301 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement301);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement302 = last301.findElement(By.cssSelector("#bundles"));
					SearchContext last302 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement302);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement303 = last302.findElement(By.cssSelector("#features"));
					SearchContext last303 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement303);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement304 = last303.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last304 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement304);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement305 = last304.findElement(By.cssSelector(".--desktop"));
					SearchContext last305 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement305);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement306 = last305.findElement(By.cssSelector("#ot"));
					SearchContext last306 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement306);
					//Thread.sleep(1000);
										
					WebElement shadowDomHostElement307 = last306.findElement(By.cssSelector("div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
					
					LOGS.info("Dynamic Element: "+shadowDomHostElement307);
					SearchContext last307 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement307);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement308 = last307.findElement(By.cssSelector("#selection"));
					SearchContext last308 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement308);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement309 = last308.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last309 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement309);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement310 = last309.findElement(By.cssSelector("#radio"));
					SearchContext last310 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement310);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement311 = last310.findElement(By.cssSelector("#offRadio"));
					
					JavascriptExecutor jseRadioBtn = (JavascriptExecutor) driver;
					jseRadioBtn.executeScript("arguments[0].click()", shadowDomHostElement311);
				}
				
				 if( Plans[0].contains("Smart Sync - Small")
					|| Plans[0].contains("Smart Sync - Medium")
					|| Plans[0].contains("Smart Sync - Large"))
				 {
					 	int sChildNo=0;
					 	int budgetAmnt = 0;
					 	String tierName = "";
						
						if(Plans[0].contains("Smart Sync - Small"))
						{
							sChildNo=1;
							tierName = "Search Budget Max = $999";
							budgetAmnt = 700;
						}
						if(Plans[0].contains("Smart Sync - Medium"))
						{
							sChildNo=3;
							tierName = "Search Budget Max = $1599";
							budgetAmnt = 1100;
						}
						if(Plans[0].contains("Smart Sync - Large"))
						{
							sChildNo=5;
							tierName = "Search Budget Max is Unlimited";
							budgetAmnt = 1700;
						}
						LOGS.info(Thread.currentThread() +"Plan Name is: "+Plans[0]);
						 //wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon")));
					     //wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon"))).click();
					     //SLocator("ConfIcon").click();
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
						
						WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
						SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
						SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector(".--desktop"));
						SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
						SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+sChildNo+")"));
						SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("sb-actions[class='--desktop']"));
						SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
						//Thread.sleep(1000);
						last8.findElement(By.cssSelector("#_0")).click();
						
											     
						driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20));
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Smart Sync Solutions Products");
						Thread.sleep(3000);
						
//						System.out.println("ProductName: "+ProductName);
//						System.out.println("maxBudget: "+maxBudget);
//						
//						System.out.println("Plan Name: "+PlanName);
//						System.out.println("maxBudget: "+maxBudget);
						
						int addNum=0;
						
						for(int k=1; k<Plans.length; k++)
						{
						WebElement shadowDomHostElement400 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last400 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement400);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement401 = last400.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last401 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement401);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement402 = last401.findElement(By.cssSelector("#bundles"));
						SearchContext last402 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement402);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement403 = last402.findElement(By.cssSelector("#features"));
						SearchContext last403 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement403);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement404 = last403.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last404 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement404);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement405 = last404.findElement(By.cssSelector("sb-product-feature[name='Performance ("+tierName+")']"));
						SearchContext last405 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement405);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement406 = last405.findElement(By.cssSelector("#ot"));
						SearchContext last406 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement406);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement407 = last406.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(k+addNum)+")"));
						SearchContext last407 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement407);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement408 = last407.findElement(By.cssSelector("#row"));
						SearchContext last408 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement408);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement409 = last408.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
						SearchContext last409 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement409);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement410 = last409.findElement(By.cssSelector("#field"));
						SearchContext last410 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement410);
						//Thread.sleep(1000);
//						WebElement shadowDomHostElement411 = last410.findElement(By.cssSelector("sb-input[class='--desktop']"));
//						SearchContext last411 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement411);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement412 = last410.findElement(By.cssSelector("#me"));

						//LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
						Actions actions = new Actions(driver);
						//actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName + "_BudgetTADynamic2"));
						actions.moveToElement(shadowDomHostElement412);
						actions.click();
						LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
						//actions.sendKeys(String.valueOf((BudgetToEnter/NoOfBudget)));
						actions.sendKeys(String.valueOf(budgetAmnt));
						actions.build().perform();
						
						addNum = addNum+1;
						}
						ImageName = "EnterBudget" + Plans[0];
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						
						LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + Plans[0]);
						Status = "Pass";
						//ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
						ExpRes = "Budget greater than Min budget should be saved with no error";
						ActRes = "Budget saved successfully with no error. Budget entered is :" + budgetAmnt;
						ExportResults.exportTestResult(
								"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						
						if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
						{
							LOGS.info(Thread.currentThread() +"Assistant Selection:  " + AssistantSelection);
							
							WebElement shadowDomHostElement418 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last418 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement418);
							
							WebElement shadowDomHostElement419 = last418.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last419 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement419);
							
							WebElement shadowDomHostElement420 = last419.findElement(By.cssSelector("#bundles"));
							SearchContext last420 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement420);
							
							WebElement shadowDomHostElement421 = last420.findElement(By.cssSelector("#features"));
							SearchContext last421 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement421);
							
							WebElement shadowDomHostElement422 = last421.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last422 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement422);
							
							WebElement shadowDomHostElement423 = last422.findElement(By.cssSelector("sb-product-feature[name='Smart Presence']"));
							SearchContext last423 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement423);
							
							WebElement shadowDomHostElement424 = last423.findElement(By.cssSelector("#ot"));
							SearchContext last424 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement424);
							
							WebElement shadowDomHostElement425 = last424.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(3)"));
							SearchContext last425 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement425);
							
							WebElement shadowDomHostElement426 = last425.findElement(By.cssSelector("#selection"));
							SearchContext last426 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement426);
							
							WebElement shadowDomHostElement427 = last426.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
							SearchContext last427 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement427);
							
							WebElement shadowDomHostElement428 = last427.findElement(By.cssSelector("#checkbox"));
							SearchContext last428 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement428);
						
							WebElement shadowDomHostElement429 = last428.findElement(By.cssSelector("#checkboxContainer"));
							
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement429));
							//last428.findElement(By.cssSelector("#checkboxContainer")).click();
							
							JavascriptExecutor jsAst = (JavascriptExecutor) driver;
							jsAst.executeScript("arguments[0].click();", shadowDomHostElement429);
							
							LOGS.info(Thread.currentThread() +"Unselected Assistant Check Box to go without Assistant product");
							
//							if(shadowDomHostElement429.isSelected())
//							{
//								shadowDomHostElement429.click();
//							}
							
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
							
						}
						
						
						if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
						{
							LOGS.info(Thread.currentThread() +"LR Selection:  " + LRSelection);
							
							WebElement shadowDomHostElement500 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last500 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement500);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement501 = last500.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last501 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement501);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement502 = last501.findElement(By.cssSelector("#bundles"));
							SearchContext last502 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement502);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement503 = last502.findElement(By.cssSelector("#features"));
							SearchContext last503 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement503);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement504 = last503.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last504 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement504);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement505 = last504.findElement(By.cssSelector("sb-product-feature[name='Smart Presence']"));
							SearchContext last505 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement505);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement506 = last505.findElement(By.cssSelector("#ot"));
							SearchContext last506 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement506);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement507 = last506.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(9)"));
							SearchContext last507 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement507);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement508 = last507.findElement(By.cssSelector("#selection"));
							SearchContext last508 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement508);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement509 = last508.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
							SearchContext last509 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement509);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement510 = last509.findElement(By.cssSelector("#checkbox"));
							SearchContext last510 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement510);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement511 = last510.findElement(By.cssSelector("#checkboxContainer"));
							
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement511));
							//last428.findElement(By.cssSelector("#checkboxContainer")).click();
							
							JavascriptExecutor jsLR = (JavascriptExecutor) driver;
							jsLR.executeScript("arguments[0].click();", shadowDomHostElement511);
														
							LOGS.info(Thread.currentThread() +"Selected LR Check Box to go with LR product");
							
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
						}
						
						
						//save inside configure products page
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
						WebElement shadowDomHostElement413 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last413 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement413);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement414 = last413.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last414 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement414);
						//Thread.sleep(1000);
						last414.findElement(By.cssSelector("#pcSave")).click();
					 
						
						Thread.sleep(6000);
						//click on second save btn
						driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
						WebElement shadowDomHostElement415 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last415 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement415);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement416 = last415.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last416 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement416);
						WebElement shadowDomHostElement417 = last416.findElement(By.cssSelector("#pcSave"));
						
						JavascriptExecutor jse = (JavascriptExecutor) driver ;
						jse.executeScript("arguments[0].click();", shadowDomHostElement417);
					 
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
				 }
								
			
			} //for loop
			
	
		}
			catch (Exception e) {
				ImageName = "PackageDetailsException";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info(Thread.currentThread() +"There is some error adding package details");
				ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
				LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
				LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
			}
		
	}
	
	// End of Add Package method for Smart Sync Product
	// Add package method started for Online Foundation solutions
	
	public void AddSamialacartePackage(String[] Prods, String[] Plans) throws Exception
	{
		
		try {
		int i, j;
	//	LOGS.info(Thread.currentThread() +"Add Sami Product Details method started");
		System.out.println("Add Sami Product Details method started");
		
		try {
	//		LOGS.info("In Try Block..Waiting for Page to load Completely");
			System.out.println("In Try Block..Waiting for Page to load Completely");
			/*driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));*/ //group commented these lines as xpath won't work here
	
	}catch(Exception ex) {
		LOGS.info("Wait is over and the Pocess continues.");
		}		
		
		//This Element is inside 7 nested shadow DOM.
		
		if( Plans[0].contains("Display (a la carte)")
				|| Plans[0].contains("Search (a la carte)")
				|| Plans[0].contains("Social (a la carte)")
				|| Plans[0].contains("Search - Guaranteed Clicks"))
			 {
				 	
				 	int budgetAmnt = 0;
				 	String tierName = "";
					
					if(Plans[0].contains("Display (a la carte)"))
					{
						
						tierName = "Search Budget Max is Unlimited";
						budgetAmnt = 450;
					}
					if(Plans[0].contains("Search (a la carte)"))
					{
						
						tierName = "Search Budget Max is Unlimited";
						budgetAmnt = 500;
					}
					if(Plans[0].contains("Social (a la carte)"))
					{
						
						tierName = "Search Budget Max is Unlimited";
						budgetAmnt = 400;
					}
					if(Plans[0].contains("Search - Guaranteed Clicks"))
					{
						
						//This Element is inside 9 nested shadow DOM.
						String cssSelectorForHost1 = "#sbPageContainer";
						String cssSelectorForHost2 = "sb-product-config[class='--desktop']";
						String cssSelectorForHost3 = "#bundles";
						String cssSelectorForHost4 = "#features";
						String cssSelectorForHost5 = "#globalConfigAttributes";
						String cssSelectorForHost6 = "#firstColumn";
						String cssSelectorForHost7 = "sb-attribute-item[class='--desktop']";
						String cssSelectorForHost8 = "#field";
						String cssSelectorForHost9 = "#picklist";
						//Thread.sleep(1000);
						WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
						SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
						SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("#globalConfigAttributes"));
						SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("#firstColumn"));
						SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("sb-attribute-item[class='--desktop']"));
						SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector("#field"));
						SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#picklist"));
						SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
						Thread.sleep(4000);
						last8.findElement(By.cssSelector("select:nth-child(6) > option:nth-child(3)")).click();
						
						System.out.println("Got Number of Clicks");
						
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20)); // 30 seconds wait time
						
						Thread.sleep(3000);
						WebElement shadowDomHostElement23 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement24 = last23.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement24);
						Thread.sleep(2000);
						last24.findElement(By.cssSelector("sb-page-header:nth-child(15) > div:nth-child(5) > paper-button:nth-child(3) > sb-i18n:nth-child(1)")).click();
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); //50 seconds wait time
						
						System.out.print("Clicked on Save Button");
						
						
					}
				//	LOGS.info(Thread.currentThread() +"Plan Name is: "+PlanName);
					System.out.println("Plan Name is: " + PlanName);
			  
		
					//This Element is inside 12 nested shadow DOM.		
					String cssSelectorForHost10 = "sb-product-feature-list";
					String cssSelectorForHost11 = ".--desktop";
					String cssSelectorForHost12 = "#ot";
					String cssSelectorForHost13 = "#row";
					String cssSelectorForHost14 = "#row";
					String cssSelectorForHost15 = "sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']";
					
					//Thread.sleep(1000);
					WebElement shadowDomHostElement9 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement11 = last10.findElement(By.cssSelector("#bundles"));
					SearchContext last11 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement11);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement12 = last11.findElement(By.cssSelector("#features"));
					SearchContext last12 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement12);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement13 = last12.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last13 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement13);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement14 = last13.findElement(By.cssSelector(".--desktop"));
					SearchContext last14 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement14);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement15 = last14.findElement(By.cssSelector("#ot"));
					SearchContext last15 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement15);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement16 = last15.findElement(By.cssSelector("#row"));
					SearchContext last16 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement16);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement17 = last16.findElement(By.cssSelector("#row"));
					SearchContext last17 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement17);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement18 = last17.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
					SearchContext last18 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement18);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement19 = last18.findElement(By.cssSelector("#field"));
					SearchContext last19 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement19);
					Thread.sleep(1000);
					WebElement shadowDomHostElement20 = last19.findElement(By.cssSelector("#formatted"));
					
		
		            Actions actions = new Actions(driver);
		
		            actions.moveToElement(shadowDomHostElement20);
	             	actions.click();
	
		            System.out.print("Clicked on Budget Text area");
		            actions.sendKeys(String.valueOf(budgetAmnt));
		            actions.build().perform();
		            
		            System.out.print("Budget Entered");
		
		ImageName = "EnterBudget" + PlanName;
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		
		LOGS.info(Thread.currentThread() +"Entered Budget for the plan " + PlanName);
		Status = "Pass";
		//ExpRes = "Budget greater than Min budget " + MinBudget + " should be saved with no error";
		ExpRes = "Budget greater than Min budget should be saved with no error";
		ActRes = "Budget saved successfully with no error. Budget entered is :" + BudgetToEnter;
		ExportResults.exportTestResult(
				"Entered Budget amount," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
		
		Thread.sleep(5000); //10 seconds wait time
		//click on second save btn
		//driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		
		////Save Button
		//Thread.sleep(1000);
		WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
		SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
		//Thread.sleep(1000);
		WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
		SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
		Thread.sleep(1000);
		last1.findElement(By.cssSelector("sb-page-header:nth-child(15) > div:nth-child(5) > paper-button:nth-child(3) > sb-i18n:nth-child(1)")).click();
		//driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
		
		System.out.print("Clicked on Save Button");
		
	 }
		}catch (Exception e) {
			ImageName = "PackageDetailsException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"There is some error adding package details");
			ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
			LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
			LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
		}
}
	
public  void AddFoundationPackage(String[] Prods, String[] Plans) throws Exception {
		
		try {
			int i, j;
			LOGS.info(Thread.currentThread() +"AddFoundationPackage method started");
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely - 1");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
			WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
			
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Process continues in AddFoundationPackage Method - 1");
			}
			if(Plans[0].contains("Online Foundation Solution")) {
			
			/// Online Foundation package
			LOGS.info("I have entered loop for online foundation solution product");
			Thread.sleep(1000);
			WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
			SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
			SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
			SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
			SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
			SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='Online Foundation without Search']"));
			SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
			SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(3)"));
			SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
			SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
			SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#radio"));
			SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
			Thread.sleep(2000);
			last10.findElement(By.cssSelector("#offRadio"));
			last10.findElement(By.cssSelector("#offRadio")).click();
			LOGS.info("I am clicking radio button for online foundation solutions");
			
			
			
			//sabarish piece for Clicking Config icon
			//Thread.sleep(1000);
			WebElement shadowDomHostElement20 = driver.findElement(By.cssSelector("#sbPageContainer"));
			SearchContext last20 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement20);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement21 = last20.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
			SearchContext last21 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement21);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement22 = last21.findElement(By.cssSelector("#bundles"));
			SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement23 = last22.findElement(By.cssSelector("#features"));
			SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement24 = last23.findElement(By.cssSelector("sb-product-feature-list"));
			SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement24);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement25 = last24.findElement(By.cssSelector("sb-product-feature[name='Online Foundation without Search']"));
			SearchContext last25 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement26 = last25.findElement(By.cssSelector("#ot"));
			SearchContext last26 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement27 = last26.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(3)"));
			SearchContext last27 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement27);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement28 = last27.findElement(By.cssSelector("sb-actions[class='--desktop']"));
			SearchContext last28 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement28);
			Thread.sleep(2000);
			//last28.findElement(By.cssSelector("#_0"));
			last28.findElement(By.cssSelector("#_0")).click();
	
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
				LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products for Online Foundation Solution");
				
				
				if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
				{		
				Thread.sleep(3000);
				WebElement shadowDomHostElement510 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last510 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement510);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement511 = last510.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last511 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement511);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement512 = last511.findElement(By.cssSelector("#bundles"));
				SearchContext last512 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement512);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement513 = last512.findElement(By.cssSelector("#features"));
				SearchContext last513 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement513);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement514 = last513.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last514 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement514);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement515 = last514.findElement(By.cssSelector(".--desktop"));
				SearchContext last515 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement515);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement516 = last515.findElement(By.cssSelector("#ot"));
				SearchContext last516 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement516);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement517 = last516.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(3)"));
				SearchContext last517 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement517);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement518 = last517.findElement(By.cssSelector("#selection"));
				SearchContext last518 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement518);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement519 = last518.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last519 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement519);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement520 = last519.findElement(By.cssSelector("#checkbox"));
				SearchContext last520 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement520);
				Thread.sleep(2000);
				last520.findElement(By.cssSelector("#checkboxContainer"));
				last520.findElement(By.cssSelector("#checkboxContainer")).click();
				LOGS.info("I have clicked Ast checkbox for unchecking for Online foundation solution");
			}
				if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
					String LR = "Local Ranking";
			
				Thread.sleep(3000);
				WebElement shadowDomHostElement610 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last610 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement610);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement611 = last610.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last611 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement611);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement612 = last611.findElement(By.cssSelector("#bundles"));
				SearchContext last612 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement612);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement613 = last612.findElement(By.cssSelector("#features"));
				SearchContext last613 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement613);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement614 = last613.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last614 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement614);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement615 = last614.findElement(By.cssSelector(".--desktop"));
				SearchContext last615 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement615);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement616 = last615.findElement(By.cssSelector("#ot"));
				SearchContext last616 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement616);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement617 = last616.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
				SearchContext last617 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement617);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement618 = last617.findElement(By.cssSelector("#selection"));
				SearchContext last618 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement618);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement619 = last618.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last619 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement619);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement620 = last619.findElement(By.cssSelector("#checkbox"));
				SearchContext last620 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement620);
				Thread.sleep(2000);
				last620.findElement(By.cssSelector("#checkboxContainer"));
				last620.findElement(By.cssSelector("#checkboxContainer")).click();
				LOGS.info("I have clicked LR for Online foundation solution");
				}
				
				/*LOGS.info("Entering addon method from addfoundn- 1");
				AddLRAstaddons(Prods, Plans);
				LOGS.info("Entering addon method from addfoundn- 2");*/
				System.out.println("going to click on save button in config page");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
				//SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#pcSave\")");
				Thread.sleep(2000);
				LOGS.info("Clicking on save button for first");
				excutor.executeScript("arguments[0].click();", savebtn);
				LOGS.info("Clicked on save button for first");
				Thread.sleep(2000);
				WebElement shadowDomHostElement110 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last110 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement110);
				Thread.sleep(1000);
				WebElement shadowDomHostElement111 = last110.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last111 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement111);
				
				last111.findElement(By.cssSelector("#pcSave")).click();
				System.out.println("going to click on pc save button twice in config page");
				Thread.sleep(4000);
				LOGS.info("Clicking on save button for second");
				LOGS.info("Clicking on save button for second");
				excutor.executeScript("arguments[0].click();", savebtn);
				LOGS.info("Clicked on save button twice");
				
				
		}
			
			
				/// Foundation+ 1 ad package
			if(Plans[0].contains("Foundation + 1 Ad Campaign")) {
				
				int childAd=0;
				int BudgetAdAmt=0;
				//String Display,Social;
				if(Plans[1].contains("Display")){
					childAd=1;
					//Display="";
					BudgetAdAmt=700;
					LOGS.info("This is my pro selected " + Plans[1] );
				}
				if(Plans[1].contains("Social")){
					childAd=3;
					//Social="";
					BudgetAdAmt=700;
					LOGS.info("This is my pro selected " + Plans[1] );
				}
				if(Plans[1].contains("Managed Search")){
					//childAd=1;
					//Display="";
					BudgetAdAmt=700;
					LOGS.info("This is my pro selected " + Plans[1] );
				}
				//Thread.sleep(1000);
				WebElement shadowDomHostElement30 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last30 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement30);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement31 = last30.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last31 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement31);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement32 = last31.findElement(By.cssSelector("#bundles"));
				SearchContext last32 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement32);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement33 = last32.findElement(By.cssSelector("#features"));
				SearchContext last33 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement33);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement34 = last33.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last34 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement34);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement35 = last34.findElement(By.cssSelector("sb-product-feature[name='Online Foundation without Search']"));
				SearchContext last35 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement35);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement36 = last35.findElement(By.cssSelector("#ot"));
				SearchContext last36 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement36);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement37 = last36.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
				SearchContext last37 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement37);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement38 = last37.findElement(By.cssSelector("#selection"));
				SearchContext last38 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement38);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement39 = last38.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last39 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement39);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement40 = last39.findElement(By.cssSelector("#radio"));
				SearchContext last40 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement40);
				Thread.sleep(2000);
				last40.findElement(By.cssSelector("#offRadio"));
				last40.findElement(By.cssSelector("#offRadio")).click();
				LOGS.info("I have selected radio button for the product");
				
				Thread.sleep(2000);
				
				//Thread.sleep(1000);
				WebElement shadowDomHostElement20 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last20 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement20);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement21 = last20.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last21 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement21);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement22 = last21.findElement(By.cssSelector("#bundles"));
				SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement23 = last22.findElement(By.cssSelector("#features"));
				SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement24 = last23.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement24);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement25 = last24.findElement(By.cssSelector("sb-product-feature[name='Online Foundation without Search']"));
				SearchContext last25 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement26 = last25.findElement(By.cssSelector("#ot"));
				SearchContext last26 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement27 = last26.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
				SearchContext last27 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement27);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement28 = last27.findElement(By.cssSelector("sb-actions[class='--desktop']"));
				SearchContext last28 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement28);
				Thread.sleep(2000);
				//last28.findElement(By.cssSelector("#_0"));
				last28.findElement(By.cssSelector("#_0")).click();
				
				LOGS.info("I have clicked the configure wrench");
				LOGS.info("This is my plans " + Plans[1]);
				////////////////
				
				Thread.sleep(3000);
				if(Plans[1].trim().equalsIgnoreCase("Managed Search") &&
						LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
					String LR = "Local Ranking";
					LOGS.info("I have entered the search and LR loop");
					//Thread.sleep(1000);
					WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
					SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
					SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
					SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
					SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(7)"));
					SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
					SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#checkbox"));
					SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
					Thread.sleep(2000);
					WebElement checkBoxcontainer = last10.findElement(By.cssSelector("#checkboxContainer"));
					LOGS.info("I have clicked first for LR when my prod is Search with LR");
					
					 wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer));
					excutor.executeScript("arguments[0].click();", checkBoxcontainer);
				
					Thread.sleep(3000);
					WebElement shadowDomHostElement510 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last510 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement510);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement511 = last510.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last511 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement511);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement512 = last511.findElement(By.cssSelector("#bundles"));
					SearchContext last512 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement512);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement513 = last512.findElement(By.cssSelector("#features"));
					SearchContext last513 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement513);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement514 = last513.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last514 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement514);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement515 = last514.findElement(By.cssSelector("sb-product-feature[name='Choose One Performance Product Display or Social or Search (Search Max = $999)']"));
					SearchContext last515 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement515);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement516 = last515.findElement(By.cssSelector("#ot"));
					SearchContext last516 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement516);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement517 = last516.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
					SearchContext last517 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement517);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement518 = last517.findElement(By.cssSelector("#selection"));
					SearchContext last518 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement518);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement519 = last518.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last519 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement519);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement520 = last519.findElement(By.cssSelector("#checkbox"));
					SearchContext last520 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement520);
					Thread.sleep(2000);
					WebElement checkBoxcontainer1 = last520.findElement(By.cssSelector("#checkboxContainer"));
					LOGS.info("I have clicked the checkbox for Managed Search");
					wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer1));
					excutor.executeScript("arguments[0].click();", checkBoxcontainer1);
	
					//Thread.sleep(1000);
					WebElement shadowDomHostElement530 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last530 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement530);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement531 = last530.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last531 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement531);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement532 = last531.findElement(By.cssSelector("#bundles"));
					SearchContext last532 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement532);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement533 = last532.findElement(By.cssSelector("#features"));
					SearchContext last533 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement533);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement534 = last533.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last534 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement534);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement535 = last534.findElement(By.cssSelector("sb-product-feature[name='Choose One Performance Product Display or Social or Search (Search Max = $999)']"));
					SearchContext last535 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement535);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement536 = last535.findElement(By.cssSelector("#ot"));
					SearchContext last536 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement536);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement537 = last536.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
					SearchContext last537 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement537);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement538 = last537.findElement(By.cssSelector("#row"));
					SearchContext last538 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement538);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement539 = last538.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
					SearchContext last539 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement539);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement540 = last539.findElement(By.cssSelector("#field"));
					SearchContext last540 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement540);
					Thread.sleep(2000);
					WebElement AdBudget= last540.findElement(By.cssSelector("#me"));
					LOGS.info("I have given budget for Managed Search");
					Thread.sleep(2000);
					//budget entering for 1 ad campaign
					
					 Actions actions2 = new Actions(driver);
						actions2.moveToElement(AdBudget);
						actions2.click();
						actions2.sendKeys(String.valueOf(BudgetAdAmt));
						actions2.build().perform();
						
						LOGS.info("I have given budget for 1 ad line " + BudgetAdAmt);
						
						SearchContext Rand = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#fb\")");
						Thread.sleep(3000);
						excutor.executeScript("arguments[0].click();", Rand);
						LOGS.info("hello1");
						Thread.sleep(2000);
						excutor.executeScript("arguments[0].click();", Rand);
						LOGS.info("hello2");
					
					if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
					{		
					Thread.sleep(3000);
					WebElement shadowDomHostElement90 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last90 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement90);
					Thread.sleep(1000);
					WebElement shadowDomHostElement91 = last90.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last91 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement91);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement92 = last91.findElement(By.cssSelector("#bundles"));
					SearchContext last92 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement92);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement93 = last92.findElement(By.cssSelector("#features"));
					SearchContext last93 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement93);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement94 = last93.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last94 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement94);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement95 = last94.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
					SearchContext last95 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement95);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement96 = last95.findElement(By.cssSelector("#ot"));
					SearchContext last96 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement96);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement97 = last96.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
					SearchContext last97 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement97);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement98 = last97.findElement(By.cssSelector("#selection"));
					SearchContext last98 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement98);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement99 = last98.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last99 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement99);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement109 = last99.findElement(By.cssSelector("#checkbox"));
					SearchContext last109 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement109);
					Thread.sleep(2000);
					WebElement checkBoxcontainer2= last109.findElement(By.cssSelector("#checkboxContainer"));
					
					wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer2));
					excutor.executeScript("arguments[0].click();", checkBoxcontainer2);
					LOGS.info("I have clicked Ast checkbox for unchecking for foundation camp - display or social");
				}
					
					
						
						
					
					try {
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
						LOGS.info("Waiting for the Plan Checkbox to be Checked - 11");
						WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(8));
						
						//wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
					
					}catch(Exception ex) {
						LOGS.info("Wait is over and the Pocess continues. - 11");
						}
					
					System.out.println("going to click on save button in config page at above display and social");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
					//SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#pcSave\")");
					Thread.sleep(3000);
					excutor.executeScript("arguments[0].click();", savebtn);
					Thread.sleep(3000);
					
					WebElement shadowDomHostElement110 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last110 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement110);
					Thread.sleep(1000);
					WebElement shadowDomHostElement111 = last110.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last111 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement111);
					
					last111.findElement(By.cssSelector("#pcSave")).click();
					System.out.println("going to click on pc save button twice in config page");
					Thread.sleep(3000);
					excutor.executeScript("arguments[0].click();", savebtn);
					System.out.println("going to click on save button twice in config page");
					//wait.until(ExpectedConditions.elementToBeClickable(savebtn));
					excutor.executeScript("arguments[0].click();", savebtn);
					LOGS.info("Clicked on save button twice");
					
					
				
					LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
				}
				else if(Plans[1].trim().equalsIgnoreCase("Display") ||Plans[1].trim().equalsIgnoreCase("Social")){
				//else{
					//LOGS.info("I have entered else loop for the Display and Social");
					LOGS.info("I have entered the Display and Social");
					//Thread.sleep(1000);
					WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
					SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
					SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='Choose One Performance Product Display or Social or Search (Search Max = $999)']"));
					SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
					SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
					//Thread.sleep(1000);
					LOGS.info("I have crossed the checkbox selection " + childAd);
					WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childAd+")"));
					SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
					//Thread.sleep(1000);
					/*WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(1)"));
					SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
					Thread.sleep(1000);*/
					WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
					SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#checkbox"));
					SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
					Thread.sleep(2000);
					WebElement checkBoxcontainer4 = last10.findElement(By.cssSelector("#checkboxContainer"));
					//last10.findElement(By.cssSelector("#checkboxContainer")).click();
					
					wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer4));
					excutor.executeScript("arguments[0].click();", checkBoxcontainer4);
					
					LOGS.info("I have clicked on Checkbox");
					
					
					//Thread.sleep(1000);
					WebElement shadowDomHostElement410 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last410 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement410);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement411 = last410.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last411 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement411);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement412 = last411.findElement(By.cssSelector("#bundles"));
					SearchContext last412 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement412);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement413 = last412.findElement(By.cssSelector("#features"));
					SearchContext last413 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement413);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement414 = last413.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last414 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement414);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement415 = last414.findElement(By.cssSelector("sb-product-feature[name='Choose One Performance Product Display or Social or Search (Search Max = $999)']"));
					SearchContext last415 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement415);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement416 = last415.findElement(By.cssSelector("#ot"));
					SearchContext last416 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement416);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement417 = last416.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childAd+")"));
					SearchContext last417 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement417);
					//Thread.sleep(1000);
					LOGS.info("I have crossed that budget childad " + childAd);
					WebElement shadowDomHostElement418 = last417.findElement(By.cssSelector("#row"));
					SearchContext last418 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement418);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement419 = last418.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
					SearchContext last419 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement419);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement420 = last419.findElement(By.cssSelector("#field"));
					SearchContext last420 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement420);
					//Thread.sleep(1000);
					WebElement AdBudget = last420.findElement(By.cssSelector("#me"));
					
					Thread.sleep(3000);
					//budget entering for 1 ad campaign
					
					 Actions actions2 = new Actions(driver);
						actions2.moveToElement(AdBudget);
						actions2.click();
						actions2.sendKeys(String.valueOf(BudgetAdAmt));
						actions2.build().perform();
						
						
						LOGS.info("I have given budget for 1 ad line " + BudgetAdAmt);
						
						SearchContext Rand = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#fb\")");
						Thread.sleep(3000);
						excutor.executeScript("arguments[0].click();", Rand);
						LOGS.info("hello1");
						Thread.sleep(2000);
						excutor.executeScript("arguments[0].click();", Rand);
						LOGS.info("hello2");
				try {
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
					LOGS.info("Waiting for the Plan Checkbox to be Checked - 12");
					WebDriverWait wait1 = new WebDriverWait(driver, 3);
					
					//wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
				
				}catch(Exception ex) {
					LOGS.info("Wait is over and the Pocess continues. - 12");
					}

				
				if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
				{		
					Thread.sleep(2000);
					WebElement shadowDomHostElement70 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last70 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement70);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement71 = last70.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last71 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement71);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement72 = last71.findElement(By.cssSelector("#bundles"));
					SearchContext last72 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement72);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement73 = last72.findElement(By.cssSelector("#features"));
					SearchContext last73 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement73);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement74 = last73.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last74 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement74);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement75 = last74.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
					SearchContext last75 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement75);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement76 = last75.findElement(By.cssSelector("#ot"));
					SearchContext last76 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement76);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement77 = last76.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
					SearchContext last77 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement77);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement78 = last77.findElement(By.cssSelector("#selection"));
					SearchContext last78 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement78);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement79 = last78.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last79 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement79);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement780 = last79.findElement(By.cssSelector("#checkbox"));
					SearchContext last780 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement780);
					Thread.sleep(2000);
					WebElement checkBoxcontainer3 = last780.findElement(By.cssSelector("#checkboxContainer"));
					//last780.findElement(By.cssSelector("#checkboxContainer")).click();
					
					wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer3));
					excutor.executeScript("arguments[0].click();", checkBoxcontainer3);
					
				LOGS.info("I have clicked Ast checkbox for unchecking for foundation camp");
			}
				if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
					String LR = "Local Ranking";
			
				Thread.sleep(3000);
				WebElement shadowDomHostElement400 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last400 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement400);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement41 = last400.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last41 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement41);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement42 = last41.findElement(By.cssSelector("#bundles"));
				SearchContext last42 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement42);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement43 = last42.findElement(By.cssSelector("#features"));
				SearchContext last43 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement43);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement44 = last43.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last44 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement44);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement45 = last44.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
				SearchContext last45 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement45);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement46 = last45.findElement(By.cssSelector("#ot"));
				SearchContext last46 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement46);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement47 = last46.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(7)"));
				SearchContext last47 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement47);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement48 = last47.findElement(By.cssSelector("#selection"));
				SearchContext last48 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement48);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement49 = last48.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last49 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement49);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement490 = last49.findElement(By.cssSelector("#checkbox"));
				SearchContext last490 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement490);
				Thread.sleep(2000);
				WebElement checkBoxcontainer5 = last490.findElement(By.cssSelector("#checkboxContainer"));

				wait.until(ExpectedConditions.elementToBeClickable(checkBoxcontainer5));
				excutor.executeScript("arguments[0].click();", checkBoxcontainer5);
				
				LOGS.info("I have clicked LR for foundation camp");
				}

              }
				System.out.println("going to click on save button in config page at end of display & Social method");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
				//SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#pcSave\")");
				Thread.sleep(3000);
				excutor.executeScript("arguments[0].click();", savebtn);
				Thread.sleep(10000);
				//wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(savebtn));
				
				
				Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
				//Thread.sleep(1000);
				last1.findElement(By.cssSelector("#pcSave")).click();
				System.out.println("going to click on pc save button twice in config page");
				Thread.sleep(3000);
				//excutor.executeScript("arguments[0].click();", savebtn);
				System.out.println("going to click on save button twice in config page");
                LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products");
    
		
			}
                
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
				/*try {
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
					LOGS.info("Waiting for the configure  - 2");
					WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(9));
					
				}catch(Exception ex) {
					LOGS.info("Wait is over and the Process continues - 2");
					}*/
				
				
				
//				if(!Plans[0].equalsIgnoreCase("Foundation + 1 Ad Campaign + Display")|| !Plans[0].equalsIgnoreCase("Online Foundation Solution") || (!Plans[0].equalsIgnoreCase("Foundation + 1 Ad Campaign + Social"))) {
					
      if(Plans[0].equalsIgnoreCase("Foundation + Display & Social")|| 
		Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small") || 
		Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium")||
		Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large")||
		Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small")||
		Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium")||
		Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
      {
			 LOGS.info("I have entered the AddFoundationPackage method");
			 int childNo=0;
				
				if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
				{
					childNo = 7;							
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
				{
					childNo = 1;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
				{
					childNo = 3;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
				{
					childNo = 5;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
				{
					childNo = 1;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
				{
					childNo = 3;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
				{
					childNo = 5;
				}
				
				LOGS.info("childNo: "+childNo);
				System.out.println("childNo: "+childNo);
				LOGS.info("Plan Name after the loop decides: "+Plans[0]);
				
				
				
				 String tierName1="Online Foundation without Search";
				 String tierName2="Display & Search Tiers";
				 String tierName3="Social & Search - Tiers";
				 String tierName="";
			if(Plans[0].contains("Display") && Plans[0].contains("Social")) {
				tierName = tierName1;
			     }
			else if(Plans[0].contains("Display") && Plans[0].contains("Search")) {
				tierName=tierName2;
		     }
			else if(Plans[0].contains("Social") && Plans[0].contains("Search")) {
				tierName=tierName3;
		     }
		     LOGS.info("This is my tier name "+tierName);
		     
		   
		     Thread.sleep(4000);
		     WebElement shadowDomHostElement80 = driver.findElement(By.cssSelector("#sbPageContainer"));
		     SearchContext last80 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement80);
		     //Thread.sleep(1000);
		     //LOGS.info("I have crossed the unwanted shadow - 1");
		     WebElement shadowDomHostElement81 = last80.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
		     SearchContext last81 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement81);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement82 = last81.findElement(By.cssSelector("#bundles"));
		     SearchContext last82 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement82);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement83 = last82.findElement(By.cssSelector("#features"));
		     SearchContext last83 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement83);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement84 = last83.findElement(By.cssSelector("sb-product-feature-list"));
		     SearchContext last84 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement84);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement85 = last84.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
		     SearchContext last85 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement85);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement86 = last85.findElement(By.cssSelector("#ot"));
		     SearchContext last86 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement86);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement87 = last86.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
		     SearchContext last87 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement87);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement88 = last87.findElement(By.cssSelector("#selection"));
		     SearchContext last88 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement88);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement89 = last88.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
		     SearchContext last89 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement89);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement90 = last89.findElement(By.cssSelector("#radio"));
		     SearchContext last90 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement90);
		     Thread.sleep(8000);
		     LOGS.info("I am abt to click radio button");
		     WebElement shadowDomHostElement91 = last90.findElement(By.cssSelector("#offRadio"));
		     //wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#offRadio")));
		     //last10.findElement(By.cssSelector("#offRadio")).click();
		     //wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#offRadio")));
		     
				JavascriptExecutor jseRadioBtn = (JavascriptExecutor) driver;
				jseRadioBtn.executeScript("arguments[0].click()", shadowDomHostElement91);
		     
				LOGS.info("I have selected the radio button for my plan for placing");
				
//				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)");
//				
//				LOGS.info("I am scrolling to the view");

            int childCNo=0;
				
				if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
				{
					childCNo = 7;							
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
				{
					childCNo = 1;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
				{
					childCNo = 3;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
				{
					childCNo = 5;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
				{
					childCNo = 1;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
				{
					childCNo = 3;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
				{
					childCNo = 5;
				}
				
				LOGS.info("childConfigureNo: "+childCNo);
				System.out.println("childConfigureNo: "+childCNo);
				LOGS.info("Plan Name after the Configured decides: "+Plans[0]);
				
	// Sabarish - For Clicking the config icon
				
			// for config button	
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		
				LOGS.info(Thread.currentThread() +"Going to click on Config (#_0) button");
				SearchContext config = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"sb-product-bundles-layout\").shadowRoot.querySelector(\"sb-product-feature-layout\").shadowRoot.querySelector(\"sb-product-feature-list\").shadowRoot.querySelector(\"sb-product-feature[name = '"+tierName+"']\").shadowRoot.querySelector(\"sb-product-option-table#ot\").shadowRoot.querySelector(\"div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childCNo+")\").shadowRoot.querySelector(\"sb-actions[class='--desktop']\").shadowRoot.querySelector(\"span#_0\")");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				excutor.executeScript("arguments[0].click();", config);
			
				
				/*Thread.sleep(3000);
		        Actions actions = new Actions(driver);
				actions.moveToElement(shadowDomHostElement59);
				actions.click();*/
				
				LOGS.info(Thread.currentThread() +"clicked on Config (#_0) button");
                Thread.sleep(2000);
		        
		     /// Entering budget for Foundation package

		   //This Element is Budget textbox
             String DS = "2 - Ad Campaigns";
		     String DSS=  "Display & Search Small (Max Budget Search $799)";
		     String DSM = "Display & Search Medium (Max Search Budget $1199)";
		     String DSL=  "Display & Search - Large (Search Budget Unlimited)";
		     String SSS = "Social & Search Small (Max Search Budget $799)";
		     String SSM = "Social & Search Medium (Max Search Budget $1199)";
		     String SSL=  "Social & Search - Large (Search Budget Unlimited)";
		     String Packsize="";
		     
		        if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
				{
					Packsize = DS;
				}
		        else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
				{
					Packsize = DSS;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
				{
					Packsize = DSM;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
				{
					Packsize = DSL;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
				{
					Packsize = SSS;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
				{
					Packsize = SSM;
				}
				else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
				{
					Packsize = SSL;
				}
				
				LOGS.info("My package tier decided to be: "+ Packsize);
				
				int BudgetAmt=0;
				        if(Plans[0].equalsIgnoreCase("Foundation + Display & Social")
						|| Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small")
						|| Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
				        {
				        BudgetAmt=700;
				        LOGS.info("I am the budget to be given for these small packages " +BudgetAmt);	
				        }
						
				        if (Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium")
				    	|| Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
				        {
				        BudgetAmt=1100;
				        LOGS.info("I am the budget to be given for these medium packages " +BudgetAmt);	
				        }
					     
				        if (Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large")
				    	|| Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
				        {
				        	BudgetAmt=1700;
				        LOGS.info("I am the budget to be given for these large packages " +BudgetAmt);	
				        }
				        LOGS.info("This will be the budget given to the products " +BudgetAmt);
				        
				int addNum=0;
				for(int k=1; k<Plans.length; k++)
				{
					LOGS.info("I have entered budget entering loop");

					
			        ////////////////
					
		     Thread.sleep(3000);
		     WebElement shadowDomHostElement110 = driver.findElement(By.cssSelector("#sbPageContainer"));
		     SearchContext last110 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement110);
		     //Thread.sleep(1000);
		     LOGS.info("I have removed the unwanted shadow - 2");
		     WebElement shadowDomHostElement111 = last110.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
		     SearchContext last111 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement111);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement112 = last111.findElement(By.cssSelector("#bundles"));
		     SearchContext last112 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement112);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement113 = last112.findElement(By.cssSelector("#features"));
		     SearchContext last113 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement113);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement114 = last113.findElement(By.cssSelector("sb-product-feature-list"));
		     SearchContext last114 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement114);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement115 = last114.findElement(By.cssSelector("sb-product-feature[name='"+Packsize+"']"));
		     SearchContext last115 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement115);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement116 = last115.findElement(By.cssSelector("#ot"));
		     SearchContext last116 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement116);
		     //Thread.sleep(1000);
		     /*WebElement shadowDomHostElement117 = last116.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
		     SearchContext last117 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement117);*/
		     WebElement shadowDomHostElement117 = last116.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(k+addNum)+")"));
		     SearchContext last117 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement117);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement118 = last117.findElement(By.cssSelector("#row"));
		     SearchContext last118 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement118);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement119 = last118.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
		     SearchContext last119 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement119);
		     //Thread.sleep(1000);
		     WebElement shadowDomHostElement210 = last119.findElement(By.cssSelector("#field"));
		     SearchContext last210 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement210);
		     Thread.sleep(2000);
		     WebElement shadowDomHostElement211 = last210.findElement(By.cssSelector("#me"));
		   
		     //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(shadowDomHostElement211))));
		       Thread.sleep(1000);
				//LOGS.info("I am going to click Jlocator budget box");
				//WebElement BudgetBox = excutor.executeScript("arguments[0].click();",JLocator("BudgetBx"));
				//Thread.sleep(3000);
				////
	        LOGS.info("I am giving the budget amount to your box "+Packsize+ " as " +BudgetAmt);
	       
	        Actions actions1 = new Actions(driver);
			actions1.moveToElement(shadowDomHostElement211);
			actions1.click();
			actions1.sendKeys(String.valueOf(BudgetAmt));
			actions1.build().perform();
			
		     
			addNum = addNum+1;
		
				}}
				
				LOGS.info("I am the plans length " +Plans.length);
				Thread.sleep(3000);
				
				
				if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
				{
					LOGS.info(Thread.currentThread() +"Assistant Selection:  " + AssistantSelection);
					
					WebElement shadowDomHostElement418 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last418 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement418);
					
					WebElement shadowDomHostElement419 = last418.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last419 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement419);
					
					WebElement shadowDomHostElement420 = last419.findElement(By.cssSelector("#bundles"));
					SearchContext last420 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement420);
					
					WebElement shadowDomHostElement421 = last420.findElement(By.cssSelector("#features"));
					SearchContext last421 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement421);
					
					WebElement shadowDomHostElement422 = last421.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last422 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement422);
					
					WebElement shadowDomHostElement423 = last422.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
					SearchContext last423 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement423);
					
					WebElement shadowDomHostElement424 = last423.findElement(By.cssSelector("#ot"));
					SearchContext last424 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement424);
					
					WebElement shadowDomHostElement425 = last424.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
					SearchContext last425 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement425);
					
					WebElement shadowDomHostElement426 = last425.findElement(By.cssSelector("#selection"));
					SearchContext last426 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement426);
					
					WebElement shadowDomHostElement427 = last426.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last427 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement427);
					
					WebElement shadowDomHostElement428 = last427.findElement(By.cssSelector("#checkbox"));
					SearchContext last428 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement428);
				 
					WebElement shadowDomHostElement429 = last428.findElement(By.cssSelector("#checkboxContainer"));
					
					wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement429));
					//last428.findElement(By.cssSelector("#checkboxContainer")).click();
					
					JavascriptExecutor jsAst = (JavascriptExecutor) driver;
					jsAst.executeScript("arguments[0].click();", shadowDomHostElement429);
					
					LOGS.info(Thread.currentThread() +"Unselected Assistant Check Box to go without Assistant product");
					
//					if(shadowDomHostElement429.isSelected())
//					{
//						shadowDomHostElement429.click();
//					}
					
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));
					
				}
				
				
				if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
				{
					LOGS.info(Thread.currentThread() +"LR Selection:  " + LRSelection);
					
					WebElement shadowDomHostElement500 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last500 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement500);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement501 = last500.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					SearchContext last501 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement501);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement502 = last501.findElement(By.cssSelector("#bundles"));
					SearchContext last502 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement502);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement503 = last502.findElement(By.cssSelector("#features"));
					SearchContext last503 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement503);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement504 = last503.findElement(By.cssSelector("sb-product-feature-list"));
					SearchContext last504 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement504);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement505 = last504.findElement(By.cssSelector("sb-product-feature[name='Foundation']"));
					SearchContext last505 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement505);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement506 = last505.findElement(By.cssSelector("#ot"));
					SearchContext last506 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement506);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement507 = last506.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(7)"));
					SearchContext last507 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement507);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement508 = last507.findElement(By.cssSelector("#selection"));
					SearchContext last508 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement508);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement509 = last508.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					SearchContext last509 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement509);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement510 = last509.findElement(By.cssSelector("#checkbox"));
					SearchContext last510 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement510);
					//Thread.sleep(1000);
					WebElement shadowDomHostElement511 = last510.findElement(By.cssSelector("#checkboxContainer"));
					
					wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement511));
					//last428.findElement(By.cssSelector("#checkboxContainer")).click();
					
					JavascriptExecutor jsLR = (JavascriptExecutor) driver;
					jsLR.executeScript("arguments[0].click();", shadowDomHostElement511);
												
					LOGS.info(Thread.currentThread() +"Selected LR Check Box to go with LR product");
					
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
				}
			
				
				SearchContext Rand = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#fb\")");
				Thread.sleep(4000);
				excutor.executeScript("arguments[0].click();", Rand);
				LOGS.info("hello1");
				Thread.sleep(3000);
				excutor.executeScript("arguments[0].click();", Rand);
				LOGS.info("hello2");
				Thread.sleep(2000);
				
				System.out.println("going to click on save button in config page");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				SearchContext savebtn1 = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
				//SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#pcSave\")");
				Thread.sleep(4000);
				
				excutor.executeScript("arguments[0].click();", savebtn1);
			
			//save inside configure products page
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20));
			
			Thread.sleep(8000);
			//click on second save btn
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
			WebElement shadowDomHostElement425 = driver.findElement(By.cssSelector("#sbPageContainer"));
			SearchContext last425 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement425);
			//Thread.sleep(1000);
			WebElement shadowDomHostElement426 = last425.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
			SearchContext last426 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement426);
			WebElement shadowDomHostElement427 = last426.findElement(By.cssSelector("#pcSave"));
			
			JavascriptExecutor jse = (JavascriptExecutor) driver ;
			jse.executeScript("arguments[0].click();", shadowDomHostElement427);
			
			System.out.println("Clicked on save button in config page for second");
				  		
		}
		
		
		
		catch(Exception e) {
			LOGS.info("Wait is over and the Process continues, at end of Foundation Method in Catch block");
			}
		}
	// End of add package method for Online Foundation solutions
	// Add package method started for smart presence products
	
		public void AddSmartPresencePackage(String[] Prods, String[] Plans)
		{
			Status = "Pass";
			String tierName="";
			String budgetTierName="";
			int childNO=0,schildNO,budgetAmt=0,chkbox=0;
			excutor = (JavascriptExecutor) driver;
			 wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			 
			
			try {
				System.out.println("entered AddSmartPresencePackage method");
				try {
					ExpRes = "radio button should be clicked";
					ImageName = "radioButtonOnPlansPage";
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
				if(Plans[0].contains("Smart Online Presence")
				   ||  Plans[0].contains("Smart Presence + 1 Ad Campaign")
				   ||  Plans[0].contains("Smart Presence + Display & Social"))
				{
				       tierName="Smart Presence without Search";
					
					if(Plans[0].contains("Smart Online Presence"))
						{
						childNO=5;
					
						}
					if(Plans[0].contains("Smart Presence + 1 Ad Campaign"))
					{
						childNO=7;
						budgetTierName="Choose One Performance Product Display or Social or Search (Search Max = $999)";
						budgetAmt=699;
						
					}
					if(Plans[0].contains("Smart Presence + Display & Social"))
					{
						childNO=9;
						budgetTierName="2 - Ad Campaigns";
						budgetAmt=350;
					}
					
				}
				if(Plans[0].contains("Smart Presence + Display & Search - Small")
						||  Plans[0].contains("Smart Presence + Display & Search - Medium")
						||  Plans[0].contains("Smart Presence + Display & Search - Large"))
				{
					tierName="Display & Search - Tiers";
					if(Plans[0].contains("Smart Presence + Display & Search - Small"))
					{
						childNO=1;
						
						budgetTierName="Display & Search Small (Max Search Budget = $799)";
						budgetAmt=650;
					}
					if(Plans[0].contains("Smart Presence + Display & Search - Medium"))
					{
						childNO=3;
						
						budgetTierName="Display & Search Medium (Max Search Budget = $1199)";
						budgetAmt=999;
					}
					if(Plans[0].contains("Smart Presence + Display & Search - Large"))
					{
						childNO=5;
						
						budgetTierName="Display & Search - Large (Search Budget Unlimited)";
						budgetAmt=1399;
					}
				}
				if(Plans[0].contains("Smart Presence + Social & Search - Small")
						||  Plans[0].contains("Smart Presence + Social & Search - Medium")
						||  Plans[0].contains("Smart Presence + Social & Search - Large"))
				{
					tierName="Social & Search - Tiers";
					if(Plans[0].contains("Smart Presence + Social & Search - Small"))
					{
						childNO=1;
						
						budgetTierName="Social & Search Small (Max Search Budget = $799)";
						budgetAmt=650;
					}
					if(Plans[0].contains("Smart Presence + Social & Search - Medium"))
					{
						childNO=3;
						
						budgetTierName="Social & Search Medium (Max Search Budget = $1199)";
						budgetAmt=999;
					}
					if(Plans[0].contains("Smart Presence + Social & Search - Large"))
					{
						childNO=5;
						
						budgetTierName="Social & Search - Large (Search Budget Unlimited)";
						budgetAmt=1399;
					}
				}
				
				System.out.println("going to click the radio button for " + Plans[0]);
				
				//Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
				SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
				SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
				SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
				SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
				//Thread.sleep(1000);
				System.out.println("this is the tire name : " + tierName + " this is the child no : " + childNO);
				WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")"));
				SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
				SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#radio"));
				SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
				//Thread.sleep(1000);
				WebElement rb = last10.findElement(By.cssSelector("#offRadio"));
				wait.until(ExpectedConditions.elementToBeClickable(rb));
				excutor.executeScript("arguments[0].click();", rb);
				
				System.out.println("clicked the radio button for " + Plans[0]);
				
				try {
					System.out.println("going to click on config icon button");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); // wait time 10 seconds
									
					SearchContext config = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"sb-product-bundles-layout\").shadowRoot.querySelector(\"sb-product-feature-layout\").shadowRoot.querySelector(\"sb-product-feature-list\").shadowRoot.querySelector(\"sb-product-feature[name = '"+tierName+"']\").shadowRoot.querySelector(\"sb-product-option-table#ot\").shadowRoot.querySelector(\"div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")\").shadowRoot.querySelector(\"sb-actions[class='--desktop']\").shadowRoot.querySelector(\"span#_0\")");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					excutor.executeScript("arguments[0].click();", config);
					System.out.println("clicked on config icon button for prod : " + Plans[0]);
				}catch(Exception e)
				{
					System.out.println("exception while clicking on config icon button");
					e.printStackTrace();
				}

				try {
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					
					schildNO=0;
					if(Plans[0].contains("Smart Presence + 1 Ad Campaign"))
					{
						if(Plans[1].equalsIgnoreCase("Managed Search"))
						{
							chkbox=5;
							schildNO=4;
							
						}
						if(Plans[1].equalsIgnoreCase("Display"))
						{
							chkbox=1;
							schildNO=0;
						}
						if(Plans[1].equalsIgnoreCase("Social"))
						{
							chkbox=3;
							schildNO=2;
						}
						if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
						{
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); //10 seconds wait time
							LrAssistantSelectionForSmartPresence("LR",Plans);
						}
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
						
						WebElement shadowDomHostElement21 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last21 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement21);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement22 = last21.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement23 = last22.findElement(By.cssSelector("#bundles"));
						SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement24 = last23.findElement(By.cssSelector("#features"));
						SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement24);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement25 = last24.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last25 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement26 = last25.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
						SearchContext last26 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement27 = last26.findElement(By.cssSelector("#ot"));
						SearchContext last27 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement27);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement28 = last27.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+chkbox+")"));
						SearchContext last28 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement28);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement29 = last28.findElement(By.cssSelector("#selection"));
						SearchContext last29 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement29);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement30 = last29.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
						SearchContext last30 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement30);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement31 = last30.findElement(By.cssSelector("#checkbox"));
						SearchContext last31 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement31);
						//Thread.sleep(1000);
						 WebElement checkBoxContainer = last31.findElement(By.cssSelector("#checkboxContainer"));
						
						
						 wait.until(ExpectedConditions.elementToBeClickable(checkBoxContainer));
						excutor.executeScript("arguments[0].click();", checkBoxContainer);
					
					}
					else {
					if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
					{
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); // 10 seconds wait time
						LrAssistantSelectionForSmartPresence("LR",Plans);
					}
					}
					int k=0;
					
					System.out.println("going to enter the budget method");
					System.out.println("this is plans length " + Plans.length);
					ExpRes="budget should be entered";
					if(!Plans[0].equalsIgnoreCase("Smart Online Presence"))
					{
					for(k=1;k<Plans.length;k++)
					{
						
						WebElement shadowDomHostElement11 = driver.findElement(By.cssSelector("#sbPageContainer"));
						SearchContext last11 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement11);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement12 = last11.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
						SearchContext last12 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement12);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement13 = last12.findElement(By.cssSelector("#bundles"));
						SearchContext last13 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement13);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement14 = last13.findElement(By.cssSelector("#features"));
						SearchContext last14 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement14);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement15 = last14.findElement(By.cssSelector("sb-product-feature-list"));
						SearchContext last15 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement15);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement16 = last15.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
						SearchContext last16 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement16);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement17 = last16.findElement(By.cssSelector("#ot"));
						SearchContext last17 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement17);
						Thread.sleep(5000);
						WebElement shadowDomHostElement18 = last17.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(k+schildNO)+")"));
						SearchContext last18 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement18);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement19 = last18.findElement(By.cssSelector("#row"));
						SearchContext last19 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement19);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement20 = last19.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
						SearchContext last20 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement20);
						//Thread.sleep(1000);
						WebElement shadowDomHostElement21 = last20.findElement(By.cssSelector("#field"));
						SearchContext last21 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement21);
						//Thread.sleep(1000);
						
						/*WebElement shadowDomHostElement22 = last21.findElement(By.cssSelector("sb-input[class='--desktop']"));
						SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
						Thread.sleep(1000);*/
						WebElement budgetText = last21.findElement(By.cssSelector("#formatted"));
						
						Actions actions = new Actions(driver);
						
						actions.moveToElement(budgetText);
						wait.until(ExpectedConditions.elementToBeClickable(budgetText));
						actions.click();
						System.out.println("clicked on budget box for child " +(k+schildNO));
						actions.sendKeys(String.valueOf(budgetAmt));
						actions.build().perform();
						schildNO=schildNO+1;
					}
					}
					if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))
					{
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); // 10 seconds wait time
						LrAssistantSelectionForSmartPresence("Ast", Plans);
					}
					SearchContext Rand = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#fb\")");
					Thread.sleep(5000);
					excutor.executeScript("arguments[0].click();", Rand);
					LOGS.info("hello1");
					Thread.sleep(5000);
					excutor.executeScript("arguments[0].click();", Rand);
					LOGS.info("hello2");
					
					System.out.println("going to click on save button in budget page");
					try {
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
						SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
						excutor.executeScript("arguments[0].click();", savebtn);
						//driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
						
						Thread.sleep(10000);
						System.out.println("clicking on save button second time");
						excutor.executeScript("arguments[0].click();", savebtn);
						
						System.out.println("successfully clicked the save button in budget page");
						
					}catch(Exception e)
					{
						System.out.println("error in clicking the save button");
						e.printStackTrace();
					}
					
					System.out.println("budget entered successfully");
					ActRes="budget entered successfully";
					ImageName="budgetentering";
					ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				}catch(Exception e)
				{
					System.out.println("exception happened while entering the budget for " + Plans[0]);
					e.printStackTrace();
					ActRes="error while entering the budget";
					ImageName="errorInBudget";
					ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
				}
				
				System.out.println("going to click on save button in config page");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
				
				SearchContext savebtn = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");
				Thread.sleep(10000);
				excutor.executeScript("arguments[0].click();", savebtn);
				System.out.println("successfully clicked the save button on config page");
			}catch(Exception e)
				{
				System.out.println("exception while selecting " + Plans[0] + " on qle page");
				e.printStackTrace();
				ActRes="exception while selecting the product on qle page";
				Status = "Fail";
				ImageName="exceptionInSelectingSmartPresence";
				ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				}
			}
			catch(Exception e)
			{
				LOGS.info("exception in adding " + Prods[i]);
				
			}
		}
	    
		// end of add package method for smart presence
	
	public void LrAssistantSelectionForSmartPresence(String Product, String[] Plans)
	{ 
		int childNO=0;
		String name="";
		try {
			if(Plans[0].contains("Smart Online Presence"))
			{
				name="Online Presence";
			if(Product.equalsIgnoreCase("LR"))
					{
				       childNO=5;
				
					}
			if(Product.equalsIgnoreCase("Ast"))
			{
				childNO=3;
			}
			}
			else {
				name="Smart Presence";
				if(Product.equalsIgnoreCase("LR"))
				{
			       childNO=9;
			
				}
		if(Product.equalsIgnoreCase("Ast"))
		{
			childNO=7;
		}
			}
				//Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
				SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
				SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
				SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
				SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+name+"']"));
				SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
				SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")"));
				SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
				SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#checkbox"));
				SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
				Thread.sleep(1000);
				WebElement checkBoxContainer = last10.findElement(By.cssSelector("#checkboxContainer"));
				wait.until(ExpectedConditions.elementToBeClickable(checkBoxContainer));
				((JavascriptExecutor)driver).executeScript("arguments[0].click();", checkBoxContainer);
				System.out.println("successfully checked the check box for " + Product);
			
			
		}catch(Exception e)
		{
			System.out.println("exception happened while checking the check box for " + Product);
			e.printStackTrace();
		}
	}

	public  void AddingProduct(String[] Prods, String[] Plans) throws Exception {
		int i, j;
		excutor = (JavascriptExecutor)driver;
		
		try {
			int prodslen = Prods.length;
			for (i = 0, j = 0; i < Prods.length; i++, j++) {

				LOGS.info(Thread.currentThread() +"AddingProduct Started :" + prodslen);

				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Waiting for 3s " );
				
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(3));
				
				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"waiting for 3s " );

				try {
					LOGS.info(Thread.currentThread() +"in try mode " );
					String CurrentURL = driver.getCurrentUrl();
					LOGS.info(Thread.currentThread() +"Current URL after clicking Place Order Button: "+CurrentURL);
					
					try {
						LOGS.info("In Try Block..Waiting for Page to load Completely");
						WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
						wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
					
					}catch(Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
						}
//					wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//paper-button[text()='Add Products']")));
//					wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
//					SLocator("AddProdBtn").click();
					
					Thread.sleep(5000);
					LOGS.info("waiting for javascript executor");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15)); // 30 second wait time
					
					//WebElement addProducts = (WebElement) excutor.executeScript("return document.querySelector('sb-page-container').shadowRoot.querySelector('sb-line-editor').shadowRoot.querySelector('div > sb-page-header').querySelector('div > sb-custom-action').shadowRoot.querySelector('paper-button')");
					excutor.executeScript("arguments[0].click();", JLocator("AddProdBtn"));
					LOGS.info(Thread.currentThread() +"clicking add prod button " );
					
					
					LOGS.info(Thread.currentThread() +"clicking add prod button " );
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"in catch mode " );
					driver.navigate().refresh();
					LOGS.info(Thread.currentThread() +" navigating and refreshing" );
					
					LOGS.info(Thread.currentThread() +"waitng for 5s " );
					driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(60));
					//Thread.sleep(8000);
					String CurrentURL = driver.getCurrentUrl();
					LOGS.info(Thread.currentThread() +"Current URL after clicking Place Order Button: "+CurrentURL);
					LOGS.info(Thread.currentThread() +" waiting for 5s" );
					//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//paper-button[text()='Add Products']")));
					LOGS.info(Thread.currentThread() +"AddingProduct Started time done");
					/*((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
							SLocator("AddProdBtn"));
					//Thread.sleep(3000);
					LOGS.info(Thread.currentThread() +"waited for 3s to click on add products button");*/
					
					
					//SLocator("AddProdBtn").click();
					
					//shadow dom...............
					//JavascriptExecutor  jse = (JavascriptExecutor) driver;
					//WebElement addProduct = (WebElement) jse.executeScript("return document.querySelector('#sbPageContainer').shadowRoot.querySelector('#content > sb-line-editor').shadowRoot.querySelector('#actions > sb-custom-action:nth-child(1)').shadowRoot.querySelector('#mainButton')");
					//((JavascriptExecutor)driver).executeScript("arguments[0].click();", addProduct);
					//addProduct.click();
					
					//WebElement element = JLocator("AddProdBtn");
					//SearchContext shadowRoot = eleme
										
					excutor.executeScript("arguments[0].click();", JLocator("AddProdBtn"));
													
					LOGS.info(Thread.currentThread() +"clicking add prod button " );
				}

				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"waiting for 3s " );
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));

				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +" waiting for 3s" );

				LOGS.info(Thread.currentThread() +"Clicked on Add Products Button");
				ExpRes = "Orderplacement should landed to Quote Line Editor As Rep is added in CPQ pilot Group ";
				ActRes = "Orderplacement landed to Quote Line Editor";
				Status = "Pass";
				
				//Thread.sleep(3000);
				/*
				LOGS.info(Thread.currentThread() +" waiting for 3s" );
				try {
					LOGS.info(Thread.currentThread() +" in try mode" );
					WebElement ele = SLocator("SuggestBtn");
					LOGS.info(Thread.currentThread() +"captuing suggest button " );
					((JavascriptExecutor) driver).executeScript("arguments[0].click();", ele);
					LOGS.info(Thread.currentThread() +" clicking on suggest btn" );
					//Thread.sleep(3000);
					LOGS.info(Thread.currentThread() +"waiting for 3s " );
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					//Thread.sleep(2000);
					LOGS.info(Thread.currentThread() +" waiting for 2s" );
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +" in catch mode" );
					//e.printStackTrace();
					ExceptionMsg = "Exception Happened While Adding the products in Quote";
					LOGS.error(Thread.currentThread() + "Exception: "+e.getMessage());
					LOGS.info(Thread.currentThread() +"Suggest Button is not available");
				}*/
				try {
					LOGS.info("In Try Block..Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(4));
				WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
				wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Process continues.");
				}
				
				/*
				//WebDriverWait wait1 = new WebDriverWait(driver, 20);
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("FilterBtn")));
				SLocator("FilterBtn").click();
				LOGS.info(Thread.currentThread() +"Clicking on Filter icon " );
				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"waiting for 3 seconds " );
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				//Thread.sleep(4000);
				LOGS.info(Thread.currentThread() +"waiting for 4s " );

				//driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("ProdNameTextBox")));
				SLocator("ProdNameTextBox").click();
				LOGS.info(Thread.currentThread() +"clicked on product name text box " );
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				SLocator("ProdNameTextBox").clear();
				LOGS.info(Thread.currentThread() +"cleared the prod name text box " );

				

				SLocator("ProdNameTextBox").sendKeys(Prods[i]);
				LOGS.info(Thread.currentThread() +"Entered product name: " + Prods[i]);
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +" clicked on apply btn" );
				//Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"waitng for 3s");
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				//Thread.sleep(4000);
				 */
				
				//shadow dom ...............
				
//				JavascriptExecutor  jse = (JavascriptExecutor)driver;
//				WebElement searchProduct = (WebElement) jse.executeScript("return document.querySelector('#sbPageContainer').shadowRoot.querySelector('#content > sb-product-lookup').shadowRoot.querySelector('#headersearch').shadowRoot.querySelector('#typeahead').shadowRoot.querySelector('#itemLabel')");
//				String searchText = "arguments[0].setAttribute('value', '"+Prods[i]+"')";
//							
//				((JavascriptExecutor)driver).executeScript(searchText, searchProduct);
//				Thread.sleep(1000);
//				
//				//JavascriptExecutor  jse = (JavascriptExecutor)driver;
//				WebElement searchBtn = (WebElement) jse.executeScript("return document.querySelector('#sbPageContainer').shadowRoot.querySelector('#content > sb-product-lookup').shadowRoot.querySelector('#headersearch').shadowRoot.querySelector('#search')");
//				((JavascriptExecutor)driver).executeScript("arguments[0].click();", searchBtn);
//				
//				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15)); // 40 seconds wait time
				//driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				LOGS.info("this is the product selenium 4 :" + Prods[i]);
				
				String prodValue = "arguments[0].setAttribute('value',"+Prods[i]+")";
				System.out.println("this is the prodvalue "+ prodValue);
				
				
				//This Element is inside 2 nested shadow DOM.
				String cssSelectorForHost1 = "#sbPageContainer";
				String cssSelectorForHost2 = "sb-product-lookup[class='--desktop']";
				LOGS.info("hello");
				//Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				LOGS.info("hello1");
				SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				LOGS.info("hello2");
				//Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-lookup[class='--desktop']"));
				SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
				Thread.sleep(1000);
				LOGS.info("hello3");
				last1.findElement(By.cssSelector("#fb")).click();
				LOGS.info("hello4");
				LOGS.info("18 Jan : Clicking filter button");
				
				
/*				excutor.executeScript("arguments[0].removeAttribute('disabled');",JLocator("ProdNameTextBox"));
				excutor.executeScript("arguments[0].click();",JLocator("ProdNameTextBox"));
				driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				excutor.executeScript("arguments[0].value='"+Prods[i]+"';", JLocator("ProdNameTextBox"));
				LOGS.info(Thread.currentThread() +"Entered product name: " + Prods[i]);*/
				Thread.sleep(5000);
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
				
				//This Element is inside 7 nested shadow DOM.
/*				String cssSelectorForHost1 = "#sbPageContainer";
				String cssSelectorForHost2 = "sb-product-lookup[class='--desktop']";*/
				String cssSelectorForHost3 = "#pf";
				String cssSelectorForHost4 = "#panel";
				String cssSelectorForHost5 = "sb-filter-item[item='a4o5A0000002OspQAE.value']";
				String cssSelectorForHost6 = "#field";
				String cssSelectorForHost7 = "sb-input[class='--desktop']";
				//Thread.sleep(1000);
/*				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				WebElement last0 = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-lookup[class='--desktop']"));
				WebElement last1 = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);*/
				//Thread.sleep(1000);
				WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#pf"));
				SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#panel"));
				SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-filter-item[item='a4o5A0000002OspQAE.value']"));
				SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("#field"));
				SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("sb-input[class='--desktop']"));
				SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
				Thread.sleep(1000);
				last6.findElement(By.cssSelector("#myinput")).click();
				Thread.sleep(1000);
				last6.findElement(By.cssSelector("#myinput")).clear();
				Thread.sleep(1000);
				last6.findElement(By.cssSelector("#myinput")).sendKeys(Prods[i]);
				
				LOGS.info("18 Jan : sending the name of the product");//
				
		// Clicking on Apply Filter
				
				/*excutor.executeScript("arguments[0].click();", JLocator("ApplyBtn"));*/
				//This Element is inside 2 nested shadow DOM.
/*				String cssSelectorForHost1 = "#sbPageContainer";
				String cssSelectorForHost2 = "sb-product-lookup[class='--desktop']";
				Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				WebElement last0 = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-lookup[class='--desktop']"));
				WebElement last1 = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);*/
				Thread.sleep(1000);
				last1.findElement(By.cssSelector("paper-drawer-panel:nth-child(12) > div:nth-child(2) > div:nth-child(1) > paper-button:nth-child(4)")).click();
				LOGS.info("18 Jan : Clicking apply button");
				LOGS.info(Thread.currentThread() +" clicked on apply btn" );
				LOGS.info(Thread.currentThread() +"waitng for 3s");
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20)); //40 seconds wait time
				
								
				try {
					LOGS.info("In Try Block..Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(8));
				WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
				wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
				
				/*
				if(Prods[i].trim().contains("Reviews") || Prods[i].trim().contains("Listings")) {
					try {
						LOGS.info("Waiting for Page to load Completely");
						WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(1));
						wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
					
					}catch(Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
						}
				} */
				
				 //Thread.sleep(10000);
				//String DynamicProdCheckBox = "//span[text()='"+ Prods[i] +"']//ancestor::sb-swipe-container//descendant::paper-checkbox";
/*				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//div[@id='checkboxContainer'])[2]")));
				wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//div[@id='checkboxContainer'])[2]"))).click();*/
				//wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + Prods[i] + "_AddProductCBDynamic2"))).click();
				//SLocatorDynamic("AddProductCBDynamic1_" + Prods[i] + "_AddProductCBDynamic2").click();
				
				//This Element is inside 7 nested shadow DOM.
/*
				String cssSelectorForHost3 = "#lookupLayout";
				String cssSelectorForHost4 = " div:nth-child(7) > div:nth-child(3) > iron-list:nth-child(1) > sb-table-row:nth-child(2)";
				String cssSelectorForHost5 = "#selection";
				String cssSelectorForHost6 = "sb-table-cell-select[class='--desktop']";
				String cssSelectorForHost7 = "#checkbox";*/
				
//Clicking on Selected product Checkbox

				//Thread.sleep(1000);
				WebElement shadowDomHostElement22 = last1.findElement(By.cssSelector("#lookupLayout"));
				SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement23 = last22.findElement(By.cssSelector(" div:nth-child(7) > div:nth-child(3) > iron-list:nth-child(1) > sb-table-row:nth-child(2)"));
				SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement24 = last23.findElement(By.cssSelector("#selection"));
				SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement24);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement25 = last24.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
				SearchContext last25 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
				//Thread.sleep(1000);
				WebElement shadowDomHostElement26 = last25.findElement(By.cssSelector("#checkbox"));
				SearchContext last26 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
				Thread.sleep(1000);
				
				last26.findElement(By.cssSelector("#checkboxContainer")).click();
				
				LOGS.info("Clicking on product check box");
				
				LOGS.info(Thread.currentThread() +"Checked the Checkbox of productname :" + Prods[i]);
/*				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("SelectProdBtn"));
				LOGS.info(Thread.currentThread() +"scrolled Up");*/
				
				
				last1.findElement(By.cssSelector("#plSelect")).click();


				ImageName = "Product" + Plans[i];
				ImgName1 = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				try {
					LOGS.info("In Try Block..Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(4));
				WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
				wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
				//wait.until(ExpectedConditions.elementToBeClickable(SLocator("SelectProdBtn")));
				//wait.until(ExpectedConditions.elementToBeClickable(SLocator("SelectProdBtn"))).click();
				//SLocator("SelectProdBtn").click();
				
				LOGS.info(Thread.currentThread() +"clicking select prod btn ");
				//Thread.sleep(3000);
				
				LOGS.info(Thread.currentThread() +"waiting for 3s ");
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
				LOGS.info(Thread.currentThread() +"waiting for 3s");
				//Thread.sleep(3000);

				
				try {
					LOGS.info("In Try Block..Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(4));
				WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
				wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
				// Set property files
				
				if(Prods[i].trim().contains("Reviews") || Prods[i].trim().contains("Listings") || Prods[i].trim().contains("Reputation")) {
					try {
						LOGS.info("Waiting for Page to load Completely");
						WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(1));
						wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
					
					}catch(Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
						}
				}	
				else if(Prods[i].trim().contains("Mobile Boost (a la carte)"))
				{
					LOGS.info(Thread.currentThread() +"Initiated Add Package Details method for Mobile Boost" + Prods[i] );
					AddMobileBoostPackage(Prods, Plans);
				}
				else if (Prods[i].equalsIgnoreCase("Done") || Prods[i].equalsIgnoreCase("Presence + Mobile")
						|| Prods[i].equalsIgnoreCase(OR.getProperty("18"))
						|| Prods[i].equalsIgnoreCase(OR.getProperty("16")) || Prods[i].equalsIgnoreCase(OR.getProperty("17")) 
						|| Prods[i].equalsIgnoreCase("Social") || Prods[i].equalsIgnoreCase(OR.getProperty("02")) 
						|| Prods[i].equalsIgnoreCase(OR.getProperty("Presence + Performance Sync"))) {
					LOGS.info(Thread.currentThread() +"Initiated AddPackageDetails method" + Prods[i] );
					AddPackageDetails(Prods, Plans);
					LOGS.info(Thread.currentThread() +" completed adding package details");
					if (BundlePriceValidation.equalsIgnoreCase("True")) {
						LOGS.info(Thread.currentThread() +"Initiated Bundle Price Validation method");
						BundlePriceValid(Prods, Plans);
					}
				} 

				else if (Prods[i].equalsIgnoreCase("Performance Sync") )
				{

					LOGS.info(Thread.currentThread() +"Initiated AddPackageDetails method for Solutions Products" + Prods[i] );
					AddPackageDetails(Prods, Plans);
					LOGS.info(Thread.currentThread() +" completed adding package details");
					if (BundlePriceValidation.equalsIgnoreCase("True")) {
						LOGS.info(Thread.currentThread() +"Initiated Bundle Price Validation method");
						BundlePriceValid(Prods, Plans);
					}
					SLocator("Save").click();
					LOGS.info(Thread.currentThread() +"Clicked Save button on Configure Products page-Solutions");
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(6000);

				}

				else if (Prods[i].equalsIgnoreCase("Enhanced Social Solution") ){
					
					for (j=0;j<Plans.length;j++)
					{
						LOGS.info(Thread.currentThread() +"entering the budget for enhanced social solution for first product");
						EnterBudget(Prods[0], Plans[j]);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
						//Thread.sleep(3000);
					}
				
				}
				
				else if (   

						   Plans[0].contains("Smart Sync - Small")
						|| Plans[0].contains("Smart Sync - Medium")
						|| Plans[0].contains("Smart Sync - Large")
			)
			{
					LOGS.info(Thread.currentThread() +"Initiated Add Package Details method for Solutions Products" + Prods[i] );
				    AddSmartSyncPackage(Prods, Plans);
			}
				
				else if (   
						   Plans[0].contains("Display (a la carte)")
						|| Plans[0].contains("Search (a la carte)")
						|| Plans[0].contains("Social (a la carte)")
						|| Plans[0].contains("Search - Guaranteed Clicks")
			)
			{
					LOGS.info(Thread.currentThread() +"Initiated Add Package Details method for SAMI Ala Carte Products" + Prods[i] );
				    AddSamialacartePackage(Prods, Plans);
			}
				else if (
						 Plans[0].contains("Synchronized Marketing - Large")
						|| Plans[0].contains("Synchronized Marketing - Medium")
						|| Plans[0].contains("Synchronized Marketing - Small"))
				{
					LOGS.info(Thread.currentThread() +"Initiated Add Package Details method for Solutions Products" + Prods[i] );
					AddSynchronizedMktngPackage(Prods, Plans);
				}
				
				else if (Plans[0].contains("Smart Online Presence")
						||  Plans[0].contains("Smart Presence + 1 Ad Campaign")
						||  Plans[0].contains("Smart Presence + Display & Social")
						||  Plans[0].contains("Smart Presence + Display & Search - Small")
						||  Plans[0].contains("Smart Presence + Display & Search - Medium")
						||  Plans[0].contains("Smart Presence + Display & Search - Large")
						||  Plans[0].contains("Smart Presence + Social & Search - Small")
						||  Plans[0].contains("Smart Presence + Social & Search - Medium")
						||  Plans[0].contains("Smart Presence + Social & Search - Large")
						//Prods[i].equalsIgnoreCase("Smart Presence Solutions")
						)
				{
					System.out.println("Initiated Add Package Details method for Solutions Products" + Prods[i]);
				AddSmartPresencePackage(Prods, Plans);
				}
			else if (  Plans[0].contains("Online Foundation Solution")
						|| Plans[0].contains("Foundation + 1 Ad Campaign")
						|| Plans[0].contains("Foundation + Display & Social")
						|| Plans[0].contains("Foundation + Display & Search - Small")
						|| Plans[0].contains("Foundation + Display & Search - Medium")
						|| Plans[0].contains("Foundation + Display & Search - Large")
						|| Plans[0].contains("Foundation + Social & Search - Small")
						|| Plans[0].contains("Foundation + Social & Search - Medium")
						|| Plans[0].contains("Foundation + Social & Search - Large")

						
						
						
													)
					{	
				System.out.println("Initiated AddFoundationPackage method for Solutions Products " + Prods[i]);
				AddFoundationPackage(Prods, Plans);
					/*LOGS.info(Thread.currentThread() +"Initiated AddPackageDetails method for Solutions Products" + Prods[i] );
				    AddPackageDetails(Prods, Plans);*/
					LOGS.info(Thread.currentThread() +" completed adding package details");
					ImageName = "AfterAddingBudgetDetails";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (BundlePriceValidation.equalsIgnoreCase("True")) {
						LOGS.info(Thread.currentThread() +"Initiated Bundle Price Validation method");
						BundlePriceValid(Prods, Plans);
					}
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(6000);
					
					try {
						LOGS.info("Waiting for Page to load Completely");
						driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
						WebDriverWait wait1 = new WebDriverWait(driver, 5);
						//wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
					
					}catch(Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
						}
					
					//wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
					//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Configure Products']")));
					LOGS.info(Thread.currentThread() +"Clicking Save button on Configure Products page-Solutions");
					//wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
					driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);
					//wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
					//SLocator("Save").click();
					
					LOGS.info(Thread.currentThread() +"Clicked Save button on Configure Products page-Solutions");
		            
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(6000);

				} 
				else if (Prods[i].equalsIgnoreCase(OR.getProperty("19"))) {
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(6000);
					SLocator("Save").click();
					LOGS.info(Thread.currentThread() +"Clicked Save button on Configure Products page-Presence Foundation page");
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(6000);
				} else {
					if ((Prods[i].equalsIgnoreCase(OR.getProperty("09")))
							|| (Prods[i].equalsIgnoreCase("Social Starter Solution"))
							|| (Prods[i].equalsIgnoreCase(OR.getProperty("10"))) || (Prods[i].contains("Mobile Boost"))
							|| (Prods[i].equalsIgnoreCase("Search (A la carte)"))
							|| (Prods[i].contains(OR.getProperty("11")))) {
						
						LOGS.info(Thread.currentThread() +"Initiating EnterBudget method----1");

						//EnterBudget(Prods[i], Plans[j]);
						
						for(int k=0;k<Plans.length;k++) {
							if(Prods[i].equalsIgnoreCase(Plans[k])||((Prods[i].equalsIgnoreCase("Social Starter Solution"))&&Plans[k].equalsIgnoreCase("Social"))) {
								
								LOGS.info(Thread.currentThread() +"Value for 'K' is: "+Plans[k]);
								
								EnterBudget(Prods[i], Plans[k]);
							}
							
							else {
								LOGS.info(Thread.currentThread() +"Initiating EnterBudget method----2");
								EnterBudget(Prods[i], Plans[j]);
							}
						}

						if (Prods[i].equalsIgnoreCase(OR.getProperty("02"))) {
							//Thread.sleep(3000);
							try {
								SLocator("Save").click();
								LOGS.info(Thread.currentThread() +"Save btn clicked ");
							} catch (Exception e) {
								SLocator("Save").click();
								LOGS.info(Thread.currentThread() +"Edit Save clicked ");
								//Thread.sleep(2000);
							}
							LOGS.info(Thread.currentThread() +"Clicked on Save after selecting Display plan");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							//Thread.sleep(3000);
						}

					}
					// else if ((Prods[i].equalsIgnoreCase("Search - Guaranteed Clicks"))) {
					else if ((Prods[i].equalsIgnoreCase(OR.getProperty("08")))) {

						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						if (clicks_45.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("45 Clicks - $140");
							LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
						} else if (clicks_60.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("60 Clicks - $185");
							LOGS.info(Thread.currentThread() +"Selected : 60 Clicks - $185");
						} else if (clicks_90.equalsIgnoreCase("True")) {
							guaranteedClicks.selectByVisibleText("90 Clicks - $270");
							LOGS.info(Thread.currentThread() +"Selected : 90 Clicks - $270");
						} else {
							guaranteedClicks.selectByVisibleText("45 Clicks - $140");
							LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
						}

						
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
						//SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked on Save Button");
						//Thread.sleep(5000);

					} else if (!((Prods[i].contains("Listings Management")) || (Prods[i].equalsIgnoreCase("Reviews"))
							// || (Prods[i].equalsIgnoreCase("Reputation")
							|| (Prods[i].equalsIgnoreCase(OR.getProperty("06"))
									|| (PackageProd.equalsIgnoreCase("True"))))) {
						LOGS.info(Thread.currentThread() +"Checking the Checkbox of Plan");
						try {
							//wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProWebCBDynamic1_" + Plans[j] + "_AddProWebCBDynamic2")));
							//wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProWebCBDynamic1_" + Plans[j] + "_AddProWebCBDynamic2"))).click();
							//SLocatorDynamic("AddProWebCBDynamic1_" + Plans[j] + "_AddProWebCBDynamic2").click();
							
							//-------------------------- Shadow DOM Elements for selecting Website Products --------------------
							AddWebsitesPackage(Prods, Plans);
							
						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"Checked the Checkbox of Plan not required");
						}
//						if (addOnValidate.equalsIgnoreCase("true")) {
//							System.out.println("inside addOnValidate" + addOnValidate);
//							// addProdAddonvalidation(Prods, Plans);
//							//Addonvalidate(Plans[j]);
//						}
//
//						
					}
				}
				if (cancelORGprod.equalsIgnoreCase("true")) {/*
					List<WebElement> ProdRowsAfter = driver
							.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
					int RowsAfterAdd = ProdRowsAfter.size();
					if (AddingSecondProd.equalsIgnoreCase("True")) {
						List<WebElement> AddedProd = driver.findElements(
								By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row/descendant::img"));
						for (WebElement CM : AddedProd) {
							String GreenCheckValid = CM.getAttribute("alt");
							if (GreenCheckValid.equalsIgnoreCase("check")) {
								Status = "Pass";
							}
						}
					}
					Thread.sleep(3000);

					// driver.findElement(By.xpath("//sf-le-table-header[@id='header']//following::sf-le-table-row[1]/div[1]/div[1]/div[2]/div[1]")).click();

					driver.findElement(By.xpath("//div[@class='checkboxcontainer style-scope sf-le-table-row'][1]"))
					.click();
					LOGS.info(Thread.currentThread() +"1st product to delete");

					Thread.sleep(3000);

					Select cancelreason = new Select(driver.findElement(By.xpath(
							"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

					cancelreason.selectByVisibleText("Domain Issue");
					LOGS.info(Thread.currentThread() +"Cancellation Reason selected");

					Select canceltype = new Select(driver.findElement(By.xpath(
							"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

					canceltype.selectByVisibleText("Credit");
					LOGS.info(Thread.currentThread() +"Cancellation type selected");
					SLocator("QuickSavebtn").click();
					LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
					int RowsToIterate = RowsAfterAdd - RowsBeforeAdd;
					LOGS.info(Thread.currentThread() +"Rows to iterate : " + RowsToIterate);
					for (i = 0; i < RowsToIterate; i++) {
						Iterator<WebElement> itr = ProdRowsAfter.iterator();
						while (itr.hasNext()) {
							String cancelValue = itr.next().getAttribute("alt");
							LOGS.info(Thread.currentThread() +"Value of Line Action: " + cancelValue);
							if (cancelValue.equalsIgnoreCase("X")) {
								Status = "Pass";
							}
						}
					}
					ExpRes = "cancelreason caceltype should given before cancel product ";
					ActRes = "cancelreason caceltype  selected before cancel product ";
					ImageName = "EditquoteForCancel";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				*/}

				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				//Thread.sleep(5000);

				ImageName = "AddingProd";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				//Thread.sleep(3000);
				
				if (ToggleDisc.equalsIgnoreCase("True")) {
					SLocator("ProdDrawer").click();
					LOGS.info(Thread.currentThread() +"Clicked on Product drawer");
					WebElement DiscApplied = SLocatorDynamic(
							"AdditionalDisc1_" + "Website Design Fee" + "_AdditionalDisc2");
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", DiscApplied);
					LOGS.info(Thread.currentThread() +"Scrolled to view discount");
					String Disc = DiscApplied.getText();
					LOGS.info(Thread.currentThread() +"Discounted Percentage: " + Disc);
					ExpRes = "100% discount on web design fee should be auto applied";
					ImageName = "DiscApplied";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Disc.equalsIgnoreCase("100.00%")) {
						LOGS.info(Thread.currentThread() +"Promotional Discount is applied");
						Status = "Pass";
						ActRes = "Auto applied discount % on Web design fee is: " + Disc;
						ExportResults.exportTestResult(
								"Discount Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Promotional Discount is applied");
						Status = "Fail";
						ActRes = "Auto applied discount % on Web design fee is: " + Disc;
						ExportResults.exportTestResult(
								"Discount Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					LOGS.info(Thread.currentThread() +"Removing the applied discount");
					SLocatorDynamic("RemoveDisc1_" + "Website Design Fee" + "_RemoveDisc2").click();
					LOGS.info(Thread.currentThread() +"Checked the checkbox of Remove Discount");
					SLocator("QuickSavebtn").click();
					LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
					Disc = DiscApplied.getText();
					LOGS.info(Thread.currentThread() +"Discounted Percentage: " + Disc);
					ExpRes = "Discount should be removed";
					ImageName = "DiscApplied";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Disc.equalsIgnoreCase(" ")) {
						LOGS.info(Thread.currentThread() +"Promotional Discount is applied");
						Status = "Pass";
						ActRes = "Auto applied discount % on Web design fee is: " + Disc;
						ExportResults.exportTestResult(
								"Discount Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Promotional Discount is applied");
						Status = "Fail";
						ActRes = "Auto applied discount % on Web design fee is: " + Disc;
						ExportResults.exportTestResult(
								"Discount Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				}

				// ValidateTermFlag is used for DIG_2169
				if (ValidateTermFlag.equalsIgnoreCase("True")) {/*

					LOGS.info(Thread.currentThread() +"Validating Terms in QLE page, BudgetToEnter: " + BudgetToEnter);
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					Thread.sleep(5000);
					SLocator("fullScreenModeIcon").click();
					Thread.sleep(3000);
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					Thread.sleep(5000);

					if ((TestCaseName.equalsIgnoreCase("DIG_2169_2398"))
							|| (Prods[0].equalsIgnoreCase("Presence + Performance Sync"))
							|| Prods[0].equalsIgnoreCase(OR.getProperty("02"))) {

						if (Plans[0].equalsIgnoreCase("Site + Search")) {
							SLocator("SitePlusSearchDrawer").click();
							Thread.sleep(4000);
							LOGS.info(Thread.currentThread() +"Clicked on Product Name Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(3000);

							((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
									SLocator("SitePlusSearchTerm"));
							LOGS.info(Thread.currentThread() +"Scrolled down");

							Term = SLocator("SitePlusSearchTerm").getText();
							LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Site + Search is -" + Term);
							Thread.sleep(3000);

							ImageName = "TermPriceSitePlusSearch";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

							if ((BudgetToEnter >= 399) && (BudgetToEnter < 2999)) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Site+Search is '6 months Package Term'";

								if (Term.equalsIgnoreCase("6 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product-Site+Search");
									ActRes = "Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product - Site+Search" + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term for Site+Search is " + Term + " for the price " + BudgetToEnter
											+ " for the Product - Site+Search";
									Status = "Fail";
								}

							} else if (BudgetToEnter > 2998) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Site+Search is '6 months Package Term' ";

								if (Term.equalsIgnoreCase("6 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product-Site+Search");
									ActRes = "Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product - Site+Search" + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term for Site+Search is " + Term + " for the price " + BudgetToEnter
											+ " for the Product - Site+Search";
									Status = "Fail";
								}
								
							} else {
								ExpRes = "Minimum Budget should be $399";
								ActRes = "Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $399";
								Status = "Fail";
								LOGS.info(Thread.currentThread() +"Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $399");
								count = count + 1;
								// driver.quit();
							}

							ExportResults.exportTestResult("Validate Term Price for Site+Search, " + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

							SLocator("SitePlusSearchDrawer").click();
							Thread.sleep(4000);
							LOGS.info(Thread.currentThread() +"Clicked on Product Name Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(3000);

							((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
									SLocator("ManagedSearchDrawer"));
							LOGS.info(Thread.currentThread() +"Scrolled down");
							Thread.sleep(3000);
							driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
							Thread.sleep(4000);

							SLocator("ManagedSearchDrawer").click();
							Thread.sleep(3000);
							LOGS.info(Thread.currentThread() +"Clicked on Search Product Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(3000);

							Term1 = SLocator("ManagedSearchTerm").getText();
							LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Managed Search is -" + Term1);

							ImageName = "TermPriceManagedSearch";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

							if ((BudgetToEnter >= 399) && (BudgetToEnter < 2999)) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Managed Search is '3 months Package Term'";

								if (Term1.equalsIgnoreCase("3 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term for Budget - " + BudgetToEnter + " for Managed Search is " + Term1);
									ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1
											+ " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1;
									Status = "Fail";
								}

							} else if (BudgetToEnter > 2998) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Managed Search is '3 months Package Term'";

								if (Term1.equalsIgnoreCase("3 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term for Budget - " + BudgetToEnter + " for Managed Search is " + Term1);
									ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1
											+ " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1;
									Status = "Fail";
								}

							} else {
								ExpRes = "Minimum Budget should be $399";
								ActRes = "Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $399";
								Status = "Fail";
								LOGS.info(Thread.currentThread() +"Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $399");
								count = count + 1;
								// driver.quit();
							}

							ExportResults.exportTestResult("Validate Term Price for Managed Search, " + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						} else if (Plans[0].equalsIgnoreCase("Site + Social")) {

							SLocator("SitePlusSocialDrawer").click();
							LOGS.info(Thread.currentThread() +"Clicked on Product Name Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(4000);

							((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
									SLocator("SitePlusSocialTerm"));
							LOGS.info(Thread.currentThread() +"Scrolled down");

							Term = SLocator("SitePlusSocialTerm").getText();
							LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Site + Social is -" + Term);
							Thread.sleep(3000);

							ImageName = "TermPriceSitePlusSearch";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

							if ((BudgetToEnter >= 249) && (BudgetToEnter < 1499)) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Site+Social is '6 months Package Term'";

								if (Term.equalsIgnoreCase("6 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product-Site+Social");
									ActRes = "Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product - Site+Social" + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term-" + Term + " for the price " + BudgetToEnter
											+ " for the Product - Site+Social";
									Status = "Fail";
								}

							} else if (BudgetToEnter > 1498) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Site+Social is '6 months Package Term' ";

								if (Term.equalsIgnoreCase("6 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product-Site+Social");
									ActRes = "Term-" + Term + " for the Budget-" + BudgetToEnter
											+ " for the Product - Site+Social" + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term-" + Term + " for the price " + BudgetToEnter
											+ " for the Product - Site+Social";
									Status = "Fail";
								}

							} else {
								ExpRes = "Minimum Budget should be $249";
								ActRes = "Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $249";
								Status = "Fail";
								LOGS.info(Thread.currentThread() +"Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $249");
								count = count + 1;
								// driver.quit();
							}

							ExportResults.exportTestResult("Validate Term Price for Site+Social, " + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

							SLocator("SitePlusSocialDrawer").click();
							LOGS.info(Thread.currentThread() +"Clicked on Product Name Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(4000);

							((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
									SLocator("SocialDrawer"));
							LOGS.info(Thread.currentThread() +"Scrolled down");
							Thread.sleep(3000);
							driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
							Thread.sleep(4000);

							SLocator("SocialDrawer").click();
							LOGS.info(Thread.currentThread() +"Clicked on Social Product Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(5000);

							Term1 = SLocator("SocialTerm").getText();
							LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Social is -" + Term1);

							ImageName = "TermSitePlusSocial";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

							if ((BudgetToEnter >= 249) && (BudgetToEnter < 1499)) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ "Social Ala Carte is '6 months Package Term'";

								if (Term1.equalsIgnoreCase("6 months Package Term")) {
									LOGS.info(Thread.currentThread() +"Term for Social Ala carte is " + Term1 + " as Expected");
									ActRes = "Term for Social Ala carte is " + Term1 + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term for Social Ala carte is " + Term1;
									Status = "Fail";
								}

							} else if ((BudgetToEnter >= 1499)) {
								ExpRes = "Term for Budget - " + BudgetToEnter
										+ " for Social Ala carte is '3 months Package Term'";

								if (Term1.equalsIgnoreCase("3 months Package Term")) {
									LOGS.info(Thread.currentThread() +
											"Term for Budget - " + BudgetToEnter + " for Social Ala carte is " + Term1);
									ActRes = "Term for Social Ala Carte is " + Term1 + " as Expected";
									Status = "Pass";
								} else {
									ActRes = "Term for Social Ala Carte is " + Term1;
									Status = "Fail";
								}

							} else {
								ExpRes = "Minimum Budget should be $249";
								ActRes = "Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $249";
								LOGS.info(Thread.currentThread() +"Entered Budget Amount is " + BudgetToEnter
										+ " - It should be Greater than OR Equal to $249");
								count = count + 1;
								// driver.quit();
							}

							ExportResults.exportTestResult("Validate Term Price for Social Ala Carte, " + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

							SLocator("SocialDrawer").click();
							LOGS.info(Thread.currentThread() +"Clicked on Social Product Drawer icon");
							driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
							Thread.sleep(5000);

						}

						// SLocatorDynamic("ProdNameDrawerDynamic1_" + PlanName +
						// "_ProdNameDrawerDynamic2").click();
					} else if (TestCaseName.equalsIgnoreCase("DIG_2169_2769")) {

						SLocator("SitePlusSocialDrawer").click();
						LOGS.info(Thread.currentThread() +"Clicked on Product Name Drawer icon");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						Thread.sleep(4000);

						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("SitePlusSocialTerm"));
						LOGS.info(Thread.currentThread() +"Scrolled down");

						
						 * JavascriptExecutor jse2 = (JavascriptExecutor) driver;
						 * jse2.executeScript("window.scrollBy(0,1200)", "");
						 

						String Term = SLocator("SitePlusSocialTerm").getText();
						LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Site + Social is -" + Term);

						SLocator("SocialDrawer").click();
						LOGS.info(Thread.currentThread() +"Clicked on Social Product Drawer icon");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						Thread.sleep(5000);

						String Term1 = SLocator("SocialTerm").getText();
						LOGS.info(Thread.currentThread() +"Term for Budget with Social is -" + Term1);

						ImageName = "TermSitePlusSearchAndManagedSearch";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						// if (BudgetToEnter > 2998){
						ExpRes = "Term for Budget - " + BudgetToEnter
								+ " for Site+Social is '6 months Package Term' and Managed Search is '3 months Package Term'";

						if (Term.equalsIgnoreCase("6 months Package Term")) {
							if (Term1.equalsIgnoreCase("6 months Package Term")) {
								LOGS.info(Thread.currentThread() +"Term for Budget - " + BudgetToEnter + " for Site+Social is " + Term
										+ " and Social is " + Term1);
								ActRes = "Term for Site+Social is " + Term + " and Social is " + Term1 + " as Expected";
								Status = "Pass";
							} else {
								ActRes = "Term for Site+Social is " + Term + "and Social is " + Term1;
								Status = "Fail";
							}
						} else {
							LOGS.info(Thread.currentThread() +"Term for Site+Social is " + Term + " and Social is " + Term1);
							ActRes = "Term for Site+Social is " + Term + " and Social is " + Term1;
							Status = "Fail";
						}

						

						ExportResults.exportTestResult("Validate Term for Site+Social and Social, " + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					} else if (Prods[0].equalsIgnoreCase("Search - Guaranteed Clicks")
							|| Prods[0].equalsIgnoreCase(OR.getProperty("08"))) {

						LOGS.info(Thread.currentThread() +"Cn Search Product Drawer icon");
						SLocator("SGclicksDrawer").click();
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Search Product Drawer icon");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						Thread.sleep(3000);

						Term1 = SLocator("SGclicksTerm").getText();
						LOGS.info(Thread.currentThread() +"Term for Budget with Search Clicks is -" + Term1);

						ImageName = "TermPriceManagedSearch";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						ExpRes = "Term for Budget Search Clicks Search is '12 months Package Term'";

						if (Term1.equalsIgnoreCase("12 months Package Term")) {
							LOGS.info(Thread.currentThread() +"Term for Budget for Search Clicks is " + Term1);
							ActRes = "Term for Budget for Search Clicks is " + Term1 + " as Expected";
							Status = "Pass";
						} else {
							ActRes = "Term for Budget for Search Clicks is " + Term1;
							Status = "Fail";
						}

					} else if (Prods[0].equalsIgnoreCase("Search (a la carte)")
							|| Prods[0].equalsIgnoreCase(OR.getProperty("09"))) {

						SLocator("ManagedSearchDrawer").click();
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Search Product Drawer icon");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						Thread.sleep(3000);

						Term = SLocator("ManagedSearchTerm").getText();
						LOGS.info(Thread.currentThread() +"Term for Budget " + BudgetToEnter + " with Managed Search is -" + Term1);

						ImageName = "TermPriceManagedSearch";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						if ((BudgetToEnter >= 399) && (BudgetToEnter < 2999)) {
							ExpRes = "Term for Budget - " + BudgetToEnter
									+ " for Managed Search is '6 months Package Term'";

							if (Term1.equalsIgnoreCase("3 months Package Term")) {
								LOGS.info(Thread.currentThread() +"Term for Budget - " + BudgetToEnter + " for Managed Search is " + Term1);
								ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1
										+ " as Expected";
								Status = "Pass";
							} else {
								ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1;
								Status = "Fail";
							}

						} else if (BudgetToEnter > 2998) {
							ExpRes = "Term for Budget - " + BudgetToEnter
									+ " for Managed Search is '3 months Package Term'";

							if (Term1.equalsIgnoreCase("3 months Package Term")) {
								LOGS.info(Thread.currentThread() +"Term for Budget - " + BudgetToEnter + " for Managed Search is " + Term1);
								ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1
										+ " as Expected";
								Status = "Pass";
							} else {
								ActRes = "Term Price-" + BudgetToEnter + " for Managed Search is " + Term1;
								Status = "Fail";
							}

						}

					}

					SLocator("fullScreenModeIcon").click();
					Thread.sleep(3000);
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					Thread.sleep(5000);

					// count=count+1;
					LOGS.info(Thread.currentThread() +"End of Term Validation in QLE");
				*/}

				ExpRes = "Added Product landed to Quote Line Editor verification";
				ActRes = "Product -'" + Plans[0] + "' landed in Quote Line Editor";
				Status = "Pass";
				ExportResults.exportTestResult(
						"Product verification in QLE page :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			
			//Thread.sleep(10000);
			 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
			 
			//LR Budget Validation in QLE
			 /*
			  if(Prods[0].contains("a la carte")||Prods[0].contains("Search - Guaranteed Clicks") ||
					  Prods[0].trim().contains("Listings") || Prods[0].trim().contains("Reviews") ||
					  LRSelection.trim().equalsIgnoreCase("WithoutLRBudgetEstimate")) {
					 
					 LOGS.info(Thread.currentThread() +"For 'Ala Carte' products, we don't need LR budgte estimation!");
					 
				 }
				else {
				 
				// Thread.sleep(10000);
				driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(text(),'Local Ranking')]//parent::div//following-sibling::div[@field='CPQ_Monthly_Investment__c']")));
				String MONTHLYINVESTLR = driver.findElement(By.xpath("//div[contains(text(),'Local Ranking')]//parent::div//following-sibling::div[@field='CPQ_Monthly_Investment__c']")).getText();
				LOGS.info(Thread.currentThread() +"Local Ranking Budget on QLE  :" +MONTHLYINVESTLR); 
				MONTHLYINVESTLR = MONTHLYINVESTLR.replace(",", "");
				MONTHLYINVESTLR = MONTHLYINVESTLR.replace("$", "");
				if(BdgetAmount.equalsIgnoreCase(MONTHLYINVESTLR)){
					LOGS.info(Thread.currentThread() +"Budget Value Matches For Local Ranking Product at QLE");
				}
				else{
					LOGS.info(Thread.currentThread() +"Budget Value MisMatch For Local Ranking Product at QLE");
				 }
			}
			  */
			 
			  // Assistant addon validations at QLE 
			  /*
			  if(AssistantSelection.trim().equalsIgnoreCase("WithAssistant")) {
				 	driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(text(),'Assistant')]//parent::div//following-sibling::div[@field='CPQ_Monthly_Investment__c']")));
					String MONTHLYINVESTAst = driver.findElement(By.xpath("//div[contains(text(),'Assistant')]//parent::div//following-sibling::div[@field='CPQ_Monthly_Investment__c']")).getText();
					LOGS.info(Thread.currentThread() +"Assistant addon and its amount on QLE  :" +MONTHLYINVESTAst); 
					MONTHLYINVESTAst = MONTHLYINVESTAst.replace(",", "");
					MONTHLYINVESTAst = MONTHLYINVESTAst.replace("$", "");
					if(!MONTHLYINVESTAst.equalsIgnoreCase("")){
						LOGS.info(Thread.currentThread() +"Asisstant addon added with amount at QLE: "+MONTHLYINVESTAst+" is PASSED");
						Status = "Pass";
					}
					else{
						LOGS.info(Thread.currentThread() +"Asisstant addon added with amount at QLE: "+MONTHLYINVESTAst+" is Failed");
						Status = "Fail";
					 }
					ExpRes = "Assistant addon Validation with amount";
					ActRes = "Assistant addon added to QLE with the amount: "+MONTHLYINVESTAst;					
					ExportResults.exportTestResult(
							"Product verification in QLE page :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			  }
			  */
			  //Validations code completed for assistant	
			 
			 
			 
			/*driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
			String MONTHLYINVESTLR = driver.findElement(By.xpath("//div[contains(text(),'Local Ranking')]//parent::div//following-sibling::div[@field='CPQ_Monthly_Investment__c']")).getText();
			LOGS.info(Thread.currentThread() +"Local Ranking Budget on QLE  :" +MONTHLYINVESTLR); 
			MONTHLYINVESTLR = MONTHLYINVESTLR.replace(",", "");
			if(BdgetAmount.equalsIgnoreCase(MONTHLYINVESTLR)){
				LOGS.info(Thread.currentThread() +"Budget Value Matches For Local Ranking Product at QLE");
			}
			else{
				LOGS.info(Thread.currentThread() +"Budget Value MisMatch For Local Ranking Product at QLE");
			}*/
			//Thread.sleep(6000);
			 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(40));
			// Thread.sleep(2000);
             //Thread.sleep(5000);
			// wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
			 
			//((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", SLocator("SaveBtn"));
			LOGS.info(Thread.currentThread() +"Scrolled Up");
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
			//Thread.sleep(4000);
			if(Day1.equalsIgnoreCase("True")) {
				try {
					LOGS.info("Waiting for Page to load Completely");
					driver.manage().timeouts().implicitlyWait(9, TimeUnit.SECONDS);
					WebDriverWait waitafterQucikSaveBtn = new WebDriverWait(driver, 15);
					waitafterQucikSaveBtn.until(ExpectedConditions
							.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
				} catch (Exception ex) {
					LOGS.info("Wait is over and the Pocess continues.");
				}
				
				//wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
				//wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn"))).click();
				//SLocator("SaveBtn").click();

				// ------------------------- Shadow DOM for quick save on quote page -------------------------------
				
				if(Day3.equalsIgnoreCase("true"))
				{
					WebElement shadowDomHostElement25 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
					WebElement shadowDomHostElement26 = last22.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
					SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
					WebElement shadowDomHostElement27 = last23.findElement(By.cssSelector("sb-custom-action[name='Calculate']"));
					SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement27);
					WebElement shadowDomHostElement28 = last24.findElement(By.cssSelector("#mainButton"));
					wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement28));
					shadowDomHostElement28.click();
					
												
					LOGS.info(Thread.currentThread() + "Clicked on Calculate button");
				}
				// ------------------ Shadow DOM for SAVE btn in Quote Page ----------------------------------
				
				Thread.sleep(1000);
				WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
				SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
				Thread.sleep(1000);
				WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
				SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
				Thread.sleep(1000);
				WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("sb-custom-action[name='Save and Select Subscriptions']"));
				SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
				Thread.sleep(1000);
				last2.findElement(By.cssSelector("#mainButton")).click();
							
				// ------------------ Shadow DOM for SAVE btn in Quote Page ----------------------------------
				 
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
				
				//---------------------- Handling Solution Recommendation Alert - shadow dom ----------------
				
				try {
					
					LOGS.info("Inside try, Looking for any recommendation alert.....");
					
					driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					
					ArrayList<String> popAlert = new ArrayList<String>(driver.getWindowHandles());
					driver.switchTo().window(popAlert.get(1));
					
					WebElement shadowDomHostElement600 = driver.findElement(By.cssSelector("#sbPageContainer"));
					SearchContext last600 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement600);
					WebElement shadowDomHostElement601 = last600.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
					SearchContext last601 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement601);
					WebElement shadowDomHostElement602 = last601.findElement(By.cssSelector("#productAlertModal"));
					SearchContext last602 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement602);
					last602.findElement(By.cssSelector("#continue")).click();
					LOGS.info("Clicked on Continue Button on Alert .....");
					
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
					
					ImageName1 = "AlertMsg";
					ImgName = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
					ExpRes = "Product Should be added successfully";
					ActRes = "Product added successfully";
					Status = "Pass";
					ExportResults
					.exportTestResult("Adding Product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					
					driver.switchTo().defaultContent();
				}
				catch(Exception e)
				{
					ImageName1 = "AlertMsg";
					ImgName = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
					ExpRes = "Product Should be added successfully";
					ActRes = "Product added successfully";
					Status = "Pass";
					ExportResults
					.exportTestResult("Adding Product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					//e.printStackTrace();
					LOGS.info(Thread.currentThread() +"No Alert");
					LOGS.error("Alert Error"+e.getMessage());
					
				}
				
				// Handling Listings page after QLE Save ...................................
				// commented on 15-02-2022
			
				try {
					/// verify address page
					LOGS.info("I am going to click yes on verify address page");
					wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[text()='Yes']")));
					LOGS.info("Verify address yes button is clickabale");
					Thread.sleep(2000);
					driver.findElement(By.xpath("//button[text()='Yes']")).click();
					LOGS.info("I have clicked yes on verify address page");
					Thread.sleep(3000);
					
					ArrayList<String> pop = new ArrayList<String>(driver.getWindowHandles());
					LOGS.info("this is the size of total windows " + pop.size());
					if(Day3.equalsIgnoreCase("true"))
						driver.switchTo().window(pop.get(0));
					else
						driver.switchTo().window(pop.get(1));
					LOGS.info("Switched to new popup---3" +pop);
					WebElement Addressverify = driver.findElement(By.xpath("//b[contains(text(), 'Are')]"));
					Addressverify.getText();
					LOGS.info("I am the address verify new popup "+Addressverify);
					
					Thread.sleep(2000);
					wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//footer//button[@class='slds-button slds-button_outline-brand' and text()='Yes']")));
					driver.findElement(By.xpath("//footer//button[@class='slds-button slds-button_outline-brand' and text()='Yes']")).click();
					//driver.findElement(By.xpath("//div[@id='ltngvf']/c-hibu-lwc-verify-address-container/div/section/div/footer/lightning-button[1]/button")).click();
					
					//WebElement yesBtn = driver.findElement(By.xpath("//footer//button[@class='slds-button slds-button_outline-brand' and text()='Yes']"));
					//JavascriptExecutor js = (JavascriptExecutor)driver;
					//js.executeScript("arguments[0].click;", yesBtn);
					
					LOGS.info("I have clicked yes on verify address page popup");
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
					//end of verify address page
					}
					catch(Exception e)
					{
						LOGS.info("It is Not Required or there is some issue while clicking on Yes Btn for Listings.... ");
						LOGS.info(e);
					}
				
			}
			else {

			try {
				if ((!cancelProcessType.contains("LineItemCancel")) || (!cancelProcessType.contains("FullCancel")) || 
						(!cancelProcessType.contains("CancelLineItemAndAddNewProducts"))
						|| (!cancelProcessType.contains("FullCancelAndAddNewProducts"))) {
					
					
					
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("Calculatebtn")));
					SLocator("Calculatebtn").click();
					LOGS.info(Thread.currentThread() + "Clicked on Calculate button");
					// Thread.sleep(5000);

					try {
						LOGS.info("Waiting for Page to load Completely");
						driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
						WebDriverWait waitafterCalculateBtn = new WebDriverWait(driver, 15);
						waitafterCalculateBtn.until(ExpectedConditions
								.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
					} catch (Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
					}

					wait.until(ExpectedConditions.elementToBeClickable(SLocator("QuickSavebtn")));
					SLocator("QuickSavebtn").click();
					LOGS.info(Thread.currentThread() + "Clicked on Quick Save button");
					// Thread.sleep(5000);

					try {
						LOGS.info("Waiting for Page to load Completely");
						driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
						WebDriverWait waitafterQucikSaveBtn = new WebDriverWait(driver, 15);
						waitafterQucikSaveBtn.until(ExpectedConditions
								.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
					} catch (Exception ex) {
						LOGS.info("Wait is over and the Pocess continues.");
					}
					

					wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn"))).click();
					//SLocator("SaveBtn").click();
					 
					LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					//Thread.sleep(4000);
				}
			} catch (Exception e) {
				//Thread.sleep(4000);
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				 wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
				 wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn"))).click();
				//SLocator("SaveBtn").click();
				 
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page in catch");
				driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
				//Thread.sleep(4000);
			}
			}
			// if (prodslen > 1) {
			
			//----- old code to handle recommendation alert -------------------------
			 /*
			try {
				
				driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
				 driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				//Thread.sleep(3000);
				// WebDriverWait wait2 = new WebDriverWait(driver, 20);
				// wait2.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='error_0']")));
				List<WebElement> AlertError = driver.findElements(By.xpath("//*[@id='error_0']"));
				LOGS.info(Thread.currentThread() +"List: " + AlertError);
				if (!AlertError.isEmpty()) {

					// if(!SLocator("ErrorAlert").getText().isEmpty()) {
					//wait2.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='error_0']/div/h2[1]")));
					AlertMsg = driver.findElement(By.xpath("//*[@id='error_0']/div/h2[1]")).getText();
					LOGS.info(Thread.currentThread() +"Alert Message: " + AlertMsg);
					ImageName1 = "AlertMsg";
					ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Captured Alert message");
					driver.findElement(By.xpath("//*[@id='error_0']/button/i")).click();
					LOGS.info(Thread.currentThread() +"Clicked Cross on Alert dialog");
				} else {

					//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//footer[@id='footer']/paper-button")));
					List<WebElement> AlertVerify = driver.findElements(By.xpath("//footer[@id='footer']/paper-button"));
					LOGS.info(Thread.currentThread() +"List: " + AlertVerify);
					if (AlertVerify.isEmpty()) {
						LOGS.info(Thread.currentThread() +"No recommendation alert");
						AlertExists = "No";
						ImageName1 = "NoAlert";
						ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
						LOGS.info(Thread.currentThread() +"Value of Alert flag: " + AlertExists);
					} else {
						
						LOGS.info(Thread.currentThread() +"Solution Recommendation Alert is displayed");
						AlertMsg = SLocator("RecommendAlert").getText();
						LOGS.info(Thread.currentThread() +"Alert Message: " + AlertMsg);
						AlertMsg = AlertMsg.replace(",", "");
						LOGS.info(Thread.currentThread() +"Alert message after removing comma: " + AlertMsg);
						ImageName1 = "AlertMsg";
						ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
						LOGS.info(Thread.currentThread() +"Captured Alert message");
						SLocator("AlertContinueBtn").click();
						LOGS.info(Thread.currentThread() +"Clicked Continue on Alert dialog");

					}
				}

				//Thread.sleep(3000);
				ExpRes = "Product Should be added successfully";
				ActRes = "Product added successfully";
				Status = "Pass";
				ExportResults
				.exportTestResult("Adding Product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} catch (Exception e) {
				//Thread.sleep(3000);
				ExpRes = "Product Should be added successfully";
				ActRes = "Product added successfully";
				Status = "Pass";
				ExportResults
				.exportTestResult("Adding Product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				//e.printStackTrace();
				LOGS.info(Thread.currentThread() +"No Alert");
				LOGS.error("Alert Error"+e.getMessage());
			} */
			// }

		} catch (Exception e) {
			ExceptionMsg = "Exception Happened While Adding the Product to Quote";
			LOGS.info(Thread.currentThread() + "," +"Error in Add Product Page - " + e.getMessage());
			LOGS.info(Thread.currentThread() + "," +"Adding product failed");
			LOGS.error("Error : "+Thread.currentThread() +";"+ e);
			Status = "Fail";
			Jiracounter = "Exception";
			AddProdResult = "Fail";
			ImageName = "AddingProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult("Add Product:," + "Product should be added to quote successfully" + ","
					+ "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				
		}

	}
	

	public  ArrayList<String> captureProductName() {
		try {
			ArrayList<WebElement> prodList = (ArrayList<WebElement>) driver.findElements(By.xpath("//sf-le-table-row"));

			for (int i = 1; i < prodList.size(); i++) {
				ProductName.add(prodList.get(i)
						.findElement(By.xpath("//div/div/div[@field='SBQQ__ProductName__c']/div")).getText());

			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Same Error encountered while Capturing the Product Description");
			e.printStackTrace();
		}
		return ProductName;
	}

	public  ArrayList<String> captureProductDescription() {
		try {
			ArrayList<WebElement> prodList = (ArrayList<WebElement>) driver.findElements(By.xpath("//sf-le-table-row"));

			for (int i = 2; i < prodList.size(); i++)

			{
				String DynamicProdPath = "//sf-le-table-row[" + i
						+ "]/descendant::div[@field='SBQQ__Description__c']/div/div";
				String Desc = driver.findElement(By.xpath(DynamicProdPath)).getText();
				LOGS.info(Thread.currentThread() +"Product Description is :" + Desc);

				ProductDescription.add(Desc);
			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Same Error encountered while Capturing the Product Description");
			e.printStackTrace();
		}
		return ProductDescription;
	}

	public  String AddProdsToQuote(String[] ProdName, String[] PlanName) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Execution of Adding Products to Quote method started");
			SLocator("Quote").click();
			LOGS.info(Thread.currentThread() +"Clicked on created quote number from Opp Page");
			SLocator("EditLinesBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Edit Lines Button");
			AddingProduct(ProdName, PlanName);
			Thread.sleep(3000);
			SLocator("Save").click();
			LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
			SLocator("Opptlink").click();
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicked on Opp Link on Quote page");
			JavascriptExecutor jse2 = (JavascriptExecutor) driver;
			jse2.executeScript("window.scrollBy(0,1200)", "");
			SLocator("ShowMore").click();
			LOGS.info(Thread.currentThread() +"Clicked on Show more");
			Thread.sleep(3000);
			ExpRes = "Newly added Product should appear in Products section of Opp";
			ImageName = "AddedProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			WebElement ele = driver.findElement(By
					.xpath("//th[contains(text(),'Product')]//parent::tr//following-sibling::tr/th/a[contains(text(),'"
							+ PlanName + "')]"));
			if (ele.isDisplayed()) {
				LOGS.info(Thread.currentThread() +"Verifying if newly added product is dispalyed in opportunity");
				ActRes = "Newly added Products appear in Products section of Opp";
				Status = "Pass";
				AddProdResult = "Pass";
				ExportResults.exportTestResult(
						"Add Product to Quote," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		} catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			AddProdResult = "Fail";
			ExportResults.exportTestResult("Add Product to Quote :," + "Product should be added to quote successfully"
					+ "," + "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return AddProdResult;
	}

	// ***************************************************************************************************
	public  String FutureStartDateVal(String ProdName) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Future Start Date validation method started");
			SLocator("ProdDrawer").click();
			LOGS.info(Thread.currentThread() +"Clicked on Drawer icon next to Montly Investment");
			SLocatorDynamic("FutureStartDate1_" + ProdName + "_FutureStartDate2").click();
			LOGS.info(Thread.currentThread() +"Clicked on Future Start Date edit area");
			SLocator("CalendarIcon").click();
			LOGS.info(Thread.currentThread() +"Clicked on calendar icon");
			try {
				LOGS.info(Thread.currentThread() +"Selecting Future start date less than 30 days");
				SLocator("LessThirtyDays").click();
				LOGS.info(Thread.currentThread() +"Selected next day of current date");
				SLocator("QuickSave").click();
				LOGS.info(Thread.currentThread() +"Clicked on Quick Save Button");
				if ((ProdName.contains("Search")) || (ProdName.contains("Display")) || (ProdName.contains("Social"))) {
					ExpValMsg = "Future Start Date can not be less than 30 days from today.";
				} else {
					ExpValMsg = "Future start is not available for this product";
				}
				String ValMsg = SLocator("FutStrtValMsg").getText();
				LOGS.info(Thread.currentThread() +"Validation Mesage: " + ValMsg);
				ExpRes = "Validation rule should block selecting future start date";
				ImageName = "ValMsgLT30days";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (ExpValMsg.equalsIgnoreCase(ValMsg)) {
					LOGS.info(Thread.currentThread() +"Validation error is thrown as expected");
					ActRes = "Validation rule threw error message";
					Status = "Pass";
					FutStrtRes = "Pass";
					ExportResults.exportTestResult("Future Start Date less than 30 days," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Validation error is not thrown");
					ActRes = "Validation rule did not throw error message";
					Status = "Fail";
					FutStrtRes = "Fail";
					ExportResults.exportTestResult("Future Start Date less than 30 days," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);
				}
				SLocator("FStrtNotifyCls").click();
				LOGS.info(Thread.currentThread() +"Closed validation error message");
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"There is some error validating future start date error msg");
				Status = "Fail";
				FutStrtRes = "Fail";
				ExportResults.exportTestResult(
						"Future Start Date less than 30 days :," + "Validation message should be thrown" + ","
								+ "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			try {
				LOGS.info(Thread.currentThread() +"Selecting Future start date between 30 to 90 days");
				SLocatorDynamic("FutureStartDate1_" + ProdName + "_FutureStartDate2").click();
				LOGS.info(Thread.currentThread() +"Clicked on Future Start Date edit area");
				SLocator("CalendarIcon").click();
				LOGS.info(Thread.currentThread() +"Clicked on calendar icon");
				SLocator("CalMnthNavRt").click();
				LOGS.info(Thread.currentThread() +"Navigated to Next month");
				SLocator("CalMnthNavRt").click();
				LOGS.info(Thread.currentThread() +"Navigated to Next month");
				SLocator("GrtrThirtyDays").click();
				LOGS.info(Thread.currentThread() +"Selected a date range between 30 and 90 days");
				SLocator("QuickSave").click();
				LOGS.info(Thread.currentThread() +"Clicked on Quick Save Button");
				Thread.sleep(5000);
				ImageName = "ValMsg30To90days";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if ((ProdName.contains("Search")) || (ProdName.contains("Display")) || (ProdName.contains("Social"))) {
					ExpRes = "Future Start date should be saved successfully";
					LOGS.info(Thread.currentThread() +"Verifying no validation message for SAMI plans");
					List<WebElement> Notify = driver.findElements(By.xpath("//div[@id='toastContainer']//child::div"));
					int size = Notify.size();
					if (size == 0) {
						LOGS.info(Thread.currentThread() +"Future Start date saved, no validation message");
						ActRes = "Future Start date saved successfully";
						Status = "Pass";
						FutStrtRes = "Pass";
						ExportResults.exportTestResult("Future Start Date between 30 and 90 days," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Future Start date not saved");
						ActRes = "Saving Future Start date was unsuccessful";
						Status = "Fail";
						FutStrtRes = "Fail";
						ExportResults.exportTestResult("Future Start Date between 30 and 90 days," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}

				} else {
					String ExpValMsg = "Future start is not available for this product";
					String ValMsg = SLocator("FutStrtValMsg").getText();
					LOGS.info(Thread.currentThread() +"Validation Mesage: " + ValMsg);
					ExpRes = "Validation rule should block selecting future start date";
					if (ExpValMsg.equalsIgnoreCase(ValMsg)) {
						LOGS.info(Thread.currentThread() +"Validation error is thrown as expected");
						ActRes = "Validation rule threw error message";
						Status = "Pass";
						FutStrtRes = "Pass";
						ExportResults.exportTestResult("Future Start Date between 30 and 90 days," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Validation error is not thrown");
						ActRes = "Validation rule did not throw error message";
						Status = "Fail";
						FutStrtRes = "Fail";
						ExportResults.exportTestResult("Future Start Date between 30 and 90 days," + ExpRes + ","
								+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					SLocator("FStrtNotifyCls").click();
					LOGS.info(Thread.currentThread() +"Closed validation error message");
				}
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"There is some error validating future start date error msg");
				Status = "Fail";
				FutStrtRes = "Fail";
				ExportResults.exportTestResult(
						"Future Start Date between 30 and 90 days :," + "Validation message should be thrown" + ","
								+ "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			try {
				LOGS.info(Thread.currentThread() +"Selecting Future start date greater than 90 days");
				if ((ProdName.contains("Search")) || (ProdName.contains("Display")) || (ProdName.contains("Social"))) {
					SLocator("ProdDrawer").click();
					LOGS.info(Thread.currentThread() +"Clicked on Drawer icon next to Montly Investment");
					ExpValMsg = "Future Start Date can not be greater than 90 days from today.";
				} else {
					ExpValMsg = "Future start is not available for this product";
				}
				SLocatorDynamic("FutureStartDate1_" + ProdName + "_FutureStartDate2").click();
				LOGS.info(Thread.currentThread() +"Clicked on Future Start Date edit area");
				SLocator("CalendarIcon").click();
				LOGS.info(Thread.currentThread() +"Clicked on calendar icon");
				SLocator("CalMnthNavRt").click();
				LOGS.info(Thread.currentThread() +"Navigated to Next month");
				SLocator("GrtrThirtyDays").click();
				LOGS.info(Thread.currentThread() +"Selected a date range greater than 90 days");
				SLocator("QuickSave").click();
				LOGS.info(Thread.currentThread() +"Clicked on Quick Save Button");
				Thread.sleep(5000);
				ExpRes = "Validation rule should block selecting future start date";
				ImageName = "ValMsgGT90days";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				String ValMsg = SLocator("FutStrtValMsg").getText();
				LOGS.info(Thread.currentThread() +"Validation Mesage: " + ValMsg);
				if (ExpValMsg.equalsIgnoreCase(ValMsg)) {
					LOGS.info(Thread.currentThread() +"Validation error is thrown as expected");
					ActRes = "Validation rule threw error message";
					Status = "Pass";
					FutStrtRes = "Pass";
					ExportResults.exportTestResult("Future Start Date greater than 90 days," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Validation error is not thrown");
					ActRes = "Validation rule threw error message";
					Status = "Fail";
					FutStrtRes = "Fail";
					ExportResults.exportTestResult("Future Start Date greater than 90 days," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				SLocator("FStrtNotifyCls").click();
				LOGS.info(Thread.currentThread() +"Closed validation error message");
				Actions action = new Actions(driver);
				action.moveToElement(SLocatorDynamic("FutureStartDate1_" + ProdName + "_FutureStartDate2"));
				action.click();
				LOGS.info(Thread.currentThread() +"Clicked on Future Start Date edit area");
				action.sendKeys(Keys.DELETE);
				action.build().perform();
				LOGS.info(Thread.currentThread() +"Cleared Future Start text box");
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"There is some error validating future start date erro msg");
				Status = "Fail";
				FutStrtRes = "Fail";
				ExportResults.exportTestResult(
						"Future Start Date greater than 90 days:," + "Validation message should be thrown" + ","
								+ "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		} catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			FutStrtRes = "Fail";
			ExportResults
			.exportTestResult("Future Start Date greater than 90 days:," + "Validation message should be thrown"
					+ "," + "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}

		return FutStrtRes;
	}
  
	public  String validateDuplicacy(String AccountType) throws Exception {
		String xPathDyanamicPhone = "", xPathDyanamicAccount, xPathDyanamicPhone2, xPathDyanamicAccount2,
				xPathDyanamicType;
		String searchedAccountName = "", businessPhone = "", BID = "";
		try {
			int j = 2;
			for (int i = 1; i <= 65; i++) {
				LOGS.info(Thread.currentThread() +"Navigated to the View Page");
				Thread.sleep(5000);
				String xPathDyanamicDIAD = "//div[@class='x-grid3-body']/div[" + i + "]/table/tbody/tr/td[8]/div";
				xPathDyanamicAccount = "//div[@class='x-grid3-body']/div[" + i + "]/table/tbody/tr/td[4]/div/a/span";
				xPathDyanamicPhone = "//div[@class='x-grid3-body']/div[" + i + "]/table/tbody/tr/td[5]/div";
				String xPathDyanamicBusinessID = "//div[@class='x-grid3-body']/div[" + i + "]/table/tbody/tr/td[9]/div";
				xPathDyanamicAccount2 = "//div[@id='Account_body']/table/tbody/tr[" + j + "]/th/a";
				xPathDyanamicType = "//div[@id='Account_body']/table/tbody/tr[" + j + "]/td[@class=' dataCell  '][2]";
				xPathDyanamicPhone2 = "//div[@id='Account_body']/table/tbody/tr[" + j + "]/td[4]";

				WebElement DIADID = driver.findElement(By.xpath(xPathDyanamicDIAD));
				if (!(DIADID.getText()).contains("nbsp")) {
					WebDriverWait wait = new WebDriverWait(driver, 10);
					// WebElement element =
					// wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(xPathDyanamicAccount))));
					searchedAccountName = driver.findElement(By.xpath(xPathDyanamicAccount)).getText();
					LOGS.info(Thread.currentThread() +"Captured the Account Name");
					businessPhone = driver.findElement(By.xpath(xPathDyanamicPhone)).getText();
					LOGS.info(Thread.currentThread() +"Captured the Phone Number");
					BID = driver.findElement(By.xpath(xPathDyanamicBusinessID)).getText();
					LOGS.info(Thread.currentThread() +"Captured the BusinessID");
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).clear();
					Thread.sleep(3000);
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessPhone);
					LOGS.info(Thread.currentThread() +"Searching the Phone Number to check the duplicate Accounts");
					driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
					List<WebElement> rows = driver.findElements(By.xpath("//div[@id='Account_body']/table/tbody/tr"));
					int rowcount = rows.size();
					LOGS.info(Thread.currentThread() +"No. of Accounts present with the same phone number is :" + rowcount);
					if (rowcount > 2) {
						if (updateDuplicate.equalsIgnoreCase("Yes")) {
							for (int k = 1; k < rowcount; k++) {
								LOGS.info(Thread.currentThread() +"Multiple Accounts with the phone number existis");
								System.out.println("k" + k);
								int Acc = k + 1;

								String DynamicAcctEditLnk = "(//a[@data-seclke='Account' and contains(text(),'Edit')])["
										+ k + "]";
								String DynamicAccountType = "//div[@id='Account_body']/table/tbody/tr[" + Acc
										+ "]/td[3]";
								String AccType = driver.findElement(By.xpath(DynamicAccountType)).getText();
								driver.findElement(By.xpath(DynamicAcctEditLnk)).click();
								LOGS.info(Thread.currentThread() +"Account Clicked");
								WebElement element = driver.findElement(By.xpath(
										"//label[contains(text(),'Company Name')]//parent::td//following-sibling::td[1]/div/input"));
								String dupeName = element.getAttribute("value");
								if (!dupeName.contains("DUPE")) {
									if (AccType.contains("Prospect")) {
										element.clear();
										element.sendKeys(dupeName + " - DUPE");
										LOGS.info(Thread.currentThread() +"Company Name is Sufixed by DUPE");
									}
									driver.findElement(By.xpath(
											"//td/label[text()='Last Disposition']//parent::td//following-sibling::td[1]/input"))
									.sendKeys("Created");
									driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']"))
									.click();
									LOGS.info(Thread.currentThread() +"Save Button clicked");

								} else {
									LOGS.info(Thread.currentThread() +"Company Name is already prefixed by DUPE");
									driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cancel']"))
									.click();
									LOGS.info(Thread.currentThread() +"Cancel Button clicked");
								}
							}
						}
						LOGS.info(Thread.currentThread() +"Navigating back to Accounts page for Next Account");
						if (SalesRepType.equalsIgnoreCase("DSCRep")) {

							LOGS.info(Thread.currentThread() +"Clicked on All Tabs");
							driver.findElement(By.xpath("//img[@title='All Tabs']")).click();
							Thread.sleep(3000);
							LOGS.info(Thread.currentThread() +"Clicked on Accounts Tab");
							driver.findElement(By.xpath("//img[@title='Accounts']")).click();
							Thread.sleep(2000);
							driver.findElement(By.xpath("//input[@name='go']")).click();
							LOGS.info(Thread.currentThread() +"Go Button is Clicked");
						}

						else {
							driver.findElement(By.xpath("//a[contains(@title,'Accounts Tab')]")).click();
							LOGS.info(Thread.currentThread() +"Accounts Page is Clicked");
							Thread.sleep(2000);
							driver.findElement(By.xpath("//input[@name='go']")).click();
							LOGS.info(Thread.currentThread() +"Go Button is Clicked");
						}

					} else {
						LOGS.info(Thread.currentThread() +"Only one Account with Same phone number exists");
						String inflight = InflightOrderQry.inFlightOrder(BID);
						if (inflight.equalsIgnoreCase("Good Account")) {
							if (updateDuplicate.equalsIgnoreCase("Yes")) {
								System.out.println("Good Account");
								validateDuplicayResults = driver
										.findElement(By.xpath("//div[@id='Account_body']/table/tbody/tr[2]/th/a"))
										.getText();
								driver.findElement(By.xpath("//div[@id='Account_body']/table/tbody/tr[2]/th/a"))
								.click();
								LOGS.info(Thread.currentThread() +"Account Clicked");

								return validateDuplicayResults;
								
							} else {
								validateDuplicayResults = driver
										.findElement(By.xpath("//div[@id='Account_body']/table/tbody/tr[2]/th/a"))
										.getText();
								driver.findElement(By.xpath("//div[@id='Account_body']/table/tbody/tr[2]/th/a"))
								.click();
								LOGS.info(Thread.currentThread() +"Account Clicked");

								return validateDuplicayResults;
							}
						} else {
							if (updateDuplicate.equalsIgnoreCase("Yes")) {
								LOGS.info(Thread.currentThread() +"Process to be checked for Next Account as it is inflight Order");
								String DynamicAcctEditLnk = "(//a[@data-seclke='Account' and contains(text(),'Edit')])[1]";
								String DynamicAccountType = "//div[@id='Account_body']/table/tbody/tr[2]/td[3]";
								String AccType = driver.findElement(By.xpath(DynamicAccountType)).getText();
								driver.findElement(By.xpath(DynamicAcctEditLnk)).click();
								LOGS.info(Thread.currentThread() +"Account Clicked");
								WebElement element = driver.findElement(By.xpath(
										"//label[contains(text(),'Company Name')]//parent::td//following-sibling::td[1]/div/input"));
								String dupeName = element.getAttribute("value");
								if (!dupeName.contains("Inflight")) {
									driver.findElement(By.xpath(
											"//td/label[text()='Last Disposition']//parent::td//following-sibling::td[1]/input"))
									.sendKeys("Created");
									driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='save']"))
									.click();
									LOGS.info(Thread.currentThread() +"Save Button clicked");

								} else {
									LOGS.info(Thread.currentThread() +"Company Name is already prefixed by Inflight");
									driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cancel']"))
									.click();
									LOGS.info(Thread.currentThread() +"Cancel Button clicked");
								}

							}
							driver.findElement(By.xpath("//a[@title='Accounts Tab']")).click();
							LOGS.info(Thread.currentThread() +"Accounts Page is Clicked");
							Thread.sleep(2000);
							driver.findElement(By.xpath("//input[@name='go']")).click();
							LOGS.info(Thread.currentThread() +"Go Button is Clicked");
						}
					}

				} else {
					if (i == 65) {
						validateDuplicayResults = "Data not Found";
						LOGS.info(Thread.currentThread() +"Data not found");
						return validateDuplicayResults;
					}
				}
			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Some Exception Found");
			validateDuplicayResults = "Fail";
			Jiracounter = "Exception";
		}
		return validateDuplicayResults;

	}

	public  String validateDuplicacyLive() throws Exception {
		String BusinessName = "", BID = "", companyPhone = "", DynamicWebElementAccount = "";
		LOGS.info(Thread.currentThread() +"Execution of validateDuplicacyLive started");
		try {
			int j = 2;
			for (int i = 1; i <= 80; i++) {

				DynamicWebElementAccount = "//div[@class='x-grid3-body']/div[" + i + "]/table/tbody/tr/td[5]/div/a";
				LOGS.info(Thread.currentThread() +"Clicking the Account of Row :" + i);
				LOGS.info(Thread.currentThread() +"Capture the Account Name");
				BusinessName = driver.findElement(By.xpath(DynamicWebElementAccount)).getText();
				LOGS.info(Thread.currentThread() +"Capture the Account Name" + BusinessName);
				LOGS.info(Thread.currentThread() +"Click the Account");
				driver.findElement(By.xpath(DynamicWebElementAccount)).click();
				companyPhone = driver.findElement(By.xpath("//div[@id='acc10_ileinner']")).getText();
				LOGS.info(Thread.currentThread() +"Captured Phone Number :" + companyPhone);
				driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(companyPhone);
				LOGS.info(Thread.currentThread() +"Searching the companyPhone to check the duplicate Accounts");
				driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
				List<WebElement> rows = driver.findElements(By.xpath("//div[@id='Account_body']/table/tbody/tr"));
				int rowcount = rows.size();
				LOGS.info(Thread.currentThread() +"No. of Accounts present with the same phone number is :" + rowcount);
				if (rowcount > 2) {
					LOGS.info(Thread.currentThread() +"Multiple Accounts with the phone number existis");
					LOGS.info(Thread.currentThread() +"Process to be checked for Next Account");
					// 2 time back
					driver.navigate().back();
					driver.navigate().back();

				} else {
					LOGS.info(Thread.currentThread() +"Only one Account with Same phone number exists");

				}
			}
		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Some Exception Found");
			Jiracounter = "Exception";
			validateDuplicayResults = "Fail";
		}
		return validateDuplicayResults;
	}

	public  String CaptureAccountInfo() throws Exception {
		try {
			CompanyPhoneNo = SLocator("compnyPhNum_AcctDetailsPage").getText();
			LOGS.info(Thread.currentThread() +"Captured Business Phone Number :" + CompanyPhoneNo);
			DIADAcctNo = SLocator("DIADAcctID_AcctDetailsPage").getText();
			LOGS.info(Thread.currentThread() +"Captured DIAD Account Number :" + DIADAcctNo);
			GhostAcctNo = SLocator("GhostAcctID_AcctDetailsPage").getText();
			LOGS.info(Thread.currentThread() +"Captured Ghost Account Number :" + GhostAcctNo);

			submitRslt = "Pass";

		} catch (Exception e) {
			e.printStackTrace();
			Jiracounter = "Exception";
			LOGS.info(Thread.currentThread() +"Error in data capture in Account Details Page in SF");
			submitRslt = "Fail";
		}
		return submitRslt;
	}

	public  String submitFinalPage() throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Execution of Submit Quote method started");

			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			//Thread.sleep(2000);

			wait.until(ExpectedConditions.elementToBeClickable(SLocator("SubmitQteBtn")));
			
			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Final page :" + OrderStageQuoteDetls);

			if (OrderStageQuoteDetls.equalsIgnoreCase("Submit Quote")) {

				SLocator("SubmitQteBtn").click();
				
				if(CancelAll.trim().equalsIgnoreCase("true")) {
					try {
						driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
						LOGS.info("Waiting for the Quote Document to be generated.");
						WebDriverWait wait1 = new WebDriverWait(driver, 45);
						
						wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
					
					}catch(Exception ex) {
						ImageName = "AfterClickingSubmitWaitCatch";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						LOGS.info("Wait is over and the Pocess continues.");
						}
				}
				
				
				
				
				
				//Thread.sleep(3000);
				fulfilmentExceptSami = "";
				if (fulfilmentExceptSami.equalsIgnoreCase("True")) {
					LOGS.info(Thread.currentThread() +"****hi1****");
					//Thread.sleep(3000);
					// SLocator("AcccLink").click();
					driver.findElement(By.xpath("//span[text()='Account']//following::td[1]")).click();
					LOGS.info(Thread.currentThread() +"Account Link Clicked");
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					//Thread.sleep(3000);
					String AccPageURL = driver.getCurrentUrl();
					LOGS.info(Thread.currentThread() +AccPageURL);
					//Thread.sleep(3000);

					if (!SalesRepType.equalsIgnoreCase("SPE")) {

						LOGS.info(Thread.currentThread() +"****hi2****");
						String Sales = "SPE";
						SFLoginAsUser(Sales);
						ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
						driver.switchTo().window(newWindowHandle.get(2));
						driver.get(AccPageURL);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						//Thread.sleep(2000);
						LOGS.info(Thread.currentThread() +"AccPageURL");

						driver.get(AccPageURL);

						String fulfillment = fulfillmentprocessExceptSami(productName,QuoteNumber,SalesRep,pr.Resultsfolderpath);

						if (fulfillment.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Passed");

						}

						

					} else {

						String fulfillment = fulfillmentprocessExceptSami(productName,QuoteNumber,SalesRep,pr.Resultsfolderpath);

						if (fulfillment.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Pass");

						}

					}

					//Thread.sleep(10000);
					

					driver.findElement(By.xpath("//td[text()='Company Name']//following::td[1]//div/a")).click();
					LOGS.info(Thread.currentThread() +"Clicked On Account Link");

					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					//Thread.sleep(3000);

					driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

					//Thread.sleep(5000);

					String LivhibuCount = driver
							.findElement(By.xpath("//span[contains(text(),'Live Hibu Products')]/span")).getText();
					LivhibuCount = LivhibuCount.replace("[", "");
					LivhibuCount = LivhibuCount.replace("]", "");
					if (LivhibuCount.contains("+"))
						LivhibuCount = LivhibuCount.replace("+", "");
					LOGS.info(Thread.currentThread() +"Live Hibu Products count is" + LivhibuCount);
					int LSCount = Integer.parseInt(LivhibuCount);
					//Thread.sleep(5000);
					LOGS.info(Thread.currentThread() +"Clicking on Live Hibu Products");

					driver.findElement(By.xpath("//span[text()='Live Hibu Products']/parent::a")).click();

					//Thread.sleep(5000);
					int flag = 0;
					ArrayList<String> Activeprodlist = new ArrayList<String>();

					for (int i = 1; i <= LSCount; i++) {

						String prodName = driver.findElement(By.xpath(
								"//span[text()='Live Hibu Products Help']//following::tr/th[text()='Product Name']//following::tr["
										+ i + "]/th/a"))
								.getText();
						String prodStatus = driver.findElement(By.xpath(
								"//span[text()='Live Hibu Products Help']//following::tr/th[text()='Status']//following::tr["
										+ i + "]/td[1]//following::td[2]"))
								.getText();

						if (prodStatus.equalsIgnoreCase("Active")) {
							Activeprodlist.add(prodName + "-->" + prodStatus);
							LOGS.info(Thread.currentThread() +"Activeprodlist");

						} else {
							flag = 1;
							LOGS.info(Thread.currentThread() +"The Product Status is still in Pending");
							break;
						}

					}

					if (flag == 0) {

						ImageName = "LiveSubscription product Status should be 'Active' after Fulfillment";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						LOGS.info(Thread.currentThread() +"All Product Status is updated to 'Active after fulfillment'" + Activeprodlist);
						Status = "Pass";
						ExpRes = "All Product Status Should be updated to 'Active after fulfillment'";
						ActRes = "All Product Status is updated to 'Active after fulfillment'";
						ExportResults.exportTestResult(
								"LiveSubscription product Status should be 'Active' after Fulfillment:," + ExpRes + ","
										+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					} else {

						ImageName = "LiveSubscription product Status should be 'Active' after Fulfillment";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						LOGS.info(Thread.currentThread() +"Live Subscription is Not updated");
						Status = "Fail";
						ExpRes = "All Product Status Should be updated to 'Active after fulfillment'";
						ActRes = "All Product Status is not updated to 'Active after fulfillment'";
						ExportResults.exportTestResult("Live Subscriptions Verification," + ExpRes + "," + ActRes + ","
								+ Status + "," + ImgName,pr.Resultsfolderpath);
					}

				} else if (Day3.equalsIgnoreCase("True")){
					
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					//Thread.sleep(10000);

					driver.manage().timeouts().implicitlyWait(80, TimeUnit.SECONDS);

					//Thread.sleep(5000);
					
					LOGS.info(Thread.currentThread() +"Verification  quote submission started");
					//String AccType;
					// Quote Status Verification
					
					wait.until(ExpectedConditions.elementToBeClickable(SLocator("AccLink")));
					QuoteNumber = SLocator("QuoteNumb").getText();
					QuoteStatus = SLocator("QuoteStatus").getText();
					ImageName = "QuoteStatus";
					ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (QuoteStatus.equalsIgnoreCase("Submitted")) {
						Status = "Pass";
						ExpRes = "Quote Status should be submitted";
						ActRes = "Quote Status is: " + QuoteStatus;
						ExportResults.exportTestResult(
								"Quote Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						Status = "Fail";
						ExpRes = "Quote Status should be submitted";
						ActRes = "Quote Status is: " + QuoteStatus;
						ExportResults.exportTestResult(
								"Quote Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					
					//Thread.sleep(4000);
					SLocator("AccLink").click();
					LOGS.info(Thread.currentThread() +"Account Link Clicked");
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					//Thread.sleep(5000);
					
					day3ProductName="";
					if (day3ProductName.contains("Website (a la carte)")){
						
						//Thread.sleep(3000);
						String AccPageURL = driver.getCurrentUrl();
						LOGS.info(Thread.currentThread() +AccPageURL);
						//Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"AccPageURL");
						SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswdSPE");
						driver.get(AccPageURL);
						productName="Website (a la carte)";
						//Thread.sleep(8000);
						
						String NewCases=driver.findElement(By.xpath("//h3[text()='Cases']//following::tbody[1]//tr[2]//th[1]/a")).getText();
						LOGS.info(Thread.currentThread() +"New Cases Number: "+ NewCases);
						//Thread.sleep(6000);
						driver.findElement(By.xpath("//span[text()='Cases']")).click();
						//Thread.sleep(6000);
						driver.findElement(By.xpath("//h3[text()='Cases']//following::tbody[1]//tr[2]//th[1]/a")).click();
						
						//Thread.sleep(6000);
						
					String fulfillment = fulfillmentprocessExceptSami(productName,QuoteNumber,SalesRep,pr.Resultsfolderpath);
					if (fulfillment.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Failed");
					} else {
						LOGS.info(Thread.currentThread() +"fulfillmentprocessExceptSami - Method Passed");
					}
					
					//Thread.sleep(8000);
					
					driver.findElement(By.xpath("//td[text()='Company Name']//following::td[1]//div/a")).click();
					
					//Thread.sleep(8000);
					
					
					}
					
				}
				else {

					SubmittedQuoteValidation();

				}
			} else {
				Status = "Fail";
				LOGS.info(Thread.currentThread() +"Order-Stage Status is not updated to 'Submit Quote");
			}

		} catch (Exception e) {
			ExceptionMsg= "Exception Happened While Submitting the Quote";
			ImageName = "QuoteSubmitException";
			ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.error("error : " +e);
			LOGS.info(Thread.currentThread() + "," +"Exception Happened While Submitting the Quote - "+ e.getMessage());
			Jiracounter = "Exception";
			LOGS.info(Thread.currentThread() + "," +"Issue in Submit final page");
			submitRslt = "Fail";
			return submitRslt;
		}
		return submitRslt;
	}

	public  void SubmittedQuoteValidation() throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Verification post quote submission started");
			//Thread.sleep(3000);
			String AccType;
			// Quote Status Verification
			try {
				driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
				LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
				WebDriverWait wait1 = new WebDriverWait(driver, 4);
				
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				ImageName = "AfterQuoteSubmission ";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info("Wait is over and the Pocess continues.");
				}
			wait.until(ExpectedConditions.elementToBeClickable(SLocator("AccLink")));
			
			QuoteNumber = SLocator("QuoteNumb").getText();
			QuoteStatus = SLocator("QuoteStatus").getText();
			ImageName = "QuoteStatus";
			ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (QuoteStatus.equalsIgnoreCase("Submitted")) {
				Status = "Pass";
				ExpRes = "Quote Status should be submitted";
				ActRes = "Quote Status is: " + QuoteStatus;
				ExportResults.exportTestResult(
						"Quote Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} else {
				Status = "Fail";
				ExpRes = "Quote Status should be submitted";
				ActRes = "Quote Status is: " + QuoteStatus;
				ExportResults.exportTestResult(
						"Quote Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

			// QuoteDoc Validation
			/*if (QuoteDocumentDownload.equalsIgnoreCase("yes")) {
				downloadQuoteDocument();
				Thread.sleep(3000);

			}*/
			//Thread.sleep(3000);
			
			
			SLocator("AccLink").click();
			LOGS.info(Thread.currentThread() +"Account Link Clicked");
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			//Thread.sleep(5000);
			
			try {
				driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
				LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
				WebDriverWait wait1 = new WebDriverWait(driver, 4);
				
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				ImageName = "AfterQuoteSubmission ";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info("Wait is over and the Pocess continues.");
				}
			
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[text()='Contracts']//parent::a")));
			
			businessID = SLocator("BusinessID_AcctDetailsPage").getText();
			businessName = SLocator("BusinessName_AcctDetailsPage").getText();
			for (i = 0; i < 3; i++) {
				AccType = driver.findElement(By.xpath("//td[text()='Type']/following-sibling::td/div")).getText();
				if (AccType.equalsIgnoreCase("Prospect")) {
					//Thread.sleep(5000);
					driver.navigate().refresh();
					//Thread.sleep(5000);
					LOGS.info(Thread.currentThread() +"After refresh");
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					//Thread.sleep(5000);

				} else {
					if (AccType.equalsIgnoreCase("Pending Customer")) {
						LOGS.info(Thread.currentThread() +"Account Type is changed to Pending");
						Status = "Pass";
						ExpRes = "Account Type should be changed to Pending Customer";
						ActRes = "Account Type is: " + AccType;
						ExportResults.exportTestResult(
								"Account Type Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						break;
					}

				}
			}
			// Account Type Verification

			ImageName = "AccountType";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

			//AccType = driver.findElement(By.xpath("//td[text()='Type']/following-sibling::td/div")).getText();
			LOGS.info(Thread.currentThread() +"Quote Submitted!!!");

			/*if ((cancelProcessType.contains("Cancel")) || (cancelProcessType.contains("cancel"))) {

			} else if (!AccType.equalsIgnoreCase("Pending Customer")) {
				LOGS.info(Thread.currentThread() +"Account Type is not changed to Pending");
				Status = "Fail";
				ExpRes = "Account Type should be changed to Pending Customer";
				ActRes = "Account Type is: " + AccType;
				ExportResults.exportTestResult(
						"Account Type Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
*/			// Live Subscription Verification
			/*int LSCount = 0;
			try {
				Thread.sleep(5000);
				driver.navigate().refresh();
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);
				String LivSubCount = driver
						.findElement(By.xpath("//a[@class='linklet']/span[contains(text(),'Live Subscriptions')]/span"))
						.getText();
				LivSubCount = LivSubCount.replace("[", "");
				LivSubCount = LivSubCount.replace("]", "");
				if (LivSubCount.contains("+"))
					LivSubCount = LivSubCount.replace("+", "");
				LOGS.info(Thread.currentThread() +"Live Subscription count is" + LivSubCount);
				int LSCount1 = Integer.parseInt(LivSubCount);
				LOGS.info(Thread.currentThread() +"Live Subscription count after converting to integer is" + LSCount1);
				SLocator("liveSublink").click();
				ImageName = "LiveSubscription";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (LSCount1 > 0) {
					LOGS.info(Thread.currentThread() +"Live Subscription is updated");
					Status = "Pass";
					ExpRes = "Live Subscriptions should have products";
					ActRes = "Live Subscriptions have products";
					ExportResults.exportTestResult(
							"Live Subscriptions Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Live Subscription is Not updated");
					Status = "Fail";
					ExpRes = "Live Subscriptions should have products";
					ActRes = "Live Subscriptions does not have products";
					ExportResults.exportTestResult(
							"Live Subscriptions Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"Live Subscription is Not updated at this time");

			}*/
			/*if (LSCount > 0 && BillFulfill.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Bill and fulfil flag verification post quote submission started");
				SalesforceTasks.SFLoginAsUser("SPE");
				LOGS.info(Thread.currentThread() +"Logged in As SPE user");
				ArrayList tabs = new ArrayList(driver.getWindowHandles());
				System.out.println(tabs.size());
				Set<String> WH = driver.getWindowHandles();
				System.out.println(WH);
				driver.switchTo().window((String) tabs.get(2));
				LOGS.info(Thread.currentThread() +"Window switched");
				driver.get(AccURL);
				LOGS.info(Thread.currentThread() +"Account URL is: " + AccURL);
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				List<WebElement> LivSub = driver.findElements(By.xpath(
						"//a[not(@target='_parent')]/parent::div/following-sibling::div//h3[text()='Live Subscriptions']/ancestor::div[@class='pbHeader']/following-sibling::div/descendant::tr[not(@class='headerRow')]/th/a"));
				LOGS.info(Thread.currentThread() +"Live Subscription links are fetched");
				for (WebElement wE : LivSub) {
					String BillFlag = null, FulfilFlag = null;
					LOGS.info(Thread.currentThread() +"Iterating Live Subscriptions");
					// String selectLinkOpeninNewTab = Keys.chord(Keys.CONTROL+"t");
					String selectLinkOpeninNewTab = Keys.chord(Keys.CONTROL, Keys.RETURN);
					wE.sendKeys(selectLinkOpeninNewTab);
					Thread.sleep(3000);
					ArrayList tabs1 = new ArrayList(driver.getWindowHandles());
					System.out.println(tabs1.size());
					Set<String> WH1 = driver.getWindowHandles();
					System.out.println(WH1);
					driver.switchTo().window((String) tabs1.get(3));
					LOGS.info(Thread.currentThread() +"Window switched to Product page");
					try {
						wE.click();
						LOGS.info(Thread.currentThread() +"Clicked on Live subscription Line item");
					} catch (StaleElementReferenceException e) {
						Thread.sleep(3000);
						wE.click();
						LOGS.info(Thread.currentThread() +"Clicked on Live subscription Line item");
					}
					String ProdName = driver.findElement(By.xpath(
							"//span[text()='Product Name']/parent::td/following-sibling::td[contains(@class,'col02')]/div"))
							.getText();
					LOGS.info(Thread.currentThread() +"Captured Product Name is: " + ProdName);
					driver.findElement(By.xpath(
							"//span[text()='Product']/parent::td/following-sibling::td[contains(@class,'col02')]/div/a"))
					.click();
					LOGS.info(Thread.currentThread() +"Clicked on product Link");
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					String Bill = driver.findElement(By.xpath("//td[text()='Bill']/following-sibling::td/img"))
							.getAttribute("title");
					LOGS.info(Thread.currentThread() +"Bill Flag Status is: " + Bill);
					String Fulfill = driver.findElement(By.xpath("//td[text()='Fulfill']/following-sibling::td/img"))
							.getAttribute("title");
					LOGS.info(Thread.currentThread() +"Fulfill Flag Status is: " + Fulfill);
					ImageName = "BillFulfillSubscripton";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Input Excel Path is: " + ExcelPath);
					FileInputStream fis = new FileInputStream(ExcelPath);
					Workbook wbk = new XSSFWorkbook(fis);
					Sheet sht = wbk.getSheet("Flags");
					int rowCount = sht.getLastRowNum() - sht.getFirstRowNum();
					LOGS.info(Thread.currentThread() +"Row Count: " + rowCount);
					for (int i = 1; i <= rowCount; i++) {
						Row row = sht.getRow(i);
						Cell cell = row.getCell(0);
						String cellValue = cell.getStringCellValue();
						LOGS.info(Thread.currentThread() +"Cell Value is: " + cellValue);
						if (cellValue.equalsIgnoreCase(ProdName)) {
							Cell cell1 = row.getCell(1);
							BillFlag = cell1.getStringCellValue();
							LOGS.info(Thread.currentThread() +"Expected Bill Flag status: " + BillFlag);
							Cell cell2 = row.getCell(2);
							FulfilFlag = cell2.getStringCellValue();
							LOGS.info(Thread.currentThread() +"Expected Fulfil Flag Status: " + FulfilFlag);
							// break;
						}
					}
					fis.close();
					if (Bill.equalsIgnoreCase(BillFlag)) {
						LOGS.info(Thread.currentThread() +"Bill Flag matches");
						ExpRes = "Bill Flag on Products page of Subscription in SF and Expected flag status should match";
						ActRes = "Bill Flag of " + Bill + " for " + ProdName
								+ " on Product page of Subscription in SF matches the expected flag status of "
								+ BillFlag;
						Status = "Pass";
						ExportResults.exportTestResult("Bill Flag Status Verification," + ExpRes + "," + ActRes + ","
								+ Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Bill Flag does not match");
						ExpRes = "Bill Flag on Products page of Subscription in SF and Expected flag status should match";
						ActRes = "Bill Flag of " + Bill + " for " + ProdName
								+ " on Product page of Subscription in SF does not match the expected flag status of "
								+ BillFlag;
						Status = "Fail";
						ExportResults.exportTestResult("Bill Flag Status Verification," + ExpRes + "," + ActRes + ","
								+ Status + "," + ImgName,pr.Resultsfolderpath);
					}
					if (Fulfill.equalsIgnoreCase(FulfilFlag)) {
						LOGS.info(Thread.currentThread() +"Fulfil Flag matches");
						ExpRes = "Fulfil Flag on Products page of Subscription in SF and Expected flag status should match";
						ActRes = "Fulfil Flag of " + Fulfill + " for " + ProdName
								+ " on Product page of Subscription in SF matches the expected flag status of "
								+ FulfilFlag;
						Status = "Pass";
						ExportResults.exportTestResult("Fulfill Flag Status Verification," + ExpRes + "," + ActRes + ","
								+ Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +"Fulfil Flag does not match");
						ExpRes = "Fulfil Flag on Products page of Subscription in SF and Expected flag status should match";
						ActRes = "Fulfil Flag of " + Fulfill + " for " + ProdName
								+ " on Product page of Subscription in SF does not match the expected flag status of "
								+ FulfilFlag;
						Status = "Fail";
						ExportResults.exportTestResult("Fulfill Flag Status Verification," + ExpRes + "," + ActRes + ","
								+ Status + "," + ImgName,pr.Resultsfolderpath);
					}
					driver.get(AccURL);
					LOGS.info(Thread.currentThread() +"Navigated back to Account Page URL: " + AccURL);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					SLocator("liveSublink").click();
					LOGS.info(Thread.currentThread() +"Clciked on Live Subscriptions");
					driver.close();
					Thread.sleep(3000);
					driver.switchTo().window((String) tabs1.get(2));
				}
				LOGS.info(Thread.currentThread() +"Verifying Bill&Fulfill flag for One time Fee SKUs");
				driver.findElement(By.xpath(
						"//a[not(@target='_parent')]/parent::div/following-sibling::div//h3[text()='One Time Fees']/ancestor::div[@class='pbHeader']/following-sibling::div/descendant::tr[not(@class='headerRow')]/th/a"))
				.click();
			}*/
			
			// Contracts Verification
			/*driver.navigate().refresh();
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(5000);
			Thread.sleep(3000);
			String Contracts = driver
					.findElement(By.xpath("//a[@class='linklet']/span[contains(text(),'Contracts')]/span")).getText();
			Thread.sleep(3000);
			Contracts = Contracts.replace("[", "");
			Contracts = Contracts.replace("]", "");
			LOGS.info(Thread.currentThread() +"Contracts Count: " + Contracts);
			int Cont = Integer.parseInt(Contracts);
			LOGS.info(Thread.currentThread() +"Contracts count after converting to integer is" + Cont);
			SLocator("ContractsLink").click();
			ImageName = "Contracts";
			ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (Cont > 0) {
				LOGS.info(Thread.currentThread() +"Contract Generated");
				Status = "Pass";
				ExpRes = "Contract Should be generted";
				ActRes = "Contract is generated";
				ExportResults.exportTestResult(
						"Contracts Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Contract is not Generated");
				Status = "Fail";
				ExpRes = "Contract Should be generted";
				ActRes = "Contract is not generated";
				ExportResults.exportTestResult(
						"Contracts Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
*/
			// Case Validation

			/*String Case = driver.findElement(By.xpath("//a[@class='linklet']/span[contains(text(),'Cases')]/span"))
					.getText();
			LOGS.info(Thread.currentThread() +"CaseDetails :" + Case);
			String CaseNum = driver
					.findElement(
							By.xpath("//div[@class='listRelatedObject caseBlock']/div/div[2]/table/tbody/tr[2]/td[2]"))
					.getText();
			LOGS.info(Thread.currentThread() +"CaseNum :" + CaseNum);
			Thread.sleep(3000);
			Case = Case.replace("[", "");
			Case = Case.replace("]", "");
			LOGS.info(Thread.currentThread() +"Case Count: " + Case);
			int DSCont = Integer.parseInt(Case);
			LOGS.info(Thread.currentThread() +"Case count after converting to integer is" + DSCont);
			SLocator("CaseLink").click();
			ImageName = "Case";
			ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (DSCont > 0) {
				LOGS.info(Thread.currentThread() +"Case Generated");
				Status = "Pass";
				ExpRes = "Case Should be generated";
				ActRes = "Case is generated";
				ExportResults
				.exportTestResult("Case Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Case is not Generated");
				Status = "Fail";
				ExpRes = "Case Should be generted";
				ActRes = "Case is not generated";
				ExportResults
				.exportTestResult("Case Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}*/
			// Opportunity Stage Verification
			
				//validateOpportunity();
			

		} catch (Exception e) {

			ExceptionMsg= "Exception Happened After Submitting the Quote";
			LOGS.error("error : " +e);
			LOGS.info(Thread.currentThread() + "," +"Exception Happened After Submitting the Quote - "+ e.getMessage());
			Jiracounter = "Exception";
			LOGS.info(Thread.currentThread() + "," +"Issue in Quote Verification page");
			submitRslt = "Fail";

		}
	}

	public  String downloadQuoteDocument() {
		String docResults = "";
		LOGS.info(Thread.currentThread() +"Executing the DownloadQuote Method");
		try {
			Thread.sleep(2000);
			WebElement Quotelink = driver.findElement(By.xpath("(//a[text()='View'])[1]"));
			// driver.findElement(By.xpath("//td[text()='2']//preceding-sibling::th/a[contains(text(),'"+QuoteNumber+"')]"));
			Quotelink.click();
			LOGS.info(Thread.currentThread() +"Quote Link clicked");
			Thread.sleep(2000);
			
			Thread.sleep(3000);

			String VBSQuoteFilePath = regardingfilesPath + "\\VBScripts\\EnterFileName.vbs";
			QuoteDocumentPath = "C:\\Automation\\CPQ\\pdf\\QuoteDocument\\" + QuoteNumber + "_F.pdf";

			Runtime.getRuntime().exec("wscript " + "\"" + VBSQuoteFilePath + "\"" + " " + QuoteDocumentPath, null,
					null);
			Thread.sleep(3000);
			
			Thread.sleep(3000);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "Pass";
	}

	public  String validateOpportunity() {
		String OptyResults = "";
		try {
			driver.get(opptyURL);
			LOGS.info(Thread.currentThread() +"Navigated to Opportunity page");
			String OppStatus = SLocator("stageonOpp").getText();
			String Probability = SLocator("ProbabilityPercent").getText();
			ImageName = "OpportunityStatus";
			ImgName=ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (AddingSecondProd.equalsIgnoreCase("True") || IncBudget.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Verifying if opportunity staage in Closed Won-Upsell");
				if (OppStatus.equalsIgnoreCase("Closed Won - Upsell") && Probability.equalsIgnoreCase("100%")) {
					Status = "Pass";
					ExpRes = "Opportunity Status should be Closed Won-upsell and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					Status = "Fail";
					ExpRes = "Opportunity Status should be Closed Won-Upsell and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}

			else if (DecBudget.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Verifying if opportunity staage in Closed Won-Decrease");
				if (OppStatus.equalsIgnoreCase("Closed Won - Decrease") && Probability.equalsIgnoreCase("100%")) {
					Status = "Pass";
					ExpRes = "Opportunity Status should be Closed Won-Decrease and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					Status = "Fail";
					ExpRes = "Opportunity Status should be Closed Won-Decrease and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}

			else {
				if (OppStatus.equalsIgnoreCase("Closed Won") && Probability.equalsIgnoreCase("100%")) {
					Status = "Pass";
					ExpRes = "Opportunity Status should be Closed Won and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					Status = "Fail";
					ExpRes = "Opportunity Status should be Closed Won and Probability should be 100%";
					ActRes = "Opportunity Status is: " + OppStatus + " and Probability % is: " + Probability;
					ExportResults.exportTestResult(
							"Opportunity Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return OptyResults;
	}

	public  String getConfirmationNum(WebDriver driver, String phone, String amount) throws Exception {
		String confirmationNumber = "";
		try {
			String path = regardingfilesPath+"\\Order.properties";
			LOGS.info(Thread.currentThread() +path);
			Properties OR = pr.loadPropertiesFiles("Order");

			LOGS.info(Thread.currentThread() +OR.getProperty("ghostUN"));

			OR.load(fs);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			String ghostUN = OR.getProperty("ghostUN");
			LOGS.info(Thread.currentThread() +"ghost User Name : " + ghostUN);
			String ghostPswd = OR.getProperty("ghostPswd");
			LOGS.info(Thread.currentThread() +"ghost pw : " + ghostPswd);
			LOGS.info(Thread.currentThread() +"Navigating to the Test Site");
			try {

				driver.navigate()
				.to("http://" + ghostUN + ":" + ghostPswd + "@uatkopoh.yellglobal.net/gsfa/testing?0");
				//Thread.sleep(20000);
				
				String urlGhostxl = "http://" + ghostUN + ":" + ghostPswd
						+ "@uatkopoh.yellglobal.net/gsfa/testing?0";
				
				LOGS.info(Thread.currentThread() +"Ghost URL :" + urlGhostxl);
				//Thread.sleep(3000);
			} catch (Exception e) {
				//e.printStackTrace();
				driver.navigate().to("http://" + ghostUN + ":" + ghostPswd + "@uatkopoh.yellglobal.net/gsfa/testing?0");
				//Thread.sleep(30000);
				String urlGhostxl = "http:" + ghostUN + ":" + ghostPswd + "@uatkopoh.yellglobal.net/gsfa/testing?0";
				LOGS.info(Thread.currentThread() +"Ghost URL :" + urlGhostxl);
				//Thread.sleep(3000);
			}
			
			LOGS.info(Thread.currentThread() +"child :" + driver.getTitle());
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[contains(@id,'creatBtn')]")));
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[contains(@id,'creatECheckPmt')]")));
			LOGS.info(Thread.currentThread() +"child :" + driver.getTitle());
			
			//Thread.sleep(2000);
			driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[1]/input")).sendKeys(phone);
			LOGS.info(Thread.currentThread() +"Phone number enter is :" + phone);

			amount = amount.replace(",", "");
			String amtre$ = amount;
			System.out.println(amtre$);

			driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[2]/input")).sendKeys(amtre$);
			LOGS.info(Thread.currentThread() +"Amount Entered is :" + amtre$);

			Select dropdownBh = new Select(
					driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[3]/select")));
			dropdownBh.selectByIndex(2);
			driver.findElement(By.tagName("body")).click();
			
			//Thread.sleep(5000);
			WebElement SubmitBTN;

			if (amount.equals("0")) {
				SubmitBTN = driver.findElement(By.xpath("//input[contains(@id,'creatBtn')]"));
			} else
				SubmitBTN = driver.findElement(By.xpath("//input[contains(@id,'creatECheckPmt')]"));

			JavascriptExecutor jseSubmitBTN = (JavascriptExecutor) driver;
			jseSubmitBTN.executeScript("arguments[0].click()", SubmitBTN);
			//Thread.sleep(6000);

			if (amount.equals("0")) {
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@id,'container')]/div[3]/b/span")));
				confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[3]/b/span"))
						.getText();

				LOGS.info(Thread.currentThread() +"Registration Number:" + confirmationNumber);
			} else {
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@id,'container')]/div[4]/b/span")));

				confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[4]/b/span"))
						.getText();
				LOGS.info(Thread.currentThread() +"Confirmation Number:" + confirmationNumber);
			}

			if (confirmationNumber.equalsIgnoreCase("Try Again") || confirmationNumber.equalsIgnoreCase("")
					|| confirmationNumber.contains("Fail")) {
				LOGS.info(Thread.currentThread() +"Clicking on the Deposits from deposite type");

				Select dropdownBh1 = new Select(
						driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[3]/select")));
				dropdownBh1.selectByIndex(1);
				
				//Thread.sleep(10000);
				
				jseSubmitBTN.executeScript("arguments[0].click()", SubmitBTN);

				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

				//Thread.sleep(6000);
				//Thread.sleep(6000);

				if (amount.equals("0")) {
					//Thread.sleep(2000);
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[3]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Registration Number:" + confirmationNumber);
				} else {
					//Thread.sleep(2000);
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[4]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Confirmation Number:" + confirmationNumber);
				}
			}
			if (confirmationNumber.equalsIgnoreCase("Try Again") || confirmationNumber.equalsIgnoreCase("")
					|| confirmationNumber.contains("Fail")) {
				LOGS.info(Thread.currentThread() +"Trying again as it failed - Second trial");
				driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[1]/input")).sendKeys(phone);
				LOGS.info(Thread.currentThread() +"Phone number enter is :" + phone);

				driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[2]/input"))
				.sendKeys(amount);
				LOGS.info(Thread.currentThread() +"Amount Entered is :" + amount);
				Select dropdownBh2 = new Select(
						driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[3]/select")));
				dropdownBh2.selectByIndex(2);

				driver.findElement(By.xpath("//input[contains(@id,'creatECheckPmt')]")).submit();
				//Thread.sleep(6000);
				if (amount.equals("0")) {
					//Thread.sleep(2000);
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[3]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Registration Number:" + confirmationNumber);
				} else {
					//Thread.sleep(2000);
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[4]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Confirmation Number:" + confirmationNumber);
				}
			}
			if (confirmationNumber.equalsIgnoreCase("Try Again") || confirmationNumber.equalsIgnoreCase("")
					|| confirmationNumber.contains("Fail")) {
				LOGS.info(Thread.currentThread() +"Trying again as it failed - Third trial");
				driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[1]/input")).sendKeys(phone);
				LOGS.info(Thread.currentThread() +"Phone number enter is :" + phone);

				driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[2]/input"))
				.sendKeys(amount);
				LOGS.info(Thread.currentThread() +"Amount Entered is :" + amount);
				Select dropdownBh3 = new Select(
						driver.findElement(By.xpath("//form[contains(@id,'form')]/table/tbody/tr/td[3]/select")));
				dropdownBh3.selectByIndex(2);
				
				driver.findElement(By.xpath("//input[contains(@id,'creatBtn')]")).click();
				
				//Thread.sleep(6000);
				if (amount.equals("0")) {
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[3]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Registration Number:" + confirmationNumber);
				} else {
					confirmationNumber = driver.findElement(By.xpath("//div[contains(@id,'container')]/div[4]/b/span"))
							.getText();
					LOGS.info(Thread.currentThread() +"Confirmation Number:" + confirmationNumber);
				}
			}

		} catch (Exception e) {
			ExceptionMsg = "Exception while genarting the Registration/Confirmation Number";
			LOGS.info(Thread.currentThread() + "," +"Issue in Registration/Confirmation Number");
			LOGS.info(Thread.currentThread() +"Issue in Registration/Confirmation Number");
			LOGS.error("Exception While getting the Registration/Confirmation Number:"+e.getMessage());
			Jiracounter = "Exception";
			
		}

		return confirmationNumber;
	}

	// Method for Select Consultation Process
	public  String SelectConsultation(String SelectConsultation) throws Exception {
		try {
			//Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
			//Thread.sleep(2000);
			
			LOGS.info(Thread.currentThread() +"Execution of SelectConsultation method started");
			wait.until(ExpectedConditions.elementToBeClickable(SLocator("SelectConsultnBtn")));
			
			OpptyNameQuoteDetls = SLocator("OpptyNameValue").getText();
			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);

			if (OrderStageQuoteDetls.equalsIgnoreCase("Select Consultation")) {

				SLocator("SelectConsultnBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Select Consultation Button");
				driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
				//Thread.sleep(2000);

				//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[text()='Select Consultation:']")));
				
//				String SelectCon = SLocator("SelectConsult").getText();
//				LOGS.info(Thread.currentThread() +"Select Consultation :" + SelectCon);
//				if (SelectCon.contains("None")) {
//					ExpRes = "Select Consultation screen appears defaulting to none with POS Scheduled option";
//					ActRes = "Select Consultation defaulting to none";
//					Status = "Pass";
//					ImageName = "consultaionpage";
//					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
//					ExportResults.exportTestResult("Select Consultation bydefult option Validation," + ExpRes + ","
//							+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
//
//				}
//
//				// Select the consultation type
//				Select dropdownSelectConslt = new Select(
//						driver.findElement(By.id("consultationPage:consultationFrom:consultation")));
//				if (POSOnlyValidation.equalsIgnoreCase("True")) {
//					List<WebElement> options = dropdownSelectConslt.getOptions();
//					for (WebElement Op : options) {
//						String OpText = Op.getText();
//						LOGS.info(Thread.currentThread() +"Option value: " + OpText);
//						if (OpText.equalsIgnoreCase("--None--") || OpText.equalsIgnoreCase("POS")) {
//							LOGS.info(Thread.currentThread() +"Consultation dropdown option: " + OpText);
//							Status = "Pass";
//							ActRes = "Consultation Option available is: " + OpText;
//							ExportResults.exportTestResult("Consultation Options Verification,"
//									+ "Consultation type drop down should have only None and POS options" + "," + ActRes
//									+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
//						} else {
//							Status = "Fail";
//							ActRes = "Consultation Option available is: " + OpText;
//							ExportResults.exportTestResult("Consultation Options Verification,"
//									+ "Consultation type drop down should have only None and POS options" + "," + ActRes
//									+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
//						}
//					}
//				}
				//dropdownSelectConslt.selectByVisibleText(SelectConsultation);
				//LOGS.info(Thread.currentThread() +SelectConsultation + " is selected from the dropdown list");
				
				/*
				if (SelectConsultation.equalsIgnoreCase("POS") || SelectConsultation.equalsIgnoreCase("On Demand")) {

					LOGS.info(Thread.currentThread() +"SelectConsultation is POS OR On Demand");
					ConPOSPhoneNo = SLocator("CapturePhoneNo_POS").getAttribute("value");
					LOGS.info(Thread.currentThread() +" ConPOSPhoneNo :" + ConPOSPhoneNo);
					//Thread.sleep(3000);
					if (PhoneNumValidation.equalsIgnoreCase("True")) {
						PhoneValidnSelectConsultn();
						LOGS.info(Thread.currentThread() +"Default Phone Number validation completed");
					}
					if (ConsultationValidation.equalsIgnoreCase("True")) {
						VerifyPhoneNumberFormat(ConPOSPhoneNo);
					}
					// if(ConsultationValidation.equalsIgnoreCase("True") ||
					// PhoneNumEdit.equalsIgnoreCase("True"))
					if (PhoneNumEdit.equalsIgnoreCase("True")) {
						VerifyPhoneNumFieldIsEditable("POS");
						LOGS.info(Thread.currentThread() +"Verification that Phone Number field is editable completed");
					}

					if (SelectConsultation.equalsIgnoreCase("POS")) {
					SLocator("SaveBtnPOSPage").click();
					}else {
						driver.findElement(By.xpath("//div[@id='callOnDemand']//button[contains(text(),'Save')]")).click();
					}
					SelectConsltnRslt = "Pass"; 
					*/
					
				if (SelectConsultation.equalsIgnoreCase("On Demand")) {
					
					driver.findElement(By.xpath("//div[@id='callOnDemand']//button[@class='slds-button slds-button_brand slds-m-top_small'][normalize-space()='Save']")).click();
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(40));
					LOGS.info(Thread.currentThread() +"Clicked on save button in "+SelectConsultation+"  Page: " + Status);
					SelectConsltnRslt = "Pass";
				}
					
				} else if (SelectConsultation.equalsIgnoreCase("Scheduled")) {

					ConPOSPhoneNo = SLocator("CapturePhoneNo_SCh").getAttribute("value");
					//Thread.sleep(3000);
					if (PhoneNumValidation.equalsIgnoreCase("True")) {
						PhoneValidnSelectConsultn();
						LOGS.info(Thread.currentThread() +"Default Phone Number validation completed");
					}
					if (PhoneNumEdit.equalsIgnoreCase("True")) {
						VerifyPhoneNumFieldIsEditable("Scheduled");
						LOGS.info(Thread.currentThread() +"Verification that Phone Number field is editable completed");
					}
					// select the timezone
					Select dropdownTimeZone = new Select(
							driver.findElement(By.id("consultationPage:consultationFrom:timezone")));
					if (TZVerification.equalsIgnoreCase("True")) {
						List<WebElement> TimeZones = dropdownTimeZone.getOptions();
						for (WebElement TZs : TimeZones) {
							String TZText = TZs.getText();
							LOGS.info(Thread.currentThread() +"Available Time Zone: " + TZText);
							dropdownTimeZone.selectByVisibleText(TZText);
							SLocator("GoBtn").click();
							LOGS.info(Thread.currentThread() +"Clicked on GO button");
							//Thread.sleep(3000);
							ImageName = "SelectedTimeZone";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ActRes = "Time Zone Selected: " + TZText;
							Status = "Pass";
							ExportResults.exportTestResult(
									"Time Zone Verification," + "Available Time Zones should be selectable" + ","
											+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
						}
					}
					dropdownTimeZone.selectByVisibleText("US/Hawaii");
					LOGS.info(Thread.currentThread() +"Selected 'US/Hawaii' from the dropdown list");

					if (NoApptError.equalsIgnoreCase("True")) {
						try {
							String Day = driver.findElement(By.xpath("//td[contains(@class,'slds-is-today')]"))
									.getAttribute("headers");
							if (Day.equalsIgnoreCase("Sunday")) {
								SLocator("GoBtn").click();
								LOGS.info(Thread.currentThread() +"Clicked on GO button");
							} else {
								driver.findElement(By.cssSelector("#test>svg")).click();
								LOGS.info(Thread.currentThread() +"Clicked on calendar icon");
								List<WebElement> week = driver.findElements(By.xpath(
										"//td[contains(@class,'slds-is-today')]/parent::tr/following-sibling::tr"));
								if (week.size() > 1) {
									LOGS.info(Thread.currentThread() +"Not the last week of current month");
									driver.findElement(By.xpath(
											"//td[contains(@class,'slds-is-today')]/following::td[@headers='Sunday']"))
									.click();
									LOGS.info(Thread.currentThread() +"Selected coming sundays date");
								} else {
									LOGS.info(Thread.currentThread() +"Last week of current month");
									driver.findElement(By.xpath("//button[@title='Next Month']")).click();
									LOGS.info(Thread.currentThread() +"Navigated to next month");
									driver.findElement(By.xpath(
											"//table[contains(@class,'datepicker')]/tbody/tr[2]/td[@headers='Sunday']"))
									.click();
									LOGS.info(Thread.currentThread() +"Selected first sunday of the month");
								}
								SLocator("GoBtn").click();
								LOGS.info(Thread.currentThread() +"Clicked on GO button");
							}
							String ExpectedError = "There are no appointments available for this specific date. Please select another date to check for available appointment times. Remember, the appointment must be within one week of today's date.";
							String ActualError = SLocator("ScheduleErrMsg").getText();
							ExpRes = "Expected error msg: " + ExpectedError;
							ImageName = "NoApptsErrorMsg";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							if (ExpectedError.equalsIgnoreCase(ActualError)) {
								LOGS.info(Thread.currentThread() +"Error msg displayed as expected");
								Status = "Pass";
								ActRes = "Actual error msg: " + ActualError;
								ExportResults
								.exportTestResult("Error message verification on No available appointments,"
										+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							} else {
								LOGS.info(Thread.currentThread() +"Error msg NOT displayed as expected");
								Status = "Fail";
								ActRes = "Actual error msg: " + ActualError;
								ExportResults
								.exportTestResult("Error message verification on No available appointments,"
										+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							}
						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"There is some error validating error message on no available Appts");
						}
					}
					for (int n = 0; n < 3; n++) {

						SLocator("GoBtn").click();
						LOGS.info(Thread.currentThread() +"Clicked on GO button");

						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						//Thread.sleep(6000);
						List<WebElement> ScheduleTimeTable = driver.findElements(By
								.xpath("//span[@id='consultationPage:consultationFrom:dataTable']//child::span/table"));
						int size = ScheduleTimeTable.size();
						LOGS.info(Thread.currentThread() +"Number of Child elements: " + size);

						if (POSOnlyValidation.equalsIgnoreCase("True") || size > 0) {
							LOGS.info(Thread.currentThread() +"Able to see available time slots to book scheduled consultation");
							ImageName = "AvailableSlots";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							Status = "Pass";
							ActRes = "Available slots for scheduled consultation is: " + size;
							ExportResults.exportTestResult("Scheduled time slot Verification,"
									+ "Time slots should be available for scheduled consultation" + "," + ActRes + ","
									+ Status + "," + ImgName,pr.Resultsfolderpath);

						} else {
							String MsgErr = SLocator("ScheduleErrMsg").getText();
							LOGS.info(Thread.currentThread() +"Error Message: " + MsgErr);
							ImageName = "AvailableSlots";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							Status = "Fail";
							ActRes = "No Slots available for schedule consultation. Error msg:  " + MsgErr;
							ExportResults.exportTestResult("Scheduled time slot Verification,"
									+ "Time slots should be available for scheduled consultation" + "," + ActRes + ","
									+ Status + "," + ImgName,pr.Resultsfolderpath);

						}

						if (size > 0) {
							LOGS.info(Thread.currentThread() +"No.of slots available: " + size);
							ImageName = "AvailableSlots";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							Status = "Pass";
							ActRes = "Available slots for scheduled consultation is: " + size;
							ExportResults.exportTestResult("Available appointments verification,"
									+ "Appointments should be available for scheduled consultation" + "," + ActRes + ","
									+ Status + "," + ImgName,pr.Resultsfolderpath);
							break;
						} else {
							String MsgErr = SLocator("ScheduleErrMsg").getText();
							LOGS.info(Thread.currentThread() +"Error Message: " + MsgErr);
						}

					}

					String SelectedDate = SLocator("DateSelect1").getText();
					LOGS.info(Thread.currentThread() +"Captured Date is " + SelectedDate);

					String SelectedTime = SLocator("TimeSelect1").getText();
					LOGS.info(Thread.currentThread() +"Captured Time :" + SelectedTime);

					String TimeZoneValue = SLocator("TimeZoneValueSelect1").getText();
					LOGS.info(Thread.currentThread() +"Captured TimeZone :" + TimeZoneValue);

					SLocator("SelectBtn1").click();
					LOGS.info(Thread.currentThread() +"Clicked on first Select Button");

					SLocator("ConstNotes").click();
					LOGS.info(Thread.currentThread() +"Clicked on Consultation Notes textarea");
					String SchConstNotes = "Test Note";
					SLocator("ConstNotes").sendKeys(SchConstNotes);
					LOGS.info(Thread.currentThread() +"Entered Consultation Notes");

					SLocator("SchConstSave").click();
					LOGS.info(Thread.currentThread() +"Clicked on Save button");

					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					//Thread.sleep(10000);
					String rsltPhone = SLocator("rsltPhoneNum").getText();
					LOGS.info(Thread.currentThread() +"Captured phone number line :" + rsltPhone);
					String ConsultPhone = PhoneNumPaymentPg;
					ConsultPhone = ConsultPhone.replace("(", "");
					ConsultPhone = ConsultPhone.replace(")", "");
					ConsultPhone = ConsultPhone.replace("-", "");
					ConsultPhone = ConsultPhone.replace(" ", "");

					if (!rsltPhone.contains(ConsultPhone)) {
						// if (!rsltPhone.contains(PhoneNumPaymentPg)) {
						Status = "Fail";
						ActRes = "Phone number is not updated after select consultation";
					} else {

						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Phone number Status :" + Status);

						String rsltDate = SLocator("rsltDate").getText();
						LOGS.info(Thread.currentThread() +"Captured Date Text is " + rsltDate);

						if (!rsltDate.contains(SelectedDate)) {

							String Date1[] = SelectedDate.split("/");
							int updatedDate = Integer.parseInt(Date1[0]);
							int updatedDate1 = Integer.parseInt(Date1[1]);
							SelectedDate = updatedDate + "/" + updatedDate1 + "/" + Date1[2];
							LOGS.info(Thread.currentThread() +"Updated Date is " + SelectedDate);

							if (!rsltDate.contains(SelectedDate)) {
								Status = "Fail";
								ActRes = "Phone Number is Matching: Date is not updated after select consultation";
							} else
								Status = "Pass";

							LOGS.info(Thread.currentThread() +"Date Status :" + Status);
						}
						if (Status.equalsIgnoreCase("Pass")) {
							String rsltTime = SLocator("rsltTime").getText();
							LOGS.info(Thread.currentThread() +"Captured Time Text is " + rsltTime);

							if (rsltTime.contains(SelectedTime)) {
								Status = "Pass";
							} else {
								String time1[] = SelectedTime.split(":");
								int updatedTime = Integer.parseInt(time1[0]);
								String time2 = time1[1].toLowerCase();
								SelectedTime = updatedTime + ":" + time2;
								LOGS.info(Thread.currentThread() +"Updated Text is " + SelectedTime);

								if (rsltTime.contains(SelectedTime)) {
									Status = "Pass";
								} else {
									Status = "Fail";
									ActRes = "Phone number and Date is matching: Time is not updated after select consultation";
								}

							}
							LOGS.info(Thread.currentThread() +"Time Status :" + Status);

							if (Status.equalsIgnoreCase("Pass")) {

								String rsltTimeZone = SLocator("rsltTimeZone").getText();
								LOGS.info(Thread.currentThread() +"Captured TimeZone Text is " + rsltTimeZone);

								if ((rsltTimeZone.contains(TimeZoneValue))
										|| (rsltTimeZone.equalsIgnoreCase(TimeZoneValue))) {
									Status = "Pass";
									ActRes = "Phone number, Date, Time, Timezone is updated after select consultation";
								} else {
									Status = "Fail";
									ActRes = "Phone number, Date, Time is updated: TimeZone is not updated after select consultation";
								}
								LOGS.info(Thread.currentThread() +"TimeZone Status :" + Status);

								if (Status.equalsIgnoreCase("Pass")) {
									String rsltConstNotes = SLocator("rsltConstNotes").getText();
									LOGS.info(Thread.currentThread() +"Consultation Notes on Summary screen is: " + rsltConstNotes);
									ImageName = "ConsultationNotes";
									ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
									if (rsltConstNotes.equalsIgnoreCase("Consultation Notes: " + SchConstNotes)) {
										Status = "Pass";
										ActRes = "Consultation Note on Summary is: " + rsltConstNotes;
										ExportResults.exportTestResult("Consultation Notes Verification,"
												+ "Consultation Note: " + SchConstNotes + " should be Displayed" + ","
												+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
									} else {
										Status = "Fail";
										ActRes = "Consultation Note on Summary is: " + rsltConstNotes;
										ExportResults.exportTestResult("Consultation Notes Verification,"
												+ "Consultation Note: " + SchConstNotes + " should be Displayed" + ","
												+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
									}
								}
							}
						}
					}

					SelectConsltnRslt = Status;
					LOGS.info(Thread.currentThread() +SelectConsltnRslt);
					ExpRes = "Select Consultation Validation";
					ImageName = "QuotePage_OrderStgStatus";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Select Consultation Status," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					// SLocator("SaveBtnSelectedPage").click();
					driver.findElement(By.xpath("//div[@id='selected_scheduled']/article/div[2]/input[@type='button']"))
					.click();
					LOGS.info(Thread.currentThread() +"Clicked on save button in selected Page :" + Status);

					driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
					driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
					//Thread.sleep(2000);

					OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
					LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);

					if (!OrderStageQuoteDetls.equalsIgnoreCase("Submit Quote")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Order Stage is not updated");
						ActRes = "Order Stage is not updated after select consultation";
					} else {
						Status = "Pass";
						ActRes = "Order Stage is updated after select consultation";
						LOGS.info(Thread.currentThread() +"Order Stage is updated");
					}

					SelectConsltnRslt = Status;
					LOGS.info(Thread.currentThread() +SelectConsltnRslt);
					ExpRes = "Order Stage Status Verification after Select Consultation";
					ImageName = "QuotePage_OrderStgStatus";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Order Stage Status After Select Consultation," + ExpRes + ","
							+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}
			
		/* else {
				LOGS.info(Thread.currentThread() +"Order Stage Status is not updated in Quote detail page to Select Consultation");
				LOGS.info(Thread.currentThread() +"Failed in Select Consultation Method");
				ImageName = "QuotePage_OrderStgStatus";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Fail";
				SelectConsltnRslt = "Fail";
				ExpRes = "Order Stage Status validation before Select Consultation";
				ActRes = "Order Stage Status is not updated in Quote details page";
				ExportResults.exportTestResult("Order Stage Status before Select Consultation," + ExpRes + "," + ActRes
						+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} */
			//}
		}

		catch (Exception e) {
			ExceptionMsg = "Exception Happened While Selecting the Consultation Type";
			LOGS.info(Thread.currentThread() + "," +"Error in Select Consultation - " + e.getMessage());
			LOGS.error("Error in Select Consultation - " +e);
			Status = "Fail";
			Jiracounter = "Exception";
			SelectConsltnRslt = "Fail";
			ImageName = "ConsultationSelectFailure";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Verification of Select Consultation method";
			ActRes = "Error in Select Consultation method";
			ExportResults.exportTestResult(
					"Select Consultation Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			return SelectConsltnRslt;
		}
		return SelectConsltnRslt;
	}

	// Method for Payment Process
	public  String PaymentProcess() throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Execution of PaymentProcess method started");
			//Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				WebDriverWait wait1 = new WebDriverWait(driver, 9);
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
			
			}catch(Exception ex) {
				LOGS.info("Wait is over and the Pocess continues.");
				}
			wait.until(ExpectedConditions.elementToBeClickable(SLocator("PaymentBtn")));
			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);
			// Payment; Select Consultation

			OneTimeFeeQuoteDetls = SLocator("OneTimeFeeTotal").getText();
			LOGS.info(Thread.currentThread() +"One Time Fee Total in Quote detail page :" + OneTimeFeeQuoteDetls);

			if ((OrderStageQuoteDetls.equalsIgnoreCase("Check Payment"))
					|| (OrderStageQuoteDetls.equalsIgnoreCase("Locked for Voice Verify"))) {

				String quatedetailpagebefpayment = driver.getCurrentUrl();
				LOGS.info(Thread.currentThread() +"Quate Detail - PaymentPage URL:" + quatedetailpagebefpayment);
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("PaymentBtn")));
				SLocator("PaymentBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Payment button");
				driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				LOGS.info(Thread.currentThread() +"In Try Block...");
				Thread.sleep(4000);
				// To wait untill the Cancel button is clickable (Waiting untill elements are clickable)
				wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='section slds-show']//input[@value='Cancel']")));
				
				ParentWindow = driver.getCurrentUrl();
				LOGS.info(Thread.currentThread() +"Parent Window-Current url :" + ParentWindow);

				if (OneTimeFeeQuoteDetls.equalsIgnoreCase("$0.00")) {
					PaymtAmtPaymentPg = SLocator("RegistrnPaymtAmtPaymtPg").getText();
					PhoneNumPaymentPg = SLocator("RegistrnPhoneNumPaymtPg").getText();
				} else {
					PaymtAmtPaymentPg = SLocator("ConfirmPaymtAmtPaymtPg").getText();
					PhoneNumPaymentPg = SLocator("ConfirmPhoneNumPaymtPg").getText();

					LOGS.info(Thread.currentThread() +"Captured Amount : " + PaymtAmtPaymentPg + " & Phone number : " + PhoneNumPaymentPg);
				}

			

				if ((PaymtAmtPaymentPg.equalsIgnoreCase("0.00")) || (PaymtAmtPaymentPg.equalsIgnoreCase("$0.00"))) {

					try {
						confirmationNumber = getConfirmationNum(driver, PhoneNumPaymentPg, "0");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Error in GhostXL browser");
						confirmationNumber = getConfirmationNum(driver, PhoneNumPaymentPg, "0");
					}

				} else {

					String PaymtAmtPayment = PaymtAmtPaymentPg.substring(1, PaymtAmtPaymentPg.length());
					PaymtAmtPaymentPg = PaymtAmtPayment;
					System.out.println(PaymtAmtPaymentPg);

					if (ConfNumbIncorrectAmt.equalsIgnoreCase("True")) {
						LOGS.info(Thread.currentThread() +"inside ConfNumbIncorrectAmt");
						float PayAmtMinus = Float.valueOf(PaymtAmtPaymentPg);

						if (ConfNumbforlessAmt.equalsIgnoreCase("True")) {

							PayAmtMinus = PayAmtMinus - 20;

						} else {

							PayAmtMinus = PayAmtMinus + 20;
						}
						PaymtAmtPaymentPg = String.valueOf(PayAmtMinus);

						LOGS.info(Thread.currentThread() +"Paymt Amt Conf Numb Incorrect Amt " + PayAmtMinus);
					}

					try {
						confirmationNumber = getConfirmationNum(driver, PhoneNumPaymentPg, PaymtAmtPaymentPg);
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Error in GhostXL browser");
						confirmationNumber = getConfirmationNum(driver, PhoneNumPaymentPg, PaymtAmtPaymentPg);
					}

				}

				// confirmationNumber="Try Again";

				LOGS.info(Thread.currentThread() +"Confirmation Number captured is :" + confirmationNumber);

				if (confirmationNumber.equalsIgnoreCase("Try Again") || confirmationNumber.equalsIgnoreCase("")) {
					driver.navigate().to(quatedetailpagebefpayment);
					driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Edit']")).click();
					//Thread.sleep(3000);
					driver.findElement(By.xpath("//label[text()='Payment Verified']//following::td[1]/input")).click();
					driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Save']")).click();
					//Thread.sleep(3000);

					paymntRslt = "Pass";
					ImageName = "Quote Detail";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Jiracounter = "Failed";
					ExportResults
					.exportTestResult("Get Confirmation Number," + "Confirmation Number should be generated"
							+ "," + "Issue with Confirmation Number generation" + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Get Confirmation Number," + "Confirmation Number should be generated" + ","
							+ "Issue with Confirmation Number generation" + "," + "Fail");
					paymntRslt = "Fail";
					return paymntRslt;
				} else {
					LOGS.info(Thread.currentThread() +"Confirmation/Registration Number: " + confirmationNumber);
					//Thread.sleep(4000);
					driver.navigate().to(ParentWindow);
					//Thread.sleep(3000);
					LOGS.info(Thread.currentThread() +"Back to parent  :" + driver.getTitle());
					LOGS.info(Thread.currentThread() +"Confirmation/Reg. Number Parent: " + confirmationNumber);
					//Thread.sleep(3000);
					if (!confirmationNumber.equalsIgnoreCase("NA")) {
						if (OneTimeFeeQuoteDetls.equalsIgnoreCase("$0.00")) {
							if (allreadyUsedConfnumber.equalsIgnoreCase("True")) {
								confirmationNumber = "2301683";
							}

							SLocator("RegNumPaymentPage").sendKeys(confirmationNumber);
							//Thread.sleep(5000);
							SLocator("ValidatRegBtnPaymentPg").click();
						} else {

							if (allreadyUsedConfnumber.equalsIgnoreCase("True")) {
								confirmationNumber = "07708235";
							}

							SLocator("ConfirmRegNum").sendKeys(confirmationNumber);
							//Thread.sleep(5000);
							SLocator("ValidatBtnPaymentPg").click();

						}
					}
					// Thread.sleep(8000);
				}

				

				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				//Thread.sleep(8000);

				String confMsg = "";

				if (OneTimeFeeQuoteDetls.equalsIgnoreCase("$0.00")) {

					if (allreadyUsedConfnumber.equalsIgnoreCase("True")) {

						confMsg = SLocator("alreadyusedconfmssg").getText();
						LOGS.info(Thread.currentThread() +"Confirmation Message :" + confMsg);

						ExpRes = "Following message should be displayed: The confirmation or registration number has been used previously please return to the Quote and confirm the payment information.";
						ImageName = "ConfNoVerification";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (confMsg.equalsIgnoreCase(
								"The confirmation or registration number has been used previously, please return to the Quote and confirm the payment information.")) {
							LOGS.info(Thread.currentThread() +"Validation passed validation message: " + confMsg);
							Status = "Pass";
							ActRes = "Validation message is: " + confMsg.replace(",", "");
							ExportResults.exportTestResult("Validation message verification,:" + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Validation failed validation message: " + confMsg);
							Status = "Fail";
							ActRes = "Validation message is: " + confMsg;
							ExportResults.exportTestResult("Validation message verification,:" + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}

					} else {

						for (int i = 0; i < 3; i++) {

							//Thread.sleep(3000);

							String mssg = driver.findElement(By.xpath(
									"//div[@id='registration_section']//following-sibling::span[@id='paymentPage:paymentForm:register_no_success']//div[@class='slds-show']"))
									.getAttribute("id");

							LOGS.info(Thread.currentThread() +"hey_you:" + mssg);

							if (mssg.equalsIgnoreCase("register_no_error")) {

								SLocator("ValidatRegBtnPaymentPg").click();

								confMsg = SLocator("RegisterMsgpaymentpgfailure").getText();
								LOGS.info(Thread.currentThread() +"Registration Message:" + confMsg);

								//Thread.sleep(3000);

							} else if (mssg.equalsIgnoreCase("register_no_green")) {

								confMsg = SLocator("RegisterMsg").getText();

								LOGS.info(Thread.currentThread() +"Registration Message:" + confMsg);

								if (confMsg.contains("Registration number validation successful"))
									paymntRslt = "Pass";
								else
									paymntRslt = "Fail";

								LOGS.info(Thread.currentThread() +"Paymnt Result Status :" + paymntRslt);
								//Thread.sleep(3000);

								ImageName = "RegistrationProcessPage";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								ExpRes = "Registration number Verification";
								ActRes = confMsg;

								ExportResults.exportTestResult("Registration Process Validation :," + ExpRes + ","
										+ ActRes + "," + paymntRslt + "," + ImgName,pr.Resultsfolderpath);

								SLocator("SaveBtnRegPaymentPG").click();
								LOGS.info(Thread.currentThread() +"Clicked on Save button");

								break;
							} else if (i == 2) {

								driver.navigate().to(quatedetailpagebefpayment);
								driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Edit']")).click();
								//Thread.sleep(3000);
								driver.findElement(
										By.xpath("//label[text()='Payment Verified']//following::td[1]/input")).click();
								driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Save']")).click();
								//Thread.sleep(3000);
								paymntRslt = "Pass";

							}

						}

					}
				} else {

					if (allreadyUsedConfnumber.equalsIgnoreCase("True")) {

						confMsg = SLocator("alreadyusedconfmssg").getText();
						LOGS.info(Thread.currentThread() +"Confirmation Message :" + confMsg);

						ExpRes = "Following message should be displayed: The confirmation or registration number has been used previously, please return to the Quote and confirm the payment information.";
						ImageName = "ConfNoVerification";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (confMsg.equalsIgnoreCase(
								"The confirmation or registration number has been used previously, please return to the Quote and confirm the payment information.")) {
							LOGS.info(Thread.currentThread() +"Validation passed, validation message: " + confMsg);
							Status = "Pass";
							ActRes = "Validation message is: " + confMsg;
							ExportResults.exportTestResult("Validation message verification," + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Validation failed, validation message: " + confMsg);
							Status = "Fail";
							ActRes = "Validation message is: " + confMsg;
							ExportResults.exportTestResult("Validation message verification," + ExpRes + "," + ActRes
									+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}

					}

					else {
						if (ConfNumbIncorrectAmt.equalsIgnoreCase("True")) {

							if (ConfNumbforlessAmt.equalsIgnoreCase("True")) {

								String pop_Amtlow1 = SLocator("confirmMsgPaymentPGfailure").getText();
								LOGS.info(Thread.currentThread() +"Confirmation Message :" + confMsg);

								ExpRes = "Following message should be displayed: Confirmation number validation failure. ";
								ImageName = "ConfNoVerification";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								if (pop_Amtlow1.equalsIgnoreCase("Confirmation number validation failure.")) {
									LOGS.info(Thread.currentThread() +"Validation passed, validation message: " + pop_Amtlow1);
									Status = "Pass";
									ActRes = "Validation message is: " + pop_Amtlow1;
									ExportResults.exportTestResult("Validation message verification," + ExpRes + ","
											+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								} else {
									LOGS.info(Thread.currentThread() +"Validation failed, validation message: " + pop_Amtlow1);
									Status = "Fail";
									ActRes = "Validation message is: " + pop_Amtlow1;
									ExportResults.exportTestResult("Validation message verification," + ExpRes + ","
											+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}

							} else {
								LOGS.info(Thread.currentThread() +"inside ConfNumbIncorrectAmt - h2");
								String WarningMssg = SLocator("warningMssg_highamt").getText();

								LOGS.info(Thread.currentThread() +"Confirmation Message :" + WarningMssg);
								ExpRes = "Following message should be displayed:  The payment amount of ##someprice## is higher than the Order Amount. Press Save to continue.";
								ImageName = "ConfNoVerification";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								if (WarningMssg.contains("is higher than the Order Amount. Press Save to continue.")) {
									LOGS.info(Thread.currentThread() +"Validation passed, validation message: " + WarningMssg);
									Status = "Pass";
									ActRes = "Validation message is: " + WarningMssg;
									ExportResults.exportTestResult("Validation message verification," + ExpRes + ","
											+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
								} else {
									LOGS.info(Thread.currentThread() +"Validation failed, validation message: " + WarningMssg);
									Status = "Fail";
									ActRes = "Validation message is: " + WarningMssg;
									ExportResults.exportTestResult("Validation message verification," + ExpRes + ","
											+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}

								SLocator("SaveBtnPaymentPG").click();
								LOGS.info(Thread.currentThread() +"Clicked on Save button");
							}
						} else {
							for (int i = 1; i <= 3; i++) {

								LOGS.info(Thread.currentThread() +"inside error for  prob:" + i);

								String mssg = driver.findElement(By.xpath(
										"//div[@id='confirmation_section']//following-sibling::span[@id='paymentPage:paymentForm:confirm_no_success']/div[@class='slds-show']"))
										.getAttribute("id");

								if (mssg.contains("confirm_no_error")) {

									wait.until(ExpectedConditions.elementToBeClickable(SLocator("ValidatBtnPaymentPg")));
									SLocator("ValidatBtnPaymentPg").click();
									confMsg = SLocator("confirmMsgPaymentPGfailure").getText();
									LOGS.info(Thread.currentThread() +"Confirmation Message:" + confMsg);

									LOGS.info(Thread.currentThread() +"3 times clicking on validate btn:" + i);
									//Thread.sleep(3000);

								} else if (mssg.contains("confirm_no_green")) {

									confMsg = SLocator("ConfirmMsgPaymentPG").getText();
									LOGS.info(Thread.currentThread() +"Confirmation Message:" + confMsg);

									if (confMsg.contains("Confirmation number validation successful."))
										paymntRslt = "Pass";
									else
										paymntRslt = "Fail";

									LOGS.info(Thread.currentThread() +"Payment Result Status :" + paymntRslt);
									//Thread.sleep(3000);

									ImageName = "ConfirmationProcessPage";
									ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
									ExpRes = "Confirmation number Verification";
									ActRes = confMsg;

									ExportResults.exportTestResult("Confirmation Process Validation :," + ExpRes + ","
											+ ActRes + "," + paymntRslt + "," + ImgName,pr.Resultsfolderpath);

									SLocator("SaveBtnPaymentPG").click();
									LOGS.info(Thread.currentThread() +"Clicked on Save button");

									break;
								} else if (i == 2) {

									driver.navigate().to(quatedetailpagebefpayment);
									driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Edit']"))
									.click();
									//Thread.sleep(3000);
									driver.findElement(
											By.xpath("//label[text()='Payment Verified']//following::td[1]/input"))
									.click();
									driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Save']"))
									.click();
						//	driver.findElement(By.cssSelector("#fb"));
									//Thread.sleep(3000);
									paymntRslt = "Pass";

								}
							}
						}

						//Thread.sleep(3000);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

						ImageName = "PaymentProcessPage";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						LOGS.info(Thread.currentThread() +"Payment Result: " + paymntRslt);
						Status = paymntRslt;

						ExpRes = "Verify the Payment process status should be Check Payment";
						ActRes = "Payment processed successfully";

						ExportResults.exportTestResult(
								"Payment Process Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					}

					if (ConfNoValidation.equalsIgnoreCase("True") || ConfNumbDiffPhoneNo.equalsIgnoreCase("True")
							|| ConfNumbIncorrectAmt.equalsIgnoreCase("True")) {
						LOGS.info(Thread.currentThread() +"inside ConfNumbIncorrectAmt ");

						LOGS.info(Thread.currentThread() +"Verifying if Payemnt verified is checked on quote page");
						String PaymtVerified = driver
								.findElement(By.xpath("//td[text()='Payment Verified']/following-sibling::td/div/img"))
								.getAttribute("title");
						LOGS.info(Thread.currentThread() +"Value of payment verified is: " + PaymtVerified);
						ExpRes = "Payment Verified should be checked";
						ImageName = "PaymentVerified";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (PaymtVerified.equalsIgnoreCase("checked")) {
							LOGS.info(Thread.currentThread() +"Payment verified is checked");
							Status = "Pass";
							ActRes = "Payment verified checkbox is " + PaymtVerified;
							ExportResults.exportTestResult("Payment Verified checkbox validation," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							LOGS.info(Thread.currentThread() +"Payment verified is unchecked");
							Status = "Fail";
							ActRes = "Payment verified checkbox is " + PaymtVerified;
							ExportResults.exportTestResult("Payment Verified checkbox validation," + ExpRes + ","
									+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}

				}
				

				
			}

			else {
				LOGS.info(Thread.currentThread() +"Order Stage Status is not updated in Quote detail page to Check Payment");
				LOGS.info(Thread.currentThread() +"Failed in Payment Method");
				ImageName = "QuotePage_OrderStgStatus";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Fail";
				paymntRslt = "Fail";
				ExpRes = "Verify the Order Stage Status should be Check Payment";
				ActRes = "Check Payment is not updated in Order Stage Status in Quote details page";
				ExportResults.exportTestResult(
						"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		} catch (Exception e) {
			ExceptionMsg = "Exception Happened While Processing the Payment";
			LOGS.info(Thread.currentThread() + "," +"Error in payment process - " + e.getMessage());
			LOGS.error("Error in payment process - " +e);
			Status = "Fail";
			Jiracounter = "Exception";
			ImageName = "paymentPageException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			
			paymntRslt = "Fail";
			ExpRes = "Order Stage Status should be updated as Check Payment";
			ActRes = "Check Payment is not updated in Order Stage Status in Quote details page";
			ExportResults.exportTestResult(
					"Check Payment Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			return paymntRslt;
		}
		return paymntRslt;
	}

	public  String PhoneNumEditableVerification(String SelectConsultation) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Executing PhoneNumEditable method");

			if (SelectConsultation.equalsIgnoreCase("POS")) {
				SLocator("SelectConsultnBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Select Consultation button");
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(8000);
				try {
					String SelectCon = SLocator("SelectConsult").getText();
					LOGS.info(Thread.currentThread() +"Select Consultation :" + SelectCon);
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"select done");
					Thread.sleep(10000);
				}
				// Select the consultation type
				Select dropdownSelectConslt = new Select(
						driver.findElement(By.id("consultationPage:consultationFrom:consultation")));
				dropdownSelectConslt.selectByVisibleText(SelectConsultation);
				LOGS.info(Thread.currentThread() +SelectConsultation + " is selected from the dropdown list");

				ConPOSPhoneNo = SLocator("CapturePhoneNo_POS").getAttribute("value");
				Thread.sleep(3000);

				if (SelectConsultation.equalsIgnoreCase("POS")) {
					driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no")).clear();
					LOGS.info(Thread.currentThread() +"Able to edit phone number in POS");
					Thread.sleep(3000);

					/*
					 * driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					 */
					/*
					 * SLocator("savePOS"); LOGS.info(Thread.currentThread() +"Clicked on Save button");
					 */
					Status = "Pass";
					SelectConsltnRslt = Status;
					LOGS.info(Thread.currentThread() +SelectConsltnRslt);
					ExpRes = "Order Stage Status should be verified";
					ImageName = "QuotePage_OrderStgStatus";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Select Consultation:Order Stage Status :," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

					driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no")).sendKeys(ConPOSPhoneNo);
				}

			} else {
				LOGS.info(Thread.currentThread() +"Order Stage Status is not updated to Select Consultation");
				LOGS.info(Thread.currentThread() +"Failed in Select Consultation Method");
				ImageName = "QuotePage_OrderStgStatus";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Fail";
				SelectConsltnRslt = "Fail";
				ExpRes = "Order Stage Status should be updated as Select Consultation";
				ActRes = "Select Consultation is not updated in Order Stage Status in Quote details page";
				ExportResults.exportTestResult("Select Consultation:Order Stage Status :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);
			}

			if(Cardnum.equalsIgnoreCase("DIG_315_1032_TC05")||Cardnum.equalsIgnoreCase("DIG_315_1035_TC08")){

				try {
					String After_SelectConsultation = quatePagevalidate("After_SelectConsultation");

					if (After_SelectConsultation.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"Failed in quate Page validate Method");
						Status = "Fail";
						//org.testng.Assert.fail("Failed in quate Page validate method");

					}
				} catch (Exception e) {
					count = count + 1;
					//org.testng.Assert.fail("Failed in quatePagevalidate");
					LOGS.info(Thread.currentThread() +"Error in quatePagevalidate");
				}


			}


		}

		catch (Exception e) {
			Status = "Fail";
			Jiracounter = "Exception";
			SelectConsltnRslt = "Fail";
			ExpRes = "Verification of Select Consultation method";
			ActRes = "Error in Select Consultation method";
			ExportResults.exportTestResult(
					"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return SelectConsltnRslt;
	}

	public  String VerifyPhoneNumberFormat(String PhoneNum) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Rep Phone number Format Verification started");
			String[] phoneNo = RepContactPhoneNo.split("-");
			int Count1 = phoneNo[0].length();
			if (Count1 == 3)
				Status = "Pass";
			else
				Status = "Fail";
			LOGS.info(Thread.currentThread() +"Area Code Status :" + Status);

			if (Status.equalsIgnoreCase("Pass")) {
				int Count2 = phoneNo[1].length();
				if (Count2 == 3)
					Status = "Pass";
				else
					Status = "Fail";
				LOGS.info(Thread.currentThread() +"Local Code Status :" + Status);
			}

			if (Status.equalsIgnoreCase("Pass")) {
				int Count3 = phoneNo[2].length();
				if (Count3 == 4)
					Status = "Pass";
				else
					Status = "Fail";
				LOGS.info(Thread.currentThread() +"Final 4 digit status :" + Status);
			}

			if (Status.equalsIgnoreCase("Pass"))
				LOGS.info(Thread.currentThread() +"Phone number is in correct format");
			else {
				LOGS.info(Thread.currentThread() +"Phone number is not in correct format, should be in the format of 123-456-7890");
				Status = "Fail";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return Status;
	}

	public  String PhoneValidnSelectConsultn() throws Exception {

		try {

			LOGS.info(Thread.currentThread() +"Phone Number Verification with Sales Rep Number(TSales)/Business Phone Number(Premise)");

			if (SalesRepType.equalsIgnoreCase("TSales")) {
				LOGS.info(Thread.currentThread() +"RepContactPhoneNo" + RepContactPhoneNo);
				String RepContactPhoneNo1 = RepContactPhoneNo.replace("-", "");
				LOGS.info(Thread.currentThread() +"RepContactPhoneNo after removing - " + RepContactPhoneNo1);
				if (ConPOSPhoneNo.equalsIgnoreCase(RepContactPhoneNo1)) {
					LOGS.info(Thread.currentThread() +SelectConsultation + " Phone number(" + ConPOSPhoneNo + ") is matching with "
							+ SalesRepType + " Rep Phone number-" + RepContactPhoneNo1);
					Status = "Pass";
					ActRes = SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + ConPOSPhoneNo
							+ ") is matching with " + SalesRepType + " Rep Phone number-" + RepContactPhoneNo1;
					ImageName = "PhoneNumberValidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "POS Consultation Numer should match with Rep phone Number";
					ExportResults.exportTestResult(
							"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +SelectConsultation + " Phone number(" + ConPOSPhoneNo + ") is not matching with "
							+ SalesRepType + " Rep Phone number-" + RepContactPhoneNo1);
					Status = "Fail";
					ActRes = SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + ConPOSPhoneNo
							+ ") is not matching with " + SalesRepType + " Rep Phone number-" + RepContactPhoneNo1;
				}

			} else if (SalesRepType.equalsIgnoreCase("Premise")) {
				CompanyPhoneNo = SLocator("CapturePhoneNo_POS").getAttribute("value");
				LOGS.info(Thread.currentThread() +"CompanyPhoneNo" + CompanyPhoneNo);
				String CompanyPhoneNo1 = CompanyPhoneNo.replace("-", "");
				LOGS.info(Thread.currentThread() +"Company Phone number after removing - " + CompanyPhoneNo1);
				if (ConPOSPhoneNo.equalsIgnoreCase(CompanyPhoneNo1)) {
					LOGS.info(Thread.currentThread() +SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + CompanyPhoneNo1
							+ ") is matching with Business Phone number-" + CompanyPhoneNo1);
					Status = "Pass";
					// ActRes = "Phone number " + ConPOSPhoneNo + " is matching
					// with Company phone number "+ CompanyPhoneNo;
					ActRes = SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + CompanyPhoneNo1
							+ ") is matching with Business Phone number-" + CompanyPhoneNo1;

					ImageName = "PhoneNumberValidation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "POS Consultation Numer should match with Business phone Number";
					ExportResults.exportTestResult(
							"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + CompanyPhoneNo1
							+ ") is not matching with Business Phone number-" + CompanyPhoneNo1);
					Status = "Fail";
					// ActRes = "Phone number " + ConPOSPhoneNo + " is not
					// matching with Company phone number "+ CompanyPhoneNo;
					ActRes = SalesRepType + " Rep: " + SelectConsultation + " Phone number(" + ConPOSPhoneNo
							+ ") is not matching with Business Phone number-" + CompanyPhoneNo;
				}
			}

			ImageName = "PhoneNumberValidation";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Phone Number validation in Select Consultation";
			ExportResults.exportTestResult(
					"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		} catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			SelectConsltnRslt = "Fail";
			ExpRes = "Verification of Select Consultation method";
			ActRes = "Error in Phone Number Validation method";
			ExportResults.exportTestResult(
					"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return Status;
	}

	public  String VerifyPhoneNumFieldIsEditable(String SelectConsultation) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Executing PhoneNumEditable method");

			if (SelectConsultation.equalsIgnoreCase("POS") || SelectConsultation.equalsIgnoreCase("Scheduled")) {

				LOGS.info(Thread.currentThread() +"Verifying the Phone Number field is Editable");

				// Select the consultation type
				Select dropdownSelectConslt = new Select(
						driver.findElement(By.id("consultationPage:consultationFrom:consultation")));
				dropdownSelectConslt.selectByVisibleText(SelectConsultation);
				LOGS.info(Thread.currentThread() +SelectConsultation + " is selected from the dropdown list");

				driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no")).clear();
				LOGS.info(Thread.currentThread() +"Able to edit phone number in POS");
				Thread.sleep(3000);

				Status = "Pass";
				ExpRes = "PhoneNumberField Verification";
				ActRes = "Phone number field is editable";
				ImageName = "ClearPhField_POSPage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Select Consultation:POS Page-Cleared Phone number field," + ExpRes + ","
						+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no")).sendKeys(ConPOSPhoneNo);

				Status = "Pass";
				SelectConsltnRslt = Status;
				LOGS.info(Thread.currentThread() +SelectConsltnRslt);
				ImageName = "NPhoneNumber_POSPage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Phone number verification in POS Page";
				ActRes = "Updated New Phone number";
				ExportResults.exportTestResult("Select Consultation:POS Page-Entered New Phone Number," + ExpRes + ","
						+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}
		}

		catch (Exception e) {
			Status = "Fail";
			Jiracounter = "Exception";
			SelectConsltnRslt = "Fail";
			ExpRes = "Verification of Select Consultation method";
			ActRes = "Error in Select Consultation method";
			ExportResults.exportTestResult(
					"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return SelectConsltnRslt;
	}

	
	public  String ConsultationVerification(String SelectConsultation) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Executing ConsultationVerification method");

			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);

			if (OrderStageQuoteDetls.equalsIgnoreCase("Select Consultation")) {
				SLocator("SelectConsultnBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Select Consultation button");
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);

				String SelectCon = SLocator("SelectConsult").getText();
				LOGS.info(Thread.currentThread() +"Select Consultation :" + SelectCon);

				// Select the consultation type
				Select dropdownSelectConslt = new Select(
						driver.findElement(By.id("consultationPage:consultationFrom:consultation")));
				dropdownSelectConslt.selectByVisibleText(SelectConsultation);
				LOGS.info(Thread.currentThread() +SelectConsultation + " is selected from the dropdown list");

				String ConPOSPhoneNo = SLocator("CapturePhoneNo_POS").getText();

				if (!ConPOSPhoneNo.equalsIgnoreCase(CompanyPhoneNo)) {
					LOGS.info(Thread.currentThread() +"Phone number " + ConPOSPhoneNo + " is not matching with business phone number -"
							+ CompanyPhoneNo);
					LOGS.info(Thread.currentThread() +"Phone number Format Verification started");
					String[] phoneNo = RepContactPhoneNo.split("-");
					int Count1 = phoneNo[0].length();
					if (Count1 == 3) {
						Status = "Pass";
					} else
						Status = "Fail";
					LOGS.info(Thread.currentThread() +"Area Code Status :" + Status);

					if (Status.equalsIgnoreCase("Pass")) {
						int Count2 = phoneNo[1].length();
						if (Count2 == 3)
							Status = "Pass";
						else
							Status = "Fail";
						LOGS.info(Thread.currentThread() +"Local Code Status :" + Status);
					}

					if (Status.equalsIgnoreCase("Pass")) {
						int Count3 = phoneNo[2].length();
						if (Count3 == 4)
							Status = "Pass";
						else
							Status = "Fail";
						LOGS.info(Thread.currentThread() +"Final 4 digit status :" + Status);
					}

					if (Status.equalsIgnoreCase("Pass"))
						LOGS.info(Thread.currentThread() +"Phone number is in correct format");
					else
						LOGS.info(Thread.currentThread() +"Phone number is not in correct format, should be in the format of 123-456-7890");
				} else {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Customer Phone number is not Matching" + Status);
				}

				if (SelectConsultation.equalsIgnoreCase("POS")) {
					driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no")).clear();
					driver.findElement(By.id("consultationPage:consultationFrom:pos_phone_no"))
					.sendKeys(RepContactPhoneNo);
					/*
					 * driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					 */
					/*
					 * SLocator("savePOS"); LOGS.info(Thread.currentThread() +"Clicked on Save button");
					 */
					LOGS.info(Thread.currentThread() +"Able to edit phone number in POS");
					Status = "Pass";

					SelectConsltnRslt = Status;
					// LOGS.info(Thread.currentThread() +SelectConsltnRslt);
					ExpRes = "Order Stage Status should be verified";
					ImageName = "QuotePage_OrderStgStatus";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Select Consultation : Order Stage Status :," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

			} else {
				LOGS.info(Thread.currentThread() +"Order Stage Status is not updated to Select Consultation");
				LOGS.info(Thread.currentThread() +"Failed in Select Consultation Method");
				ImageName = "QuotePage_OrderStgStatus";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Fail";
				SelectConsltnRslt = "Fail";
				ExpRes = "Order Stage Status should be updated as Select Consultation";
				ActRes = "Select Consultation is not updated in Order Stage Status in Quote details page";
				ExportResults.exportTestResult("Select Consultation:Order Stage Status :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}

		catch (Exception e) {
			Status = "Fail";
			Jiracounter = "Exception";
			SelectConsltnRslt = "Fail";
			ExpRes = "Verification of Select Consultation method";
			ActRes = "Error in Select Consultation method";
			ExportResults.exportTestResult(
					"Select Consultation Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
		return SelectConsltnRslt;
	}

	public  String PhoneNoFormatVerifation(String PhoneNum) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Phone number Format Verification started");
			String[] phoneNo = RepContactPhoneNo.split("-");
			int Count1 = phoneNo[0].length();
			if (Count1 == 3)
				Status = "Pass";
			else
				Status = "Fail";
			LOGS.info(Thread.currentThread() +"Area Code Status :" + Status);

			if (Status.equalsIgnoreCase("Pass")) {
				int Count2 = phoneNo[1].length();
				if (Count2 == 3)
					Status = "Pass";
				else
					Status = "Fail";
				LOGS.info(Thread.currentThread() +"Local Code Status :" + Status);
			}

			if (Status.equalsIgnoreCase("Pass")) {
				int Count3 = phoneNo[2].length();
				if (Count3 == 4)
					Status = "Pass";
				else
					Status = "Fail";
				LOGS.info(Thread.currentThread() +"Final 4 digit status :" + Status);
			}

			if (Status.equalsIgnoreCase("Pass"))
				LOGS.info(Thread.currentThread() +"Phone number is in correct format");
			else {
				LOGS.info(Thread.currentThread() +"Phone number is not in correct format, should be in the format of 123-456-7890");
				Status = "Fail";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return Status;
	}

	public  void addProdAddonvalidation(String[] Prods, String[] Plans) throws Exception {

		int i, j;
		try {
			for (i = 0, j = 0; i < Prods.length; i++, j++) {
				SLocator("AddProdBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Add Products Button");

				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);
				SLocator("FilterBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Filter icon");
				Thread.sleep(5000);
				SLocator("ProdNameTextBox").clear();
				SLocator("ProdNameTextBox").sendKeys(Prods[i]);
				LOGS.info(Thread.currentThread() +"Entered product name: " + Prods[i]);
				SLocator("ApplyBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Apply button");

				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(5000);

				SLocatorDynamic("AddProductCBDynamic1_" + Prods[i] + "_AddProductCBDynamic2").click();
				LOGS.info(Thread.currentThread() +"Checked the Checkbox of productname");

				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("SelectProdBtn"));
				LOGS.info(Thread.currentThread() +"scrolled Up");

				SLocator("SelectProdBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Select Button");

				Thread.sleep(3000);

				LOGS.info(Thread.currentThread() +"Product Name :" + Prods[i]);
				if ((Prods[i].equalsIgnoreCase(OR.getProperty("10"))) || (Prods[i].contains("Mobile Boost"))
						|| (Prods[i].equalsIgnoreCase("Search (A la carte)")|| (Prods[i].equalsIgnoreCase(OR.getProperty("30")))|| (Prods[i].equalsIgnoreCase(OR.getProperty("31"))) || (Prods[i].equalsIgnoreCase(OR.getProperty("32"))))
						|| (Prods[i].contains(OR.getProperty("11")))) {
					LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
					EnterBudget(Prods[i], Plans[j]);
				} else if (!((Prods[i].equalsIgnoreCase("Listings Management"))
						|| (Prods[i].equalsIgnoreCase("Review")))) {
					LOGS.info(Thread.currentThread() +"Checking the Checkbox of Plan");
					SLocatorDynamic("AddProWebCBDynamic1_" + Plans[j] + "_AddProWebCBDynamic2").click();
					LOGS.info(Thread.currentThread() +"Checked the Checkbox of Plan");

					Addonvalidate(Plans[j]);

					Thread.sleep(5000);

					SLocator("Save").click();
					LOGS.info(Thread.currentThread() +"First Save btn clicked");

				}
				if (ProductName.contains("Website")) {

					String websiteAmount = SLocator("WebsiteAmount").getText();

					ExpRes = "Amount for Website should be valid ";
					ActRes = "Amount for Website is :" + websiteAmount;
					Status = "Pass";
					ImageName = "EditProductpage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Website Plan AmountVerification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}
				LOGS.info(Thread.currentThread() +"Sleep time started");
				Thread.sleep(15000);

				
			}
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(5000);

			ImageName = "AddingProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Thread.sleep(3000);
			SLocator("SaveBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
			
			ExpRes = "Product Should be added successfully";
			ActRes = "Product added successfully";
			Status = "Pass";
			ExportResults.exportTestResult("Adding Product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}

		catch (Exception e) {
			e.printStackTrace();
			Status = "Fail";
			Jiracounter = "Exception";
			AddProdResult = "Fail";
			ImageName = "AddingProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult("Add Product:," + "Product should be added to quote successfully" + ","
					+ "Application Slowness - Object not found" + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		}

	}

	public  String Addonvalidate(String planName) throws Exception {

		 if (planName.equalsIgnoreCase("Smart Site - Standard")) {

			standardWebsite();

		} else if (planName.equalsIgnoreCase("Smart Site - Standard (Spread Billing)")) {

			StdWebsitSpreadBilling();

		} else if (planName.equalsIgnoreCase("Smart Site - Pro")) {

			ProWebsite();

		} else if (planName.equalsIgnoreCase("Smart Site - Pro (Spread Billing)")) {

			ProWebsiteSpreadBilling();

		}

		return "Pass";

	}

	
	public  void standardWebsite() throws Exception {
		try {

			SLocatorDynamic("AddProductCBconfig1_" + "Smart Site - Standard" + "_AddProductCBconfig2").click();
			LOGS.info(Thread.currentThread() +"Clicked on Configure");

			// __Other Options____________________________

			String WebsiteDesignFeeDisabled = SLocator("SWBsWebDig").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"WebsiteDesignFeeDisabled" + WebsiteDesignFeeDisabled);
			String WebsiteDesignchecked = SLocator("SWBsWebDig").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"WebsiteDesignchecked" + WebsiteDesignchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "WebsiteDesignFee checkbox should be auto Checked and should be disabled";
			ActRes = "WebsiteDesignFee checkbox is auto Checked and is disabled";
			String ActFailRes = "WebsiteDesignFee checkbox is not auto Checked";
			if ((WebsiteDesignFeeDisabled.equalsIgnoreCase("true"))
					&& (WebsiteDesignchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'WebsiteDesignFee CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"WebsiteDesignFee CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'WebsiteDesignFee CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"WebsiteDesignFee CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String ListingsManagementDisabled = SLocator("SWBsListingsManagement").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"ListingsManagementDisabled" + ListingsManagementDisabled);
			String ListingsManagementchecked = SLocator("SWBsListingsManagement").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"ListingsManagementchecked" + ListingsManagementchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Listings Management checkbox should be auto Checked and should be disabled";
			ActRes = "Listings Management checkbox is auto Checked and is disabled";
			ActFailRes = "Listings Management checkbox is not auto Checked";
			if ((ListingsManagementDisabled.equalsIgnoreCase("true"))
					&& (ListingsManagementchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox':," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String IncludedDomainDisabled = SLocator("SWBsDDMN").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainDisabled);

			String IncludedDomainchecked = SLocator("SWBsDDMN").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainchecked);
			ExpRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActFailRes = "IncludedDomain checkbox is not auto Checked";
			if ((IncludedDomainDisabled.equalsIgnoreCase("true")) && (IncludedDomainchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'IncludedDomain CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'IncludedDomain CheckBox':," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String PhotomotionVideoDisabled = SLocator("SWBsphotoMotion").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"PhotomotionVideoDisabled" + PhotomotionVideoDisabled);

			String PhotomotionVideochecked = SLocator("SWBsphotoMotion").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"PhotomotionVideochecked" + PhotomotionVideochecked);
			ExpRes = "PhotomotionVideo checkbox auto Checked and Disabled by default";
			ActRes = "PhotomotionVideo checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((PhotomotionVideoDisabled.equalsIgnoreCase("true"))
					&& (PhotomotionVideochecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'PhotomotionVideo CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'PhotomotionVideo CheckBox':," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote successfully";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		} catch (Exception e) {
			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote failed";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Fail";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			e.printStackTrace();
		}

		// SLocator("Save").click();
		SLocator("configProdSave").click();
		LOGS.info(Thread.currentThread() +"Clicked Save on Configure Products");

	}

	public  void StdWebsitSpreadBilling() throws Exception {

		try {

			SLocatorDynamic("AddProductCBconfig1_" + "Smart Site - Standard (Spread Billing)" + "_AddProductCBconfig2")
			.click();
			LOGS.info(Thread.currentThread() +"Clicked on Configure");


			// __Other Options____________________________

			String ListingsManagementDisabled = SLocator("SWBsListingsManagement").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"ListingsManagementDisabled" + ListingsManagementDisabled);
			String ListingsManagementchecked = SLocator("SWBsListingsManagement").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"ListingsManagementchecked" + ListingsManagementchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Listings Management checkbox should be auto Checked and should be disabled";
			ActRes = "Listings Management checkbox is auto Checked and is disabled";
			String ActFailRes = "Listings Management checkbox is not auto Checked";
			if ((ListingsManagementDisabled.equalsIgnoreCase("true"))
					&& (ListingsManagementchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox'," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String IncludedDomainDisabled = SLocator("SWBsDDMN").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainDisabled);

			String IncludedDomainchecked = SLocator("SWBsDDMN").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainchecked);
			ExpRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActFailRes = "IncludedDomain checkbox is not auto Checked";
			if ((IncludedDomainDisabled.equalsIgnoreCase("true")) && (IncludedDomainchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String PhotomotionVideoDisabled = SLocator("SWBsphotoMotion").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"PhotomotionVideoDisabled" + PhotomotionVideoDisabled);
			String PhotomotionVideochecked = SLocator("SWBsphotoMotion").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"PhotomotionVideochecked" + PhotomotionVideochecked);
			ExpRes = "PhotomotionVideo checkbox auto Checked and Disabled by default";
			ActRes = "PhotomotionVideo checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((PhotomotionVideoDisabled.equalsIgnoreCase("true"))
					&& (PhotomotionVideochecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String WebDesignSvc12Disabled = SLocator("SWBsWebDesignSvc").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"WebDesignSvc12Disabled" + WebDesignSvc12Disabled);
			String WebDesignSvc12checked = SLocator("SWBsWebDesignSvc").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"WebDesignSvc12checked" + WebDesignSvc12checked);
			ExpRes = "'Web Design Svc-12 payments' checkbox auto Checked and Disabled by default";
			ActRes = "'Web Design Svc-12 payments' checkbox is auto Checked and Disabled by default";
			ActFailRes = "'Web Design Svc-12 payments' checkbox is not auto Checked";

			if ((WebDesignSvc12Disabled.equalsIgnoreCase("true")) && (WebDesignSvc12checked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Web Design Svc-12 payments' CheckBoxis auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"Web Design Svc-12 payments:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Web Design Svc-12 payments'CheckBox is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"Web Design Svc-12 payments:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String webDesignintialpaymentDisabled = SLocator("SWBswebDesignintialpayment")
					.getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"webDesignintialpaymentDisabled" + webDesignintialpaymentDisabled);
			String webDesignintialpaymentchecked = SLocator("SWBswebDesignintialpayment").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"webDesignintialpaymentchecked" + webDesignintialpaymentchecked);
			ExpRes = "'Web Design Svc Initial Payment' checkbox auto Checked and Disabled by default";
			ActRes = "'Web Design Svc Initial Payment' checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((webDesignintialpaymentDisabled.equalsIgnoreCase("true"))
					&& (webDesignintialpaymentchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Web Design Svc Initial Payment'CheckBox is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Web Design Svc Initial Payment':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Web Design Svc Initial Payment' CheckBox is not auto Checked and Disabled by default");
				ExportResults.exportTestResult("'Web Design Svc Initial Payment' CheckBox:," + ExpRes + "," + ActFailRes
						+ "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote successfully";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		} catch (Exception e) {
			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote failed";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Fail";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			e.printStackTrace();
		}

		// SLocator("Save").click();
		SLocator("configProdSave").click();
		LOGS.info(Thread.currentThread() +"Clicked Save on Configure Products");

	}

	public  void ProWebsite() throws Exception {
		try {

			SLocatorDynamic("AddProductCBconfig1_" + "Smart Site - Pro" + "_AddProductCBconfig2").click();
			LOGS.info(Thread.currentThread() +"Clicked on Configure");

			// _Ad-On_____________________________

			String AdditionalPageschecked = SLocator("SWBsAddPages").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"AdditionalPageschecked" + AdditionalPageschecked);
			ExpRes = "AdditionalPages radiobutton should be enable and checkable";
			ActRes = "AdditionalPages radiobutton is enabled and checkable";
			String ActFailRes = "AdditionalPages radiobutton is not Checked";

			if (AdditionalPageschecked.equalsIgnoreCase("false")) {

				WebElement AdditionalPages = SLocator("SWBsAddPages");
				if (AdditionalPages.isSelected()) {

					LOGS.info(Thread.currentThread() +"'AdditionalPages' radiobutton is enabled but not checked by default");
					ExportResults.exportTestResult(
							"AdditionalPages CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);

				} else {

					AdditionalPages.click();
					LOGS.info(Thread.currentThread() +"'AdditionalPages' radiobutton is enabled and able to check");
					ExportResults.exportTestResult(
							"AdditionalPages CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
				}

			} else {
				LOGS.info(Thread.currentThread() +"AdditionalPages is not enabled");
				ExportResults.exportTestResult(
						"AdditionalPages CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);

			}

			// otherOptions_______________________________________________

			String ListingsManagementDisabled = SLocator("SWBsListingsManagement").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"ListingsManagementDisabled" + ListingsManagementDisabled);
			String ListingsManagementchecked = SLocator("SWBsListingsManagement").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"ListingsManagementchecked" + ListingsManagementchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Listings Management checkbox should be auto Checked and should be disabled";
			ActRes = "Listings Management checkbox is auto Checked and is disabled";
			ActFailRes = "Listings Management checkbox is not auto Checked";
			if ((ListingsManagementDisabled.equalsIgnoreCase("true"))
					&& (ListingsManagementchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox'," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String IncludedDomainDisabled = SLocator("SWBsDDMN").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainDisabled);

			String IncludedDomainchecked = SLocator("SWBsDDMN").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainchecked);
			ExpRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActFailRes = "IncludedDomain checkbox is not auto Checked";
			if ((IncludedDomainDisabled.equalsIgnoreCase("true")) && (IncludedDomainchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String PhotomotionVideoDisabled = SLocator("SWBsphotoMotion").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"PhotomotionVideoDisabled" + PhotomotionVideoDisabled);
			String PhotomotionVideochecked = SLocator("SWBsphotoMotion").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"PhotomotionVideochecked" + PhotomotionVideochecked);
			ExpRes = "PhotomotionVideo checkbox auto Checked and Disabled by default";
			ActRes = "PhotomotionVideo checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((PhotomotionVideoDisabled.equalsIgnoreCase("true"))
					&& (PhotomotionVideochecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String AppointmentDisabled = SLocator("SWBsAppointment").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"AppointmentDisabled" + AppointmentDisabled);

			String Appointmentchecked = SLocator("SWBsAppointment").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"Appointmentchecked" + Appointmentchecked);
			ExpRes = "Appointment checkbox should be auto Checked and should be disabled";
			ActRes = "Appointment checkbox is auto Checked and is disabled";
			ActFailRes = "Appointment checkbox is not auto Checked";
			if ((AppointmentDisabled.equalsIgnoreCase("true")) && (Appointmentchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Appointment CheckBox'is Checked and Disabled as per requirement");
				ExportResults.exportTestResult(
						"Appointment CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Appointment CheckBox'is not Checked and not Disabled");
				ExportResults.exportTestResult(
						"Appointment CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String DIYItemsDisabled = SLocator("SWBsDcart").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"DIYItemsDisabled" + DIYItemsDisabled);

			String DIYItemschecked = SLocator("SWBsDcart").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"DIYItemschecked" + DIYItemschecked);
			ExpRes = "DIYItems checkbox should be auto Checked and should be disabled";
			ActRes = "DIYItems checkbox is auto Checked and is disabled";
			ActFailRes = "DIYItems checkbox is not auto Checked";
			if ((DIYItemsDisabled.equalsIgnoreCase("true")) && (DIYItemschecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'DIYItems CheckBox'is Checked and Disabled as per requirement");
				ExportResults
				.exportTestResult("DIYItems CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'DIYItems CheckBox'is not Checked and not Disabled");
				ExportResults.exportTestResult(
						"DIYItems CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String WebsiteDesignFeeDisabled = SLocator("SWBsWebDig").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"WebsiteDesignFeeDisabled" + WebsiteDesignFeeDisabled);
			String WebsiteDesignchecked = SLocator("SWBsWebDig").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"WebsiteDesignchecked" + WebsiteDesignchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "WebsiteDesignFee checkbox should be auto Checked and should be disabled";
			ActRes = "WebsiteDesignFee checkbox is auto Checked and is disabled";
			ActFailRes = "WebsiteDesignFee checkbox is not auto Checked";
			if ((WebsiteDesignFeeDisabled.equalsIgnoreCase("true"))
					&& (WebsiteDesignchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'WebsiteDesignFee CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"WebsiteDesignFee CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'WebsiteDesignFee CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"WebsiteDesignFee CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote successfully";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		} catch (Exception e) {
			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote failed";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Fail";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			e.printStackTrace();
		}

		// SLocator("Save").click();
		SLocator("configProdSave").click();
		LOGS.info(Thread.currentThread() +"Clicked Save on Configure Products");

	}

	public  void ProWebsiteSpreadBilling() throws Exception {

		try {

			SLocatorDynamic("AddProductCBconfig1_" + "Smart Site - Pro (Spread Billing)" + "_AddProductCBconfig2")
			.click();
			LOGS.info(Thread.currentThread() +"Clicked on Configure");

			// _Ad-On_____________________________

			String AdditionalPageschecked = SLocator("SWBsAddPages").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"AdditionalPageschecked" + AdditionalPageschecked);
			ExpRes = "AdditionalPages radiobutton should be enable and checkable";
			ActRes = "AdditionalPages radiobutton is enabled and checkable";
			String ActFailRes = "AdditionalPages radiobutton is not Checked";

			if (AdditionalPageschecked.equalsIgnoreCase("false")) {

				WebElement AdditionalPages = SLocator("SWBsAddPages");
				if (AdditionalPages.isSelected()) {

					LOGS.info(Thread.currentThread() +"'AdditionalPages' radiobutton is enabled but not checked by default");
					ExportResults.exportTestResult(
							"AdditionalPages CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);

				} else {

					AdditionalPages.click();
					LOGS.info(Thread.currentThread() +"'AdditionalPages' radiobutton is enabled and able to check");
					ExportResults.exportTestResult(
							"AdditionalPages CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
				}

			} else {
				LOGS.info(Thread.currentThread() +"AdditionalPages is not enabled");
				ExportResults.exportTestResult(
						"AdditionalPages CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);

			}

			// otherOptions_______________________________________________
			String ListingsManagementDisabled = SLocator("SWBsListingsManagement").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"ListingsManagementDisabled" + ListingsManagementDisabled);
			String ListingsManagementchecked = SLocator("SWBsListingsManagement").getAttribute("checked");
			LOGS.info(Thread.currentThread() +"ListingsManagementchecked" + ListingsManagementchecked);
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Listings Management checkbox should be auto Checked and should be disabled";
			ActRes = "Listings Management checkbox is auto Checked and is disabled";
			ActFailRes = "Listings Management checkbox is not auto Checked";
			if ((ListingsManagementDisabled.equalsIgnoreCase("true"))
					&& (ListingsManagementchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Listings Management CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Listings Management CheckBox'," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String IncludedDomainDisabled = SLocator("SWBsDDMN").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainDisabled);

			String IncludedDomainchecked = SLocator("SWBsDDMN").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"IncludedDomainDisabled" + IncludedDomainchecked);
			ExpRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActRes = "IncludedDomain checkbox auto Checked and Disabled by default";
			ActFailRes = "IncludedDomain checkbox is not auto Checked";
			if ((IncludedDomainDisabled.equalsIgnoreCase("true")) && (IncludedDomainchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'IncludedDomain CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"IncludedDomain CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String PhotomotionVideoDisabled = SLocator("SWBsphotoMotion").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"PhotomotionVideoDisabled" + PhotomotionVideoDisabled);
			String PhotomotionVideochecked = SLocator("SWBsphotoMotion").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"PhotomotionVideochecked" + PhotomotionVideochecked);
			ExpRes = "PhotomotionVideo checkbox auto Checked and Disabled by default";
			ActRes = "PhotomotionVideo checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((PhotomotionVideoDisabled.equalsIgnoreCase("true"))
					&& (PhotomotionVideochecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'PhotomotionVideo CheckBox'is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"PhotomotionVideo CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String AppointmentDisabled = SLocator("SWBsAppointment").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"AppointmentDisabled" + AppointmentDisabled);

			String Appointmentchecked = SLocator("SWBsAppointment").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"Appointmentchecked" + Appointmentchecked);
			ExpRes = "Appointment checkbox should be auto Checked and should be disabled";
			ActRes = "Appointment checkbox is auto Checked and is disabled";
			ActFailRes = "Appointment checkbox is not auto Checked";
			if ((AppointmentDisabled.equalsIgnoreCase("true")) && (Appointmentchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Appointment CheckBox'is Checked and Disabled as per requirement");
				ExportResults.exportTestResult(
						"Appointment CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Appointment CheckBox'is not Checked and not Disabled");
				ExportResults.exportTestResult(
						"Appointment CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String DIYItemsDisabled = SLocator("SWBsDcart").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"DIYItemsDisabled" + DIYItemsDisabled);

			String DIYItemschecked = SLocator("SWBsDcart").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"DIYItemschecked" + DIYItemschecked);
			ExpRes = "DIYItems checkbox should be auto Checked and should be disabled";
			ActRes = "DIYItems checkbox is auto Checked and is disabled";
			ActFailRes = "DIYItems checkbox is not auto Checked";
			if ((DIYItemsDisabled.equalsIgnoreCase("true")) && (DIYItemschecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'DIYItems CheckBox'is Checked and Disabled as per requirement");
				ExportResults
				.exportTestResult("DIYItems CheckBox:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'DIYItems CheckBox'is not Checked and not Disabled");
				ExportResults.exportTestResult(
						"DIYItems CheckBox:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String WebDesignSvc12Disabled = SLocator("SWBsWebDesignSvc").getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"WebDesignSvc12Disabled" + WebDesignSvc12Disabled);
			String WebDesignSvc12checked = SLocator("SWBsWebDesignSvc").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"WebDesignSvc12checked" + WebDesignSvc12checked);
			ExpRes = "'Web Design Svc-12 payments' checkbox auto Checked and Disabled by default";
			ActRes = "'Web Design Svc-12 payments' checkbox is auto Checked and Disabled by default";
			ActFailRes = "'Web Design Svc-12 payments' checkbox is not auto Checked";

			if ((WebDesignSvc12Disabled.equalsIgnoreCase("true")) && (WebDesignSvc12checked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Web Design Svc-12 payments' CheckBoxis auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"Web Design Svc-12 payments:," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Web Design Svc-12 payments'CheckBox is not auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"Web Design Svc-12 payments:," + ExpRes + "," + ActFailRes + "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			String webDesignintialpaymentDisabled = SLocator("SWBswebDesignintialpayment")
					.getAttribute("aria-disabled");
			LOGS.info(Thread.currentThread() +"webDesignintialpaymentDisabled" + webDesignintialpaymentDisabled);
			String webDesignintialpaymentchecked = SLocator("SWBswebDesignintialpayment").getAttribute("aria-checked");
			LOGS.info(Thread.currentThread() +"webDesignintialpaymentchecked" + webDesignintialpaymentchecked);
			ExpRes = "'Web Design Svc Initial Payment' checkbox auto Checked and Disabled by default";
			ActRes = "'Web Design Svc Initial Payment' checkbox is auto Checked and Disabled by default";
			ActFailRes = "PhotomotionVideo checkbox is not auto Checked";

			if ((webDesignintialpaymentDisabled.equalsIgnoreCase("true"))
					&& (webDesignintialpaymentchecked.equalsIgnoreCase("true"))) {

				LOGS.info(Thread.currentThread() +"'Web Design Svc Initial Payment'CheckBox is auto Checked and Disabled by default");
				ExportResults.exportTestResult(
						"'Web Design Svc Initial Payment':," + ExpRes + "," + ActRes + "," + "Pass" + "," + ImgName,pr.Resultsfolderpath);
			} else {

				LOGS.info(Thread.currentThread() +"'Web Design Svc Initial Payment' CheckBox is not auto Checked and Disabled by default");
				ExportResults.exportTestResult("'Web Design Svc Initial Payment' CheckBox:," + ExpRes + "," + ActFailRes
						+ "," + "Fail" + "," + ImgName,pr.Resultsfolderpath);
			}

			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote successfully";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		} catch (Exception e) {
			ExpRes = "Product should be added to quote successfully";
			ActRes = "Product added to quote failed";
			ImageName = "Configure Products";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Fail";
			ExportResults
			.exportTestResult("Configure Products:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		//	e.printStackTrace();
		}

		// SLocator("Save").click();
		SLocator("configProdSave").click();
		LOGS.info(Thread.currentThread() +"Clicked Save on Configure Products");

	}

	public void SFLogout() throws Exception {
		
     try {
    	 LOGS.info("I am a Driver before Logout: "+driver);
    	LOGS.info("driver value: "+driver);
		LOGS.info("driver value: "+driver);
		LOGS.info("driver value: "+driver);
    	 ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
		LOGS.info(Thread.currentThread() +"No of Windows Opened: "+newWindowHandle);
		driver.switchTo().window(newWindowHandle.get(0));
     }
     catch(Exception e) {
    	 LOGS.info(Thread.currentThread() +"Exception in Logout: "+e.getMessage());
     }
		LOGS.info(Thread.currentThread() +"This is Logout Method");
		if(driver == null){
			LOGS.info(Thread.currentThread() +"webdriver value is null");
			}else {
		          //driver.close();
				  driver.quit();
				  driver = null;
				  LOGS.info(Thread.currentThread() +"Sucessfully Quit the Browser.");
			}
	
		
		
		
	}

	public  String CPQMainMethod(String[] ProductName, String[] PlanName, String repName, String Resultsfolderpath) {
		//Select SalesRepType -> TSales OR Premise OR SPE  
		//SalesRepType="TSales";
		SalesRepType=repName;
		//Select Consultation -> POS OR Scheduled
		//SelectConsultation="POS";
		SelectConsultation="On Demand";
		
		//Select the Stage -> Quote OR Signature OR Consultation OR Payment
		Stage="Submit"; 
		// Select OpportunityType -> "Iteration1" for single opportunity OR "Iteration2" for 2 Opportunities
		OpportunityType="Iteration1";
		//Select Account Type
		AccountType="LeadConvert";
		
		//Select Document Type -> Contract OR Proposal
		GenerateDocument="Contract";
		Day3="";
		CancelAll="";
		LRSelection = "WithoutLRBudgetEstimate";
		EntrBdgtSave = "";
		Day1 = "True";
		AssistantSelection= "WithoutAssistant";
		
		
		pr.Resultsfolderpath = Resultsfolderpath;
		LOGS.info("REsults Folder Path in Main: "+Resultsfolderpath);
		LOGS.info("REsults Folder Path in Main: "+pr.Resultsfolderpath);
		
		if(PlanName[0].trim().contains("LR"))
		{
			PlanName[0] = PlanName[0].replace(" + LR", "");
			LRSelection = "WithLRBudgetEstimate";
			EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
			LOGS.info(Thread.currentThread() +"User selected Product after removing the LR from the plan name: "+PlanName[0]);
			LOGS.info(Thread.currentThread() +"Product should go with LR Budget Estimate");
			
		}
		if(PlanName[0].trim().contains("Ast"))
	     {
			PlanName[0] = PlanName[0].replace(" + Ast", "");
	        AssistantSelection = "WithAssistant";
	        EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
	        LOGS.info(Thread.currentThread() +"User selected Product plan name: "+PlanName[0]);
	        LOGS.info(Thread.currentThread() +"Product should go with Assistant addon");
	     }
		else if (ProductName[0].equalsIgnoreCase("Online Foundation Solutions")
				||ProductName[0].equalsIgnoreCase("Smart Synchronized Solutions")
				||ProductName[0].equalsIgnoreCase("Synchronized Marketing Solutions")
				||ProductName[0].equalsIgnoreCase("Smart Presence Solutions"))

		{
			EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
		}
		
		LOGS.info(Thread.currentThread() +"LR Value: "+LRSelection);
		LOGS.info(Thread.currentThread() +"LR Budget Value: "+EntrBdgtSave);
		LOGS.info(Thread.currentThread() +"Assistant Value: "+AssistantSelection);
		
		currentPlan="";
		businessID = "";
		BusinessNameQuoteDetls = "";
		currentPlan = ProductName[0];
		LOGS.info(Thread.currentThread() +"Current Plan Name in Main Method: "+currentPlan);
		LOGS.info(Thread.currentThread() +"Login Sales Rep -> "+SalesRepType);
		Amounts = pr.loadPropertiesFiles("Amounts");
		try {
			count =0;
			plansCount = PlanName.length;
			LOGS.info(Thread.currentThread() +","+plansCount);
			if ((Stage.contains("Quote")) || (Stage.contains("Signature")) || (Stage.contains("Consultation"))
					|| (Stage.contains("Cancel")) || (Stage.contains("Payment")) || (Stage.contains("Submit"))
					|| (Stage.contains("Amend"))) {
				try {

					Properties OR = pr.loadPropertiesFiles("Order");
					
					/*if (SalesRepType.equalsIgnoreCase("Marketing")) {
						SalesRep = OR.getProperty("Marketing");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}
					else*/ if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						//SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						//if(repName.trim().contains("Janelle")) {
							//LOGS.info(Thread.currentThread() +"My Name is: "+repName);
							
						SFLoginResult = SalesforceLogin("janelle.whinery@hibu.com.full01", "Summer01");
						
						LOGS.info(Thread.currentThread() +"Salesforce Login Result -> " +SFLoginResult );
						//}
						
						/*if(repName.trim().equalsIgnoreCase("Jenny")) {
							LOGS.info(Thread.currentThread() +"My Name is: "+repName);
							SFLoginResult = SalesforceLogin("jenny.jackson@hibu.com.full01", "Lose2020!@");
							LOGS.info(Thread.currentThread() +"Salesforce Login Result -> " +SFLoginResult );
							}*/
						
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} /*else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswdSPE");

					} else if (SalesRepType.equalsIgnoreCase("CSRep")) {
						SalesRep = OR.getProperty("CSRep");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("MarketingUser")) {
						SalesRep = OR.getProperty("MarketingUser");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("DSCRep")) {
						SalesRep = OR.getProperty("DSCRep");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("NonCpqTsale")) {
						SFLoginResult = SalesforceLogin("tSalesRepUserName", "tSalesRepPassWord");
					} else if (SalesRepType.equalsIgnoreCase("NonCpqPremiseRep")) {
						SFLoginResult = SalesforceLogin("PremiseRepUserName", "PremiseRepPassWord");
					} else if (SalesRepType.equalsIgnoreCase("CSRep")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNaoice" + "me", "sfAdminPswd", CSRep);
					}*/ else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
						SalesRep = OR.getProperty("OpsWizard");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}/* else if (SalesRepType.equalsIgnoreCase("Admin")) {
						
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd");
					} else if (SalesRepType.equalsIgnoreCase("TSalesVoiceVerify")) {
						SalesRep = OR.getProperty("TSalesVoiceVerify");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}*/ else {
						LOGS.info(Thread.currentThread() +"Select the proper Rep name. Current Sales Rep is :" + SalesRepType);
						count = count + 1;
					}

					if ((SFLoginResult.equalsIgnoreCase("Fail")) || (SFLoginResult.equalsIgnoreCase("False"))) {
						Status = "Fail";
						//org.testng.Assert.fail("SF Login Failed");
						LOGS.info(Thread.currentThread() +"Error in SF Login");
						count = count + 1;
						//driver.quit();
					}
				} catch (Exception e) {
					LOGS.error("Error : "+ Thread.currentThread() +" : " +e);
					ExceptionMsg= "Error in SalesRep Selection";
					LOGS.info(Thread.currentThread() + "," +"Error in SalesRep Selection - " + e.getMessage());
					System.out.println("Error in SalesRep Selection - " + e.getMessage());
					
					count = count + 1;
					//driver.quit();
				}
				
				if (count == 0) {

					try {
						LOGS.info(Thread.currentThread() +"in try mode");
						if ((AccountType.equalsIgnoreCase("Prospect")) || AccountType.equalsIgnoreCase("ExistingCPQ")) {
							if (BillFulfill.equalsIgnoreCase("True")) {
								LOGS.info(Thread.currentThread() +"Initiating BillOrFulfilcheck method");
								BillOrFulfilCheck(ProductName, PlanName, Others);
								LOGS.info(Thread.currentThread() +"BillOrFulfilcheck method execution completed");
							}
							OpportunityResults = searchAccount(AccountType, "ListingCategory", OpportunityType);
							Thread.sleep(1000);
							if (OpportunityStage.equalsIgnoreCase("Closed Won")) {
								OpportunityResults = "Pass";
								count = count + 1;
								//driver.quit();
							}
							if (OpportunityResults.equalsIgnoreCase("Fail")) {
								Status = "Fail";
								//org.testng.Assert.fail("Search Account Failed");
								LOGS.info(Thread.currentThread() +"Error in Search Account");
								count = count + 1;
								//driver.quit();
							}
						} else if (AccountType.equalsIgnoreCase("Live")) {
							SearchActiveAccountResults = SearchActiveAccount();
							if (SearchActiveAccountResults.equalsIgnoreCase("Fail")) {
								Status = "Fail";
								//org.testng.Assert.fail("SearchActiveAccountResults Account Failed");
								LOGS.info(Thread.currentThread() +"Error in SearchActiveAccountResults");
								count = count + 1;
								//driver.quit();

							}

						} else if (AccountType.equalsIgnoreCase("LeadConvert")) {

							LOGS.info(Thread.currentThread() + "," +"inside Lead Convert ");
							
							OpportunityResults = LeadConvert();
							if(OpportunityResults.equalsIgnoreCase("lr"))
							{
								ExceptionMsg= "Exception Happened In LR Budget Tool";
								Status = "Fail";
								
								LOGS.info(Thread.currentThread() + "," +"Error in LR Budget Tool");
								count = count + 1;
							}
							else if (OpportunityResults.equalsIgnoreCase("Fail")) {
							/*if(driver==null)
							{
							ExceptionMsg= "Exception Happened In edit Account";
							Status = "Fail";
							
							LOGS.info(Thread.currentThread() + "," +"Error in EditAccount");
							count = count + 1;
							}
							else
							{*/
								ExceptionMsg= "Exception Happened In Lead Page";
								Status = "Fail";
								
								LOGS.info(Thread.currentThread() + "," +"Error in LeadConvert");
								count = count + 1;
							//}
						} else if(OpportunityResults.equalsIgnoreCase("opportunity"))
						{
							ExceptionMsg= "Exception Happened In opportunity Page";
							Status = "Fail";
							LOGS.info(Thread.currentThread() + "," +"Error in opportunity");
							count = count + 1;
						}else if(OpportunityResults.equalsIgnoreCase("order"))
						{
							ExceptionMsg= "Exception Happened In placing order";
							Status = "Fail";
							LOGS.info(Thread.currentThread() + "," +"Error in placing order");
							count = count + 1;
						}
						else if(OpportunityResults.equalsIgnoreCase("edit")) {
							ExceptionMsg= "Exception Happened In editing the account info";
							Status = "Fail";
							LOGS.info(Thread.currentThread() + "," +"Error in editing account info");
							count = count + 1;
						}
							//Thread.sleep(1000);
							
							
						}

						else if (AccountType.equalsIgnoreCase("YextLeadConvert")) {


							LOGS.info(Thread.currentThread() +"inside Yext Lead Convert ");
							OpportunityResults = YextLeadConvert();
							Thread.sleep(1000);
												
						}
						
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"In catch mode");
						LOGS.error("Error : "+Thread.currentThread() +";"+ e);
						ExceptionMsg= "Error occured in LeadConvert Method";
						LOGS.info(Thread.currentThread() + "," +"Error occured in LeadConvert Method - " + e.getMessage());
						count = count + 1;
						
					}

					if (count == 0) {

						try {
							/*if (PlaceOrderValidation.equalsIgnoreCase("True")) {
								OrderPlacementResult = ValidateOrderPlacement(OpportunityType);
								if (OrderPlacementResult.equalsIgnoreCase("Fail")) {
									Status = "Fail";
									//org.testng.Assert.fail("Create Quote Failed");
									LOGS.info(Thread.currentThread() +"Error in Create Quote");
									count = count + 1;
									// }

								} else {
									LOGS.info(Thread.currentThread() +"Executed till Create Quote");
									LOGS.info(Thread.currentThread() +"Create Quote is completed");
									count = count + 1;
									//driver.quit();
								}

							}*/
							

								// CreateQuote(SelectProduct, SelectPlan);
								if (Productcancellation.equalsIgnoreCase("True")) {
									CancelProduct(ProductName, PlanName);
								} else {

									String addProductResult = CreateQuote(ProductName, PlanName);
									
									if(addProductResult.equalsIgnoreCase("Fail")) {
										ExceptionMsg = "Exception Happened While Adding the products in Quote";
										LOGS.info(Thread.currentThread() + "," +"Error While Adding the products in Quote");
										
										count= count+1;
									}
								}
								/*if (ValidateQuoteFlag.equalsIgnoreCase("True")) {
									ValidateQuoteResult = ValidateQuote();
									if (ValidateQuoteResult.equalsIgnoreCase("Fail")) {
										Status = "Fail";
										JiraStatus = "Failed";
										//org.testng.Assert.fail("Create Quote Failed");
										LOGS.info(Thread.currentThread() +"Error in Create Quote");
										
										 * count = count + 1; driver.quit();
										 
									}

								}
								if (OpportunityValidation.equalsIgnoreCase("True")) {
									OpportunityValidationResult = ValidateOpportunity(ProductName, PlanName);
									if (OpportunityValidationResult.equalsIgnoreCase("Fail")) {
										Status = "Fail";
										JiraStatus = "Failed";
										//org.testng.Assert.fail("OpportunityValidation Failed");
										LOGS.info(Thread.currentThread() +"Error in Create Quote");
										count = count + 1;
										//driver.quit();
									}

								}*/
								LOGS.info(Thread.currentThread() +"Executed till Create Quote");
								LOGS.info(Thread.currentThread() +"Create Quote is completed");
								/*
								 * else { LOGS.info(Thread.currentThread() + "Executed till Create Quote"); LOGS.info(Thread.currentThread() +
								 * "Create Quote is completed"); count = count+1; driver.quit(); }
								 */
							
						} catch (Exception e) {
							LOGS.error("Error : "+Thread.currentThread() +";"+ e);
							ExceptionMsg= "Exception Happened In Create Quote Method";
							LOGS.info(Thread.currentThread() + "," +"Error in ValidateQuote - " + e.getMessage());
							count = count + 1;
							//driver.quit();
						}

						if (count == 0) {
							/*try {
								
								if (ContractDetailsValidtion.equalsIgnoreCase("True")) {
									ContractDetailsResult = ValidateContract(ProductName, PlanName);
									if (ContractDetailsResult.equalsIgnoreCase("Fail")) {
										Status = "Fail";
										//org.testng.Assert.fail("ContractDetailsValidtion Failed");
										LOGS.info(Thread.currentThread() +"Error in Create Quote");
										count = count + 1;
										//driver.quit();
									}

								}
								
								} catch (Exception e) {
									 System.out.println("Error in GenerateDocument - " + e.getMessage());
									 LOGS.info(Thread.currentThread() +"Error in GenerateDocument - " + e.getMessage());
									 count = count + 1;
									// driver.quit();
								 }*/

							if (count == 0) {
								try {
									if (!Stage.contains("Document")) {

										if (SignType.equalsIgnoreCase("")) {
											if ((SalesRepType.equalsIgnoreCase("TSales"))
													|| (SalesRepType.equalsIgnoreCase("CSRep"))
													|| (SalesRepType.equalsIgnoreCase("DSCRep")) 
													|| (SalesRepType.equalsIgnoreCase("OpsWizard")))
												SignType = "Voice Verify";
											else if ((SalesRepType.equalsIgnoreCase("Premise"))
													|| (SalesRepType.equalsIgnoreCase("SPE")))
												SignType = "Digital Signature";
										} else
											LOGS.info(Thread.currentThread() +"Requested Signature Type: " + SignType);

										/*if (CaptureSignatureValidation.equalsIgnoreCase("True")) {

											Capture_MITotal_Quoteline = SLocator("Capture_MITotal_Quoteline").getText();
											LOGS.info(Thread.currentThread() +Capture_MITotal_Quoteline);

											CaptureMITax_Quoteline = SLocator("CaptureMITax_Quoteline").getText();
											LOGS.info(Thread.currentThread() +CaptureMITax_Quoteline);

											float mitotalPLUSmitax = Float
													.parseFloat(Capture_MITotal_Quoteline.replace("$", ""))
													+ Float.parseFloat(CaptureMITax_Quoteline.replace("$", ""));

											mitotalPLUSmitaxcomp = "$" + String.valueOf(mitotalPLUSmitax);

											LOGS.info(Thread.currentThread() +"Monthly Investment Total+Monthly Investment Tax: "
													+ mitotalPLUSmitaxcomp);

											CaptureOTFValue_Quteline = SLocator("CaptureOTFValue_Quteline").getText();
											LOGS.info(Thread.currentThread() +CaptureOTFValue_Quteline);

											CaptureOTFTax_Quteline = SLocator("CaptureOTFTax_Quteline").getText();
											LOGS.info(Thread.currentThread() +CaptureOTFTax_Quteline);

											float OTFtotalPLUSOTFtax = Float
													.parseFloat(CaptureOTFValue_Quteline.replace("$", ""))
													+ Float.parseFloat(CaptureOTFTax_Quteline.replace("$", ""));

											OTFtotalPLUSOTFtaxcomp = "$" + String.valueOf(OTFtotalPLUSOTFtax);

											LOGS.info(Thread.currentThread() +"One Time Fees + One Time Fee Tax: " + OTFtotalPLUSOTFtaxcomp);

										}*/

										
										captSignResult = capture_signature(SignType);
										if (captSignResult.equalsIgnoreCase("Fail")) {
											Status = "Fail";
											ExceptionMsg= "Exception Happened While Capturing the Signature";
											LOGS.info(Thread.currentThread() + "," +"Error in Capture Signature");
											count = count + 1;
											
										}
									} else {
										LOGS.info(Thread.currentThread() +"Generate Document is completed");
										count = count + 1;
										
									}
								} catch (Exception e) {
									ExceptionMsg= "Exception Happened While Capturing the Signature";
									LOGS.info(Thread.currentThread() + "," +"Error in Capture Signature");
									LOGS.error("Error in Capture Signature - " + e.getMessage());
									count = count + 1;
									
								}

								if (count == 0) {
									try {
										if (!Stage.contains("Signature")) {
											PaymentResult = PaymentProcess();
											LOGS.info(Thread.currentThread() +"Payment process completed");
											if (PaymentResult.equalsIgnoreCase("Fail")) {
												Status = "Fail";
												ExceptionMsg= "Exception Happened While Processing the Payment";
												LOGS.info(Thread.currentThread() + "," +"Error in Payment Process");
												count = count + 1;
												
											}

										} else {
											LOGS.info(Thread.currentThread() +"Capture Signature is completed");
											count = count + 1;
											
										}
									} catch (Exception e) {
										Status = "Fail";
										ExceptionMsg= "Exception Happened While Processing the Payment";
										LOGS.info(Thread.currentThread() + "," +"Error in Payment Process");
										LOGS.info(Thread.currentThread() +"Error in Payment - " + e.getMessage());
										count = count + 1;
										
									}
								}

								/*if (count == 0) {
									if (SecondLoginRep.equalsIgnoreCase("TSalesVoiceVerify")) {
										secondRepProcessVV();

									}
								}*/
								if (count == 0) {
									try {
										if (!Stage.contains("Payment")) {
											SelConsultResult = SelectConsultation(SelectConsultation);
											if (SelConsultResult.equalsIgnoreCase("Fail")) {
												Status = "Fail";
												ExceptionMsg = "Exception Happened While Selecting the Consultation Type";
												
												LOGS.info(Thread.currentThread() + "," +"Error in Select Consultation");
												count = count + 1;
											}
										} else {
											LOGS.info(Thread.currentThread() + "," +"Payment Process is completed");
											count = count + 1;
											
										}
									} catch (Exception e) {
										LOGS.error("Error : "+Thread.currentThread() +";"+ e);
										ExceptionMsg = "Exception Happened While Selecting the Consultation Type";
										LOGS.info(Thread.currentThread() + "," +"Error in Select Consultation - " + e.getMessage());
										count = count + 1;
										
									}
								}
								if (count == 0) {
									try {
										if (!Stage.contains("Consultation")) {

											GenerateDocumentResult = GenerateDocument(GenerateDocument);
											if (GenerateDocumentResult.equalsIgnoreCase("Fail")) {
												Status = "Fail";
												ExceptionMsg= "Exception Happened In Genarate document Method Before Submit";
												
												LOGS.info(Thread.currentThread() + "," +"Error in Generate Document");
												count = count + 1;
												
											} else {
												SubmitFinalPageRslt = submitFinalPage();
												
												if (SubmitFinalPageRslt.equalsIgnoreCase("Fail")) {
													Status = "Fail";
													ExceptionMsg = "Exception Happened While Submitting the Quote";
													LOGS.info(Thread.currentThread() + "," +"Error in Submit Quote Method");
													count = count + 1;
												}
												
											}
											count = count + 1;
										} else {
											LOGS.info(Thread.currentThread() + "," +"Select Consultation is completed");
											count = count + 1;
											
										}
									} catch (Exception e) {
										LOGS.error("Error : "+Thread.currentThread() +";"+ e);
										ExceptionMsg= "Exception happened before submitting the Quote";
										LOGS.info(Thread.currentThread() + "," +"Exception happened before submitting the Quote - " + e.getMessage());
										count = count + 1;
										
									}
								}
								/*if (count == 0) {
									try {
										if (!Stage.contains("Submit")) {
											CancelproductRes = CancelProduct(ProductName, PlanName);
											if (CancelproductRes.equalsIgnoreCase("Fail")) {
												Status = "Fail";
												//org.testng.Assert.fail("Cancel product Failed");
												LOGS.info(Thread.currentThread() +"Error in Cancel product");
												count = count + 1;
												//driver.quit();
											}
										} else {
											LOGS.info(Thread.currentThread() +"Submit Quote Process completed");
											count = count + 1;
											//driver.quit();
										}
									} catch (Exception e) {
										System.out.println("Error in Cancelproduct - " + e.getMessage());
										LOGS.info(Thread.currentThread() +"Error in Cancelproduct - " + e.getMessage());
										count = count + 1;
										//driver.quit();
									}
								}*/

							}
						}
					}
				}
			} else
				LOGS.info(Thread.currentThread() +"Enter the Valid Stage Name");

		} catch (Exception e) {
			LOGS.error("Error : "+Thread.currentThread() +";"+ e);
			ResultStatus = "Fail";
			ExceptionMsg = "Exception Happened In Main Method";
			LOGS.info(Thread.currentThread() + "," +"Exception Happened In Main Method - " + e.getMessage());
			count = count + 1;

		}
		return ResultStatus;
	}

	public  String CaptureFinalPriceDetails() {
		LOGS.info(Thread.currentThread() +"CaptureFinalPriceDetails method started");
		String resultFinalPrice = "Pass";
		try {

			TotalFinalOTFPrice = SLocator("TotalOTFFinalEditQuote").getText();
			LOGS.info(Thread.currentThread() +"Total OTF :" + TotalFinalOTFPrice);

			TotalFinalMITPrice = SLocator("TotalMITFinalEditQuote").getText();
			LOGS.info(Thread.currentThread() +"Total MIT :" + TotalFinalMITPrice);

			List<WebElement> TotalFinalTaxPriceele = driver.findElements(By
					.xpath("(//div[@id='datatable']//child::sb-le-summary-row//div[@class='style-scope sb-div'])[3]"));

			if (TotalFinalTaxPriceele.size() == 1) {
				TotalFinalTaxPrice = SLocator("TotalTaxFinalEditQuote").getText();
				LOGS.info(Thread.currentThread() +"Total Tax :" + TotalFinalTaxPrice);
			}

		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"Error in CaptureFinalPriceDetails Method");
			e.printStackTrace();
			resultFinalPrice = "Fail";
		}
		return resultFinalPrice;
	}

	public  String CPQFeatureField() {
		LOGS.info(Thread.currentThread() +"CPQFeatureField method started");
		String resultFieldVerify = "Pass";

		try {
			Properties OR = pr.loadPropertiesFiles("Order");

			if (SalesRepType.equalsIgnoreCase("MarketingUser")) {
				SalesRep = OR.getProperty("MarketingUser");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("Premise")) {
				SalesRep = OR.getProperty("Premise");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("SPE")) {
				SalesRep = OR.getProperty("sfAdminUserNameSPE");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultFieldVerify;
	}

	public int SFAttributeLinksCount(String LinkName) {
		// TODO Auto-generated method stub
		int OptCount = 0;
		try {
			LOGS.info(Thread.currentThread() +"Attribute:" + LinkName);
			String AttributeLinkPath = "//div[@class='listHoverLinks']/a/span[contains(text(),'" + LinkName + "')]";
			String OptionCount = driver.findElement(By.xpath(AttributeLinkPath)).getText();
			// String OptionCount = SLocator("OptionCountText").getText();
			LOGS.info(Thread.currentThread() +OptionCount);
			OptionCount = OptionCount.replace("Options[", "");
			OptionCount = OptionCount.replace("]", "");
			LOGS.info(Thread.currentThread() +OptionCount);
			OptCount = Integer.parseInt(OptionCount);

			if (OptCount > 0) {
				ActRes = "Options available for the Selected Product & Count is " + OptCount;
				Status = "Pass";
			} else {
				ActRes = "There is no options for the Selected Product";
				Status = "Fail";
				FinalStatus = "Fail";
			}

			ExpRes = "Options Verification for the Selected Product";
			ExportResults
			.exportTestResult("SF-Options Status," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"SF-Options Status," + ExpRes + "," + ActRes + "," + Status);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in SFAttributeLinksCount");
			Status = "Fail";
			OptCount = 0;

			return OptCount;
		}
		return OptCount;
	}

	public  String Submit_quote() {
		// TODO Auto-generated method stub
		try {
			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);
			if (OrderStageQuoteDetls.equalsIgnoreCase("Submit Quote")) {
				ExpRes = "Order Stage Status in Quote detail page should be 'Select Consultation' ";
				ActRes = "Order Stage Status in Quote detail page is 'Select Consultation' ";
				ImageName = "Order Stage Status in Quote detail page";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Select Consultation:Order Stage Status :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);

				SLocator("SubmitQteBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on SubmitQteBtn button");
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			}

			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			LOGS.info(Thread.currentThread() +"Order Stage Status in Quote detail page :" + OrderStageQuoteDetls);

			if (OrderStageQuoteDetls.equalsIgnoreCase("Submitted")) {
				ExpRes = "Order Stage Status in Quote detail page should be 'Select Consultation' ";
				ActRes = "Order Stage Status in Quote detail page is 'Select Consultation' ";
				ImageName = "Order Stage Status in Quote detail page";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Select Consultation:Order Stage Status :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);

			}

			return "Pass";
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return "Fail";
		}

	}

	public void SFInspectorPI(String FilterPhrase) throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"SF Inspector Plugin Method execution started");

			driver.manage().window().maximize();
			LOGS.info(Thread.currentThread() +"Window Maximized");
			
			
			String SFinspectorURL="";
			String[] RecordIdNameid ;
			if(FilterPhrase.equalsIgnoreCase("Billing_Anniversary_Day")){
				SFinspectorURL = "chrome-extension://aodjmnfhjibkcdimpodiifdjnnncaafh/inspect.html?host=hibu--full01.cs54.my.salesforce.com&objectType=Contract&recordId=";
				String RecordIdName=driver.getCurrentUrl();
				LOGS.info(Thread.currentThread() +"Current Url: "+ RecordIdName);
				RecordIdNameid = RecordIdName.split(".com/");
				driver.navigate().to(SFinspectorURL + RecordIdNameid[1]);
			} else {
				SFinspectorURL = "chrome-extension://aodjmnfhjibkcdimpodiifdjnnncaafh/inspect.html?host=hibu--full01.cs54.my.salesforce.com&objectType=SBQQ__Subscription__c&recordId=";
				String RecordIdName = driver.findElement(By.xpath("//h3[text()='Content']")).getAttribute("id");
				// LOGS.info(Thread.currentThread() +"SF Inspector Plugin: "+ RecordIdName);
				RecordIdNameid = RecordIdName.split("_");
				// LOGS.info(Thread.currentThread() +"SF Inspector Plugin RecordIdNameid: "+ // RecordIdNameid[0]);
				driver.navigate().to(SFinspectorURL + RecordIdNameid[0]);
			}
			
			Thread.sleep(5000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(5000);
			
			driver.findElement(By.xpath("//input[@placeholder='Filter']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on filter text field");
			driver.findElement(By.xpath("//input[@placeholder='Filter']")).sendKeys(FilterPhrase);
			LOGS.info(Thread.currentThread() +"Typed " + FilterPhrase + " in the filter text field");
			

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public  void SubscriptionCount() throws Exception {
		try {

			LOGS.info(Thread.currentThread() +"Subscription Count field verification method started");
			LOGS.info(Thread.currentThread() +"Navigating to Cases Page ");
			WebElement CasesTab = driver.findElement(By.cssSelector("#Case_Tab>a"));
			JavascriptExecutor jsAT = (JavascriptExecutor) driver;
			jsAT.executeScript("arguments[0].click();", CasesTab);
			LOGS.info(Thread.currentThread() +"Navigated to Cases tab");
			Select Viewdropdown = new Select(driver.findElement(By.xpath("//Select[contains(@id,'fcf')]")));
			viewName = "Priyanka_MarioPremise";
			if (Viewdropdown.getFirstSelectedOption().getText().equalsIgnoreCase(viewName)) {
				LOGS.info(Thread.currentThread() +"View Already Selected" + viewName);
				driver.findElement(By.xpath("//input[@name='go']")).click();
				LOGS.info(Thread.currentThread() +"Go Button CLicked");

			} else {
				Viewdropdown.selectByVisibleText(viewName);
				LOGS.info(Thread.currentThread() +"View " + viewName + " is selected");
			}
			driver.findElement(By.xpath("(//a[contains(text(),'00')])[1]")).click();
			LOGS.info(Thread.currentThread() +"Clicked on first case number");
			String CaseURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Captured case URL: " + CaseURL);
			if (SFPIParam.equalsIgnoreCase("Subscription")) {
				LOGS.info(Thread.currentThread() +"Calling SFInspectorPI method");
				SFInspectorPI("Subscription");
				LOGS.info(Thread.currentThread() +"SFInspectorPI method execution completed");
				String SubsCountVal = driver
						.findElement(By.xpath(
								"//tr[contains(@title,'Subscription')]/td/div[contains(@class,'value-is-number')]"))
						.getText();
				ImageName = "SubCount";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				SCVal = Integer.parseInt(SubsCountVal);
				LOGS.info(Thread.currentThread() +"Value after converting to integer: " + SCVal);

			}

			driver.get(CaseURL);
			LOGS.info(Thread.currentThread() +"Navigated back to Case detail page");
			driver.findElement(By.xpath("//span[text()='Details']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Details tab of case page");
			driver.findElement(By.xpath("//td[text()='Company Name']//following-sibling::td/div/a")).click();
			LOGS.info(Thread.currentThread() +"Clicked on company name link");
			driver.findElement(By.xpath("//span[text()='Details']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Details tab of Account page");
			List<WebElement> link = driver.findElements(By.xpath(
					"//h3[text()='Live Subscriptions']/ancestor::div/following-sibling::div/child::div/a[contains(text(),'Go to')]"));
			if (link.size() == 1) {
				LOGS.info(Thread.currentThread() +"Go To list link is displayed");
				driver.findElement(By.xpath(
						"//h3[text()='Live Subscriptions']/ancestor::div/following-sibling::div/child::div/a[contains(text(),'Go to')]"))
				.click();
				LOGS.info(Thread.currentThread() +"Clicked on Go To List link on Live Subscriptions section");
				List<WebElement> LivSubs = driver.findElements(By.xpath("//div[@class='pbBody']/table/tbody/tr"));
				LivSubsCount = LivSubs.size() - 1;
				LOGS.info(Thread.currentThread() +"Live Subscription count is: " + LivSubsCount);
			} else {
				List<WebElement> LivSubs = driver.findElements(By.xpath(
						"//h3[text()='Live Subscriptions']/parent::td//ancestor::div[@class='pbHeader']//following-sibling::div//child::tr"));
				LivSubsCount = LivSubs.size() - 1;
				LOGS.info(Thread.currentThread() +"Live Subscription count is: " + LivSubsCount);
			}
			ExpRes = "No. of Live Subscriptions for the account should match the value of Subscription count field";
			if (SCVal == LivSubsCount) {
				LOGS.info(Thread.currentThread() +"Number of live subscriptions and subscription count matches");
				ActRes = "No. of Live Subscriptions for the account: " + LivSubsCount
						+ " Value of Subscription count field: " + SCVal;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Subscription Count field validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Number of live subscriptions and subscription count does not match");
				ActRes = "No. of Live Subscriptions for the account: " + LivSubsCount
						+ " Value of Subscription count field: " + SCVal;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Subscription Count field validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +"There is some error validating subscription count field");
		}

	}

	// ------------------------------------------------------------
	public  String SearchActiveAccount() throws Exception {
		try {

			LOGS.info(Thread.currentThread() +"SearchActiveAccount  method started");
			LOGS.info(Thread.currentThread() +"Navigating to Cases Page ");
			WebElement CasesTab = driver.findElement(By.cssSelector("#Case_Tab>a"));
			JavascriptExecutor jsAT = (JavascriptExecutor) driver;
			jsAT.executeScript("arguments[0].click();", CasesTab);
			LOGS.info(Thread.currentThread() +"Navigated to Cases tab");
			Select Viewdropdown = new Select(driver.findElement(By.xpath("//Select[contains(@id,'fcf')]")));
			viewName = "Priyanka_MarioPremise";
			if (Viewdropdown.getFirstSelectedOption().getText().equalsIgnoreCase(viewName)) {
				LOGS.info(Thread.currentThread() +"View Already Selected" + viewName);
				driver.findElement(By.xpath("//input[@name='go']")).click();
				LOGS.info(Thread.currentThread() +"Go Button CLicked");

			} else {
				Viewdropdown.selectByVisibleText(viewName);
				LOGS.info(Thread.currentThread() +"View " + viewName + " is selected");
			}
			// -------------------------------Search new
			// case--------------------------------------
			int i, j;
			for (i = 1, j = 1; i <= 50; i++, j++) {

				String Xpath = "(//a[contains(text(),'00')])[" + j + "]";
				if (driver.findElement(By.xpath(Xpath)).isDisplayed()) {
					LOGS.info(Thread.currentThread() +"Case list found " + i + ":" + j);
					String caseStatus = driver.findElement(By.xpath("(//a[contains(text(),'00')])[" + j
							+ "]//ancestor::td[1]//parent::tr//child::td[7]//child::div")).getText();
					LOGS.info(Thread.currentThread() +"caseStatus on case number is :" + caseStatus);
					if (caseStatus.contains("New")) {
						driver.findElement(By.xpath("(//a[contains(text(),'00')])[" + j + "]")).click();
						LOGS.info(Thread.currentThread() +"Clicked on first case number");
						i = 55;
					} else {
						LOGS.info(Thread.currentThread() +"Data not found");

					}

				}
			}
			String CaseURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Captured case URL: " + CaseURL);

			// -----------------------------------------------------
			driver.findElement(By.xpath("//span[text()='Details']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Details tab of case page");
			driver.findElement(By.xpath("//td[text()='Company Name']//following-sibling::td/div/a")).click();
			LOGS.info(Thread.currentThread() +"Clicked on company name link");
			AccURL = driver.getCurrentUrl();
			LOGS.info(Thread.currentThread() +"Account URL is: " + AccURL);
			/*
			 * if(driver.findElement(By.xpath("//span[text()='Details']")).isDisplayed()){
			 * driver.findElement(By.xpath("//span[text()='Details']")).click();
			 * LOGS.info(Thread.currentThread() +"Clicked on Details tab of Account page");
			 * 
			 * }
			 */
			if (SFPIParam.equalsIgnoreCase("True")) {
				LOGS.info(Thread.currentThread() +"Calling SFInspectorPI method");
				SFInspectorPI("has valid registration");
				LOGS.info(Thread.currentThread() +"SFInspectorPI method execution completed");
				Thread.sleep(4000);
				SLocator("editBtnSfInp").click();

				LOGS.info(Thread.currentThread() +"clicked on edit btn in SF inspector");

				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(4000);

				SLocator("hasValidRegbool").clear();
				Thread.sleep(4000);
				SLocator("hasValidRegbool").sendKeys("true");

				LOGS.info(Thread.currentThread() +"hasValidRegbool in SF inspector");
				Thread.sleep(4000);
				SLocator("saveBtnSfInp").click();
				LOGS.info(Thread.currentThread() +"Save clicked in SF inspector");

			}
			driver.get(CaseURL);
			LOGS.info(Thread.currentThread() +"Navigated back to Case detail page");
			driver.findElement(By.xpath("//span[text()='Details']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Details tab of case page");
			driver.findElement(By.xpath("//td[text()='Company Name']//following-sibling::td/div/a")).click();
			LOGS.info(Thread.currentThread() +"Clicked on company name link");
			/*
			 * driver.findElement(By.xpath("//span[text()='Details']")).click();
			 * LOGS.info(Thread.currentThread() +"Clicked on Details tab of Account page");
			 */
			if (CreateOppertunity.equalsIgnoreCase("True")) {

				driver.findElement(By.xpath("(//span[contains(text(),'Opportunities')])[1]")).click();
				LOGS.info(Thread.currentThread() +"Clicked on Opportunities Link");
				Thread.sleep(1000);
				if (!SalesRepType.equalsIgnoreCase("CSRep")) {
					driver.findElement(By.xpath("(//tr/td[2]/input[@name='new_opportunity_a'])")).click();
				} else {
					driver.findElement(By.xpath("(//tr/td[2]/input[@value='New Opportunity'])")).click();
				}
				Thread.sleep(3000);
				createOpportunity("SingleOpportunity");
			}
			searchAccountResult = "Pass";
		} catch (Exception e) {
			e.printStackTrace();
			JiraStatus = "Failed";
			LOGS.info(Thread.currentThread() +"There is some error validating subscription count field");
			searchAccountResult = "Fail";
		}
		return searchAccountResult;

	}
	// --------------------------------------

	public  void AddPackageDetails(String[] Prods, String[] Plans) throws Exception {
		try {
			int i, j;
			LOGS.info(Thread.currentThread() +"AddPackageDetails method started");
			try {
				LOGS.info("In Try Block..Waiting for Page to load Completely");
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
			WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
			wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
		
		}catch(Exception ex) {
			LOGS.info("Wait is over and the Pocess continues.");
			}

			for (i = 0; i < Prods.length; i++) {
				if (Prods[i].equalsIgnoreCase(OR.getProperty("16")) || Prods[i].equalsIgnoreCase(OR.getProperty("17"))
						|| Prods[i].equalsIgnoreCase(OR.getProperty("18"))) {
					//Thread.sleep(5000);
					driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);

					for (j = 0; j < Plans.length; j++) {
						if (Plans[j].equalsIgnoreCase("Standard Website")) {
							
							List<WebElement> CheckedStd = driver.findElements(By.xpath(
									"//span[text()='Standard Website']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']//descendant::div[contains(@class,'checked')]"));
							if (CheckedStd.size() == 1) {
								LOGS.info(Thread.currentThread() +"Standard Website is already selected");
								wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
								SLocator("Save").click();
								
								LOGS.info(Thread.currentThread() +"Clicked on Save button");
							} else {
								SLocator("CheckedProWeb").click();
								LOGS.info(Thread.currentThread() +"Checked Pro website to unselect it");
								SLocator("CheckStdWeb").click();
								LOGS.info(Thread.currentThread() +"Checked the checkbox of Standard website");
								// SLocator("Save").click();
								// LOGS.info(Thread.currentThread() +"Clicked on Save after selecting website plan");
							}
						}
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked on Save after selecting website plan");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						//Thread.sleep(3000);
					}

					if (Prods[i].equalsIgnoreCase(OR.getProperty("18"))) {
						//Thread.sleep(3000);
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked on Save button on configure products page - website page");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						//Thread.sleep(5000);

						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked on Save button on Configure Products page - Presence complete page");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						//Thread.sleep(6000);

						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked on Save button on Configure Products page - Presence complete quote page");
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						//Thread.sleep(6000);
					}
				}

				if (Prods[i].equalsIgnoreCase(OR.getProperty("16")) 
						|| Prods[i].equalsIgnoreCase(OR.getProperty("17"))
						|| Prods[i].contains("Social")
						|| Prods[i].equalsIgnoreCase("Presence + Mobile"))
				{
					LOGS.info(Thread.currentThread() +"Plans.length: " + Plans.length);

					for (j = 0; j < Plans.length; j++) {
						LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
						LOGS.info(Thread.currentThread() +Plans[j]);
						// LOGS.info(Thread.currentThread() +"Plans Value of j: "+j);
						//Thread.sleep(3000);
					EnterBudget(Prods[i], Plans[j]);
					}

					if (!Prods[i].equalsIgnoreCase("Presence + Mobile")) {
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						SLocator("Save").click();
						
						LOGS.info(Thread.currentThread() +"Clicked Save button after entering budget");
					}
				}



				//--------------------------------------------------


				else if (Prods[i].equalsIgnoreCase("Online Foundation Solutions")
						||Prods[i].equalsIgnoreCase("Smart Synchronized Solutions")
						||Prods[i].equalsIgnoreCase("Synchronized Marketing Solutions")
						||Prods[i].equalsIgnoreCase("Smart Presence Solutions"))

				{
					LOGS.info(Thread.currentThread() +"Plan that i will be selecting " + Plans[0]);
					/*wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2")));
					wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2"))).click();*/
					//SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2").click();
					
					LOGS.info(Thread.currentThread() +"Selected the plan: " + Plans[0]);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			
					if(Plans[0].contains("Smart Online Presence") ) {
						
						try {
							driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
							LOGS.info("Waiting for the Plan Checkbox to be Checked");
							WebDriverWait wait1 = new WebDriverWait(driver, 2);
							
							wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
						
						}catch(Exception ex) {
							LOGS.info("Wait is over and the Pocess continues.");
							}
						
					driver.findElement(By.xpath("(//span[text()='"+Plans[0]
							+"']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']//descendant::div[@id='radioContainer'])[2]")).click();
					
					    wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon")));
	                    wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon"))).click();
						
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products");
						
						try {
							driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
							LOGS.info("Waiting for the Plan Checkbox to be Checked");
							WebDriverWait wait1 = new WebDriverWait(driver, 2);
							wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("")));
						}catch(Exception ex) {
							LOGS.info("Wait is over and the Pocess continues.");
							}
					
						if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))  {

							String Assist = "Assistant";
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2")));
                            SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2").click();

							driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
							LOGS.info("Assistant addon unchecked");
							
                            /*if(!(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
                            		&&AssistantSelection.trim().equalsIgnoreCase("WithAssistant")) {
								SLocator("Save").click(); 
								}*/
                      }
					
					if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
						driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
						//Thread.sleep(5000);
						String LR = "Local Ranking";
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2"))).click();
						//SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2").click();
						
						driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
						//Thread.sleep(6000);
						
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
						//SLocator("Save").click(); 
						 
							LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
						}else {
							
							wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Configure Products']")));
							LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
							LOGS.info(Thread.currentThread() +"I am NON-LR SAVE" + PlanName);
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
							
						}
					
					}else {
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2"))).click();
						
					}
					

					if(Plans[0].contains("Smart Presence + 1 Ad Campaign") ){
						
	                   /* wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon")));
	                    wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon"))).click();
						//SLocator("ConfIcon").click();
*/	                    
						
						
						//shadow dom 1
						
						/*if(Plans[0].contains("Foundation + 1 Ad Campaign")) {
							//This Element is inside 11 nested shadow DOM.
							String cssSelectorForHost1 = "#sbPageContainer";
							String cssSelectorForHost2 = "sb-product-config[class='--desktop']";
							String cssSelectorForHost3 = "#bundles";
							String cssSelectorForHost4 = "#features";
							String cssSelectorForHost5 = "sb-product-feature-list";
							String cssSelectorForHost6 = "sb-product-feature[name='Online Foundation without Search']";
							String cssSelectorForHost7 = "#ot";
							String cssSelectorForHost8 = " div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)";
							String cssSelectorForHost9 = "#selection";
							String cssSelectorForHost10 = "sb-table-cell-select[class='--desktop']";
							String cssSelectorForHost11 = "#radio";
							//Thread.sleep(1000);
							WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
							SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
							SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='Online Foundation without Search']"));
							SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
							SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child(5)"));
							SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
							SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
							SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
							Thread.sleep(1000);
							WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#radio"));
							SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
							Thread.sleep(1000);
							last10.findElement(By.cssSelector("#offRadio"));
							last10.findElement(By.cssSelector("#offRadio")).click();
							
							}*/
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						try {
							driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
							LOGS.info("Waiting for the configure");
							WebDriverWait wait1 = new WebDriverWait(driver, 9);
							
							wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
						
						}catch(Exception ex) {
							LOGS.info("Wait is over and the Pocess continues.");
							}
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products");
						
						
						if(Plans[1].trim().equalsIgnoreCase("Managed Search") &&
								LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
							String LR = "Local Ranking";
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2"))).click();
							
							
							wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//span[text()='"+Plans[1]+"']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']"))));
							driver.findElement(By.xpath("//span[text()='"+Plans[1]+"']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']")).click();
							
							try {
								driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
								LOGS.info("Waiting for the Plan Checkbox to be Checked");
								WebDriverWait wait1 = new WebDriverWait(driver, 9);
								
								wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
							
							}catch(Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
								}
							
							EntrBdgtSave = "True";// To skip the clicking save after budget entered to the each line in package
							for (j=1;j<Plans.length;j++)
							{
								EnterBudget(Prods[0], Plans[j]);
								driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
								LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
								//Thread.sleep(3000);
							}
							
							if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))  {

								String Assist = "Assistant";
								wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2")));
	                            SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2").click();

								driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
								LOGS.info("Assistant addon unchecked");
								
	                            /*if(!(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
	                            		&&AssistantSelection.trim().equalsIgnoreCase("WithAssistant")) {
									SLocator("Save").click(); 
									}*/
	                      }
							
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
							
							LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
						}
						else if(Plans[1].trim().equalsIgnoreCase("Display") ||Plans[1].trim().equalsIgnoreCase("Social")){
						
						wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//span[text()='"+Plans[1]+"']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']"))));
						driver.findElement(By.xpath("//span[text()='"+Plans[1]+"']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']")).click();
						
						try {
							driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
							LOGS.info("Waiting for the Plan Checkbox to be Checked");
							WebDriverWait wait1 = new WebDriverWait(driver, 3);
							
							wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
						
						}catch(Exception ex) {
							LOGS.info("Wait is over and the Pocess continues.");
							}
						
						EntrBdgtSave = "True";// To skip the clicking save after budget entered to the each line in package
						for (j=1;j<Plans.length;j++)
						{
							EnterBudget(Prods[0], Plans[j]);
							driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
							LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
							//Thread.sleep(3000);
						}
						
						if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))  {

							String Assist = "Assistant";
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2")));
                            SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2").click();

							driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
							LOGS.info("Assistant addon unchecked");
							
                            /*if(!(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
                            		&&AssistantSelection.trim().equalsIgnoreCase("WithAssistant")) {
								SLocator("Save").click(); 
								}*/
                      }
						
						if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
							driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
							//Thread.sleep(5000);
							String LR = "Local Ranking";
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2"))).click();
							//SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2").click();
							
							driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
							//Thread.sleep(6000);
							
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
							//SLocator("Save").click(); 
							 
								LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
							}else {
								
								wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Configure Products']")));
								LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
								LOGS.info(Thread.currentThread() +"I am NON-LR SAVE" + PlanName);
								wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
								wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
								
							}
	                  }
					}				
										
					
if (   


		   Plans[0].contains("Smart Sync - Small")
		|| Plans[0].contains("Smart Sync - Medium")
		|| Plans[0].contains("Smart Sync - Large")

		|| Plans[0].contains("Synchronized Marketing - Large")
		|| Plans[0].contains("Synchronized Marketing - Medium")
		|| Plans[0].contains("Synchronized Marketing - Small")
		
		
		//|| Plans[0].contains("Foundation + 1 Ad Campaign")
//		|| Plans[0].contains("Foundation + Display & Social")
//		|| Plans[0].contains("Foundation + Display & Search - Small")
//		|| Plans[0].contains("Foundation + Display & Search - Medium")
//		|| Plans[0].contains("Foundation + Display & Search - Large")
//		|| Plans[0].contains("Foundation + Social & Search - Small")
//		|| Plans[0].contains("Foundation + Social & Search - Medium")
//		|| Plans[0].contains("Foundation + Social & Search - Large")

		//||  Plans[0].contains("Smart Presence + 1 Ad Campaign")
		||  Plans[0].contains("Smart Presence + Display & Social")
		||  Plans[0].contains("Smart Presence + Display & Search - Small")
		||  Plans[0].contains("Smart Presence + Display & Search - Medium")
		||  Plans[0].contains("Smart Presence + Display & Search - Large")
		||  Plans[0].contains("Smart Presence + Social & Search - Small")
		||  Plans[0].contains("Smart Presence + Social & Search - Medium")
		||  Plans[0].contains("Smart Presence + Social & Search - Large")
		)
					{
						LOGS.info(Thread.currentThread() +"Plan Name is: "+PlanName);
						/* wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon")));
					     wait.until(ExpectedConditions.elementToBeClickable(SLocator("ConfIcon"))).click();
					     //SLocator("ConfIcon").click();
*/					     
						
						/* int childNo=0;
							
							if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
							{
								childNo = 7;							
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
							{
								childNo = 1;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
							{
								childNo = 3;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
							{
								childNo = 5;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
							{
								childNo = 1;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
							{
								childNo = 3;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
							{
								childNo = 5;
							}
							
							LOGS.info("childNo: "+childNo);
							System.out.println("childNo: "+childNo);
							LOGS.info("Plan Name after the loop decides: "+Plans[0]);
							
							
							
							 String tierName1="Online Foundation without Search";
							 String tierName2="Display & Search Tiers";
							 String tierName3="Social & Search - Tiers";
							 String tierName="";
						if(Plans[0].contains("Display") && Plans[0].contains("Social")) {
							tierName = tierName1;
						     }
						else if(Plans[0].contains("Display") && Plans[0].contains("Search")) {
							tierName=tierName2;
					     }
						else if(Plans[0].contains("Social") && Plans[0].contains("Search")) {
							tierName=tierName3;
					     }
					     LOGS.info("This is my tier name "+tierName);
					     
					   
					     Thread.sleep(3000);
					     WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
					     SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					     SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
					     SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
					     SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
					     SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
					     SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
					     SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
					     SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#selection"));
					     SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-table-cell-select[class='--desktop']"));
					     SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#radio"));
					     SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
					     Thread.sleep(8000);
					     LOGS.info("I am abt to click radio button");
					     last10.findElement(By.cssSelector("#offRadio"));
					     wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#offRadio")));
					     last10.findElement(By.cssSelector("#offRadio")).click();
					     //wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#offRadio")));
					     
							JavascriptExecutor jseRadioBtn = (JavascriptExecutor) driver;
							jseRadioBtn.executeScript("arguments[0].click()", shadowDomHostElement11);
					     
							LOGS.info("I have selected the radio button for my plan for placing");

                        int childCNo=0;
							
							if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
							{
								childCNo = 7;							
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
							{
								childCNo = 1;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
							{
								childCNo = 3;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
							{
								childCNo = 5;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
							{
								childCNo = 1;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
							{
								childCNo = 3;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
							{
								childCNo = 5;
							}
							
							LOGS.info("childConfigureNo: "+childCNo);
							System.out.println("childConfigureNo: "+childCNo);
							LOGS.info("Plan Name after the Configured decides: "+Plans[0]);
							
				// Sabarish - For Clicking the config icon
							
						// for config button	
					
							Thread.sleep(1000);
							WebElement shadowDomHostElement50 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last50 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement50);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement51 = last50.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
							SearchContext last51 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement51);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement52 = last51.findElement(By.cssSelector("#bundles"));
							SearchContext last52 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement52);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement53 = last52.findElement(By.cssSelector("#features"));
							SearchContext last53 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement53);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement54 = last53.findElement(By.cssSelector("sb-product-feature-list"));
							SearchContext last54 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement54);
							//Thread.sleep(1000);
							LOGS.info("Am I giving the right tierName ?" +tierName);
						
							WebElement shadowDomHostElement55 = last54.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
							SearchContext last55 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement55);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement56 = last55.findElement(By.cssSelector("#ot"));
							SearchContext last56 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement56);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement57 = last56.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childCNo+")"));
							SearchContext last57 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement57);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement58 = last57.findElement(By.cssSelector("sb-actions[class='--desktop']"));
							SearchContext last58 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement58);
							Thread.sleep(1000);
							last58.findElement(By.cssSelector("#_0")).click();
					     LOGS.info("I have clicked on Configured icon on new way");
					     
					     /// Entering budget for Foundation package
					     
					     
					   //This Element is Budget textbox
					     String DSS=  "Display & Search Small (Max Budget Search $799)";
					     String DSM = "Display & Search Medium (Max Search Budget $1199)";
					     String DSL=  "Display & Search - Large (Search Budget Unlimited)";
					     String SSS = "Social & Search Small (Max Search Budget $799)";
					     String SSM = "Social & Search Medium (Max Search Budget $1199)";
					     String SSL=  "Social & Search - Large (Search Budget Unlimited)";
					     String Packsize="";
					     if(Plans[0].equalsIgnoreCase("Foundation + Display & Social"))
							{
					    	 Packsize = 7;							
							}
							if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Small"))
							{
								Packsize = DSS;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Medium"))
							{
								Packsize = DSM;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Display & Search - Large"))
							{
								Packsize = DSL;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Small"))
							{
								Packsize = SSS;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Medium"))
							{
								Packsize = SSM;
							}
							else if(Plans[0].equalsIgnoreCase("Foundation + Social & Search - Large"))
							{
								Packsize = SSL;
							}
							
							LOGS.info("My package tier after decides "+ Packsize);
					     
					     Thread.sleep(1000);
					     WebElement shadowDomHostElement80 = driver.findElement(By.cssSelector("#sbPageContainer"));
					     SearchContext last80 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement80);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement81 = last80.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					     SearchContext last81 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement81);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement82 = last81.findElement(By.cssSelector("#bundles"));
					     SearchContext last82 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement82);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement83 = last82.findElement(By.cssSelector("#features"));
					     SearchContext last83 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement83);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement84 = last83.findElement(By.cssSelector("sb-product-feature-list"));
					     SearchContext last84 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement84);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement85 = last84.findElement(By.cssSelector("sb-product-feature[name='"+Packsize+"']"));
					     SearchContext last85 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement85);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement86 = last85.findElement(By.cssSelector("#ot"));
					     SearchContext last86 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement86);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement87 = last86.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
					     SearchContext last87 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement87);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement88 = last87.findElement(By.cssSelector("#row"));
					     SearchContext last88 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement88);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement89 = last88.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
					     SearchContext last89 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement89);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement90 = last89.findElement(By.cssSelector("#field"));
					     SearchContext last90 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement90);
					     //Thread.sleep(1000);
					     WebElement Budgetbox = last10.findElement(By.cssSelector("#formatted"));
					     Budgetbox.click();
					     
					     
					   //This Element is inside 11 nested shadow DOM.
					    
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement110 = driver.findElement(By.cssSelector("#sbPageContainer"));
					     SearchContext last110 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement110);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement111 = last110.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
					     SearchContext last111 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement111);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement112 = last111.findElement(By.cssSelector("#bundles"));
					     SearchContext last112 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement112);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement113 = last112.findElement(By.cssSelector("#features"));
					     SearchContext last113 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement113);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement114 = last113.findElement(By.cssSelector("sb-product-feature-list"));
					     SearchContext last114 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement114);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement115 = last114.findElement(By.cssSelector("sb-product-feature[name='"+Packsize+"']"));
					     SearchContext last115 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement115);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement116 = last115.findElement(By.cssSelector("#ot"));
					     SearchContext last116 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement116);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement117 = last116.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNo+")"));
					     SearchContext last117 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement117);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement118 = last117.findElement(By.cssSelector("#row"));
					     SearchContext last118 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement118);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement119 = last118.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
					     SearchContext last119 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement119);
					     //Thread.sleep(1000);
					     WebElement shadowDomHostElement210 = last119.findElement(By.cssSelector("#field"));
					     SearchContext last210 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement210);
					     //Thread.sleep(1000);
					     WebElement Budgetbox = last210.findElement(By.cssSelector("#me"));
					     Budgetbox.click();
					   
					 
					     LOGS.info("I have clicked the Budget entering box for my plan "+Budgetbox);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products");
						Thread.sleep(3000); */
						
						LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
						//EntrBdgtSave = "True";// To skip the clicking save after budget entered to the each line in package
						for (j=1;j<Plans.length;j++)
						{
							
							EnterBudget(Prods[0], Plans[j]);
							driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
							LOGS.info(Thread.currentThread() +"Enter Budget method execution completed for: "+Plans[j]);
							//Thread.sleep(3000);
							
						}
						if(AssistantSelection.trim().equalsIgnoreCase("WithoutAssistant"))  {

							String Assist = "Assistant";
							wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2")));
                            SLocatorDynamic("AddProductCBDynamic1_" + Assist + "_AddProductCBDynamic2").click();

							driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
							LOGS.info("Assistant addon unchecked");
							
                            /*if(!(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate"))
                            		&&AssistantSelection.trim().equalsIgnoreCase("WithAssistant")) {
								SLocator("Save").click(); 
								}*/
                      }
						
						 //Selecting LR check box
						if(LRSelection.trim().equalsIgnoreCase("WithLRBudgetEstimate")) {
						driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
						//Thread.sleep(5000);
						String LR = "Local Ranking";
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2"))).click();
						//SLocatorDynamic("AddProductCBDynamic1_" + LR + "_AddProductCBDynamic2").click();
						
						driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
						//Thread.sleep(6000);
						
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
						//SLocator("Save").click(); 
						 
							LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
						}else {
							
							wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Configure Products']")));
							LOGS.info(Thread.currentThread() +"Clicked on Save Button in " + PlanName + " page");
							LOGS.info(Thread.currentThread() +"I am NON-LR SAVE" + PlanName);
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save")));
							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Save"))).click();
							
						}

						/*	SalesforceTasks.EnterBudget(Prods[0], Plans[2]);
							driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
							LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
							Thread.sleep(3000); */

					}
					/* LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
						SalesforceTasks.EnterBudget(Prods[0], Plans[1]);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
						Thread.sleep(3000); */
				} 

				else if ( Prods[i].equalsIgnoreCase("Performance Sync"))
				{
					LOGS.info(Thread.currentThread() +"Plan that i will be selecting " + Plans[0]);
					SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2").click();
					LOGS.info(Thread.currentThread() +"Selected the plan: " + Plans[0]);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() +"Selected the plan: " + Plans[0]);
					Thread.sleep(3000);
					SLocator("ConfIcon").click();
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() +"Clicked on Configure Icon - Solutions Products");
					Thread.sleep(3000); 
					LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
					for (j=1;j<Plans.length;j++)
					{
						EnterBudget(Prods[0], Plans[j]);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
						Thread.sleep(3000);
					}
				}
				else if (Prods[i].equalsIgnoreCase(OR.getProperty("02"))


						|| Prods[i].equalsIgnoreCase("Presence + Performance Sync"))

				{
					LOGS.info(Thread.currentThread() +"Plan that i will be selecting " + Plans[0]);
					SLocatorDynamic("SitePlusRadioBtn1_" + Plans[0] + "_SitePlusRadioBtn2").click();
					LOGS.info(Thread.currentThread() +"Selected the plan: " + Plans[0]);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() +"Selected the plan: " + Plans[0]);
					Thread.sleep(3000);




					if (!Prods[i].equalsIgnoreCase("Performance Sync")) {
						SLocator("ConfIcon").click();
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Clicked on Configure Icon");
						Thread.sleep(3000);
						SLocatorDynamic("AddProductCBDynamic1_" + Plans[1] + "_AddProductCBDynamic2").click();
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Selected the Checkbox of website: " + Plans[1]);
					}
					LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
					EnterBudget(Prods[0], Plans[1]);
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
					Thread.sleep(3000);

					if (!Prods[i].equalsIgnoreCase("Performance Sync")) {
						LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
						EnterBudget(Prods[0], Plans[2]);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Enter Budget method execution completed");
						Thread.sleep(3000);
					}
					// SLocator("Save").click();
					// LOGS.info(Thread.currentThread() +"Clicked on Save button");
				}

			}
		} catch (Exception e) {
			ImageName = "PackageDetailsException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"There is some error adding package details");
			ExceptionMsg = "Exception Happened While Adding the Package Details to Product in Quote";
			LOGS.info(Thread.currentThread() + "," +"There is some error adding package details - " + e.getMessage());
			LOGS.error(Thread.currentThread() +"There is some error adding package details"+e);
		}
	}

	public  String CancelProduct(String[] ProdName, String[] PlanName) throws Exception {
		// TODO Auto-generated method stub
		try {
			Thread.sleep(15000);
			driver.navigate().refresh();
			LOGS.info(Thread.currentThread() +"Cancel Method execution started");
			driver.get(AccURL);
			SLocator("ContractsLink").click();
			LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
					SLocator("ContractNolink"));
			SLocator("ContractNolink").click();
			LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			// Thread.sleep(5000);
			LOGS.info(Thread.currentThread() +"Waited 10 Secs for  Amend button to be visible");
			SLocator("Amend").click();
			LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page ");
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(10000);
			SLocator("Amend2").click();
			LOGS.info(Thread.currentThread() +" Second time Amend button clicked ");
			Thread.sleep(10000);
			// cancelORGprod="true";
			// ----------------------------------Adding product---------------------

			if (AddingSecondProd.equalsIgnoreCase("True")) {
				Thread.sleep(4000);
				try {
					ExistingProduct = SLocator("QuoteLineProduct").getText();
					LOGS.info(Thread.currentThread() +"ExistingProduct: " + ExistingProduct);
				} catch (Exception e) {
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"ExistingProduct: ");
				}
				// read the product
				ProductIdentifierName = "07";
				String inputdata = pr.FetchProductplan(ProductIdentifierName);
				LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
				String[] allProdsplans = inputdata.split("&");
				String allProds = allProdsplans[0];
				LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
				Prods = allProds.split(",");
				String allpalns = allProdsplans[1];
				LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
				String[] Plans = allpalns.split(",");
				LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
				if (ExistingProduct.equalsIgnoreCase(Prods[0])) {
					ProductIdentifierName = "10";
					LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
					String inputdata1 = pr.FetchProductplan(ProductIdentifierName);
					LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
					String[] allProdsplans1 = inputdata1.split("&");
					String allProds1 = allProdsplans[0];
					LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
					Prods = allProds1.split(",");
					String allpalns1 = allProdsplans1[1];
					LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
					plans = allpalns1.split(",");
					LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
					List<WebElement> ProdRowsBefore = driver
							.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
					RowsBeforeAdd = ProdRowsBefore.size();
					AddingProduct(Prods, plans);
					LOGS.info(Thread.currentThread() +"Adding Product completed");


				} else {

					List<WebElement> ProdRowsBefore = driver
							.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
					RowsBeforeAdd = ProdRowsBefore.size();
					AddingProduct(Prods, Plans);
					LOGS.info(Thread.currentThread() +"Adding Product completed");
				}
			} else if (IncBudget.equalsIgnoreCase("True")) {
				int i;
				LOGS.info(Thread.currentThread() +"Increasing/Decreasing the budget");
				SLocator("ReConfIcon").click();
				for (i = 0; i < PlanName.length; i++) {
					if (PlanName[i].contains("Search")) {
						/*
						 * SLocatorDynamic("AddProductCBDynamic1_" + PlanName +
						 * "_AddProductCBDynamic2").click();
						 * LOGS.info(Thread.currentThread() +"Checked the checkbox of Search plan");
						 */
						SLocator("SearchConfig").click();
						LOGS.info(Thread.currentThread() +"Clicked on configure Icon of plan");
					}
					String CurBudget = SLocatorDynamic("BudgetTADynamic1_" + PlanName[i] + "_BudgetTADynamic2")
							.getText();
					CurBudget = CurBudget.replace("$", "");
					LOGS.info(Thread.currentThread() +"Current Budget: " + CurBudget);
					float BudgetToEnter = Float.parseFloat(CurBudget) + 10;
					LOGS.info(Thread.currentThread() +"Budget To Enter: " + BudgetToEnter);
					Actions actions = new Actions(driver);
					actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName[i] + "_BudgetTADynamic2"));
					actions.click();
					LOGS.info(Thread.currentThread() +"Clicked on Buget Text area");
					actions.keyDown(Keys.DELETE);
					actions.keyUp(Keys.DELETE);
					LOGS.info(Thread.currentThread() +"Cleared the budget field");
					/*
					 * actions.build().perform();
					 * SLocatorDynamic("BudgetTADynamic1_"+PlanName[i]+"_BudgetTADynamic2").clear();
					 * LOGS.info(Thread.currentThread() +"Cleared the budget field");
					 */
					actions.sendKeys(String.valueOf(BudgetToEnter));
					actions.build().perform();
					LOGS.info(Thread.currentThread() +"Entered the budget");
					// SLocatorDynamic("BudgetTADynamic1_"+PlanName[i]+"_BudgetTADynamic2").sendKeys(""+BudgetToEnter);
					SLocator("Save").click();
					Thread.sleep(3000);
					SLocator("SaveBtn").click();
				}

			} else if (DecBudget.equalsIgnoreCase("True")) {
				int i;
				LOGS.info(Thread.currentThread() +"Increasing/Decreasing the budget");
				SLocator("ReConfIcon").click();
				for (i = 0; i < PlanName.length; i++) {
					if (PlanName[i].contains("Search")) {
						/*
						 * SLocatorDynamic("AddProductCBDynamic1_" + PlanName +
						 * "_AddProductCBDynamic2").click();
						 * LOGS.info(Thread.currentThread() +"Checked the checkbox of Search plan");
						 */
						SLocator("SearchConfig").click();
						LOGS.info(Thread.currentThread() +"Clicked on configure Icon of plan");
					}
					String CurBudget = SLocatorDynamic("BudgetTADynamic1_" + PlanName[i] + "_BudgetTADynamic2")
							.getText();
					CurBudget = CurBudget.replace("$", "");
					LOGS.info(Thread.currentThread() +"Current Budget: " + CurBudget);
					float BudgetToEnter = Float.parseFloat(CurBudget) + 10;
					LOGS.info(Thread.currentThread() +"Budget To Enter: " + BudgetToEnter);
					Actions actions = new Actions(driver);
					actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + PlanName[i] + "_BudgetTADynamic2"));
					actions.click();
					LOGS.info(Thread.currentThread() +"Clicked on Buget Text area");
					actions.keyDown(Keys.DELETE);
					actions.keyUp(Keys.DELETE);
					LOGS.info(Thread.currentThread() +"Cleared the budget field");
					/*
					 * actions.build().perform();
					 * SLocatorDynamic("BudgetTADynamic1_"+PlanName[i]+"_BudgetTADynamic2").clear();
					 * LOGS.info(Thread.currentThread() +"Cleared the budget field");
					 */
					actions.sendKeys(String.valueOf(BudgetToEnter));
					actions.build().perform();
					LOGS.info(Thread.currentThread() +"Entered the budget");
					// SLocatorDynamic("BudgetTADynamic1_"+PlanName[i]+"_BudgetTADynamic2").sendKeys(""+BudgetToEnter);
					SLocator("Save").click();
					Thread.sleep(3000);
					SLocator("SaveBtn").click();
				}
			}

			else if (OwnedProd.equalsIgnoreCase("True")) {
				String OwnedProdCol = driver
						.findElement(By.xpath("//div[text()='Owned Product' and not(contains(@class,'hidden'))]"))
						.getText();
				ExpRes = "Owned Product column should be displayed in amend QLE";
				ImageName = "OwnedProd";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (OwnedProdCol.equalsIgnoreCase("Owned Product")) {
					LOGS.info(Thread.currentThread() +"Owned Products Column exist");
					ActRes = "Owned Product column is displayed";
					Status = "Pass";
					ExportResults.exportTestResult("Verification of owned products column in amends," + ExpRes + ","
							+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Owned Products Column does not exist");
					ActRes = "Owned Product column is not displayed";
					Status = "Fail";
					ExportResults.exportTestResult("Verification of owned products column in amends," + ExpRes + ","
							+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				List<WebElement> ProdStatus = driver.findElements(By.xpath("//div[contains(@field,'Owned')]/div"));
				int StatusFlag = 0;
				ExpRes = "Product status should be Active";
				for (WebElement PS : ProdStatus) {
					String PStatus = PS.getText();
					if (PStatus.equalsIgnoreCase("Active") || PStatus.equals("")) {
						LOGS.info(Thread.currentThread() +"Product status is: " + PStatus);
						StatusFlag = 1;
					} else {
						LOGS.info(Thread.currentThread() +"Product status is: " + PStatus);
						StatusFlag = 0;
					}
				}
				if (StatusFlag == 1) {
					LOGS.info(Thread.currentThread() +"Product Status is active");
					ActRes = "Product status is Active";
					Status = "Pass";
					ExportResults.exportTestResult("Product Status verification in amends," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +"Product Status is not active");
					ActRes = "Product status is not Active";
					Status = "Fail";
					ExportResults.exportTestResult("Product Status verification in amends," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

			}
			// ---------------------------cancelvalidation----------------------------
			else {

				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				if (CancelLineItemFlag.equalsIgnoreCase("True")) {
					LOGS.info(Thread.currentThread() +"Cancelling Line item");
					for (int c = 0; c < ProdName.length; c++) {
						ProdName[c] = " " + ProdName[c];
						LOGS.info(Thread.currentThread() +"Product Name is: " + ProdName[c]);
						SLocatorDynamic("CancelLineItemCBDynamic1_" + ProdName[c] + "_CancelLineItemCBDynamic2")
						.click();
						LOGS.info(Thread.currentThread() +"Selected cancel Checkbox");
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						WebElement CancelReasonArea = SLocatorDynamic(
								"CancelLineItemCRDynamic1_" + ProdName[c] + "_CancelLineItemCRDynamic2");
						CancelReasonArea.click();
						CancelReasonArea.click();
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						Thread.sleep(3000);
						Select CancelReasonSelection = new Select(SLocatorDynamic(
								"CancelLineItemCRDynamic1_" + ProdName[c] + "_CancelLineItemCRSelectDynamic2"));
						CancelReasonSelection.selectByVisibleText(CancelReason);
						LOGS.info(Thread.currentThread() +"Selected cancel Reason");
						Robot robot = new Robot();
						robot.keyPress(KeyEvent.VK_ENTER);
						robot.keyRelease(KeyEvent.VK_ENTER);
						
						Thread.sleep(2000);
						LOGS.info(Thread.currentThread() +"Pressed enter");
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						WebElement CancelTypeArea = SLocatorDynamic(
								"CancelLineItemCTDynamic1_" + ProdName[c] + "_CancelLineItemCTDynamic2");
						// ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();",
						// CancelTypeArea);
						Thread.sleep(3000);
						CancelTypeArea.click();
						CancelTypeArea.click();
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						Select CancelTypeSelection = new Select(SLocatorDynamic(
								"CancelLineItemCTDynamic1_" + ProdName[c] + "_CancelLineItemCTSelectDynamic2"));
						CancelTypeSelection.selectByVisibleText(CancelType);
						LOGS.info(Thread.currentThread() +"Selected cancel type");
						robot.keyPress(KeyEvent.VK_ENTER);
						robot.keyRelease(KeyEvent.VK_ENTER);
						Thread.sleep(2000);
						LOGS.info(Thread.currentThread() +"Pressed enter");
						ExpRes = "Cancelreason and Canceltype should be selected successfully for cancellation";
						ActRes = "Cancelreason and Canceltype is selected successfully for cancellation";
						ImageName = "CancelReasonType";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						Status = "Pass";
						ExportResults.exportTestResult("Select cancellation reason and Type:," + ExpRes + "," + ActRes
								+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				} else if (CancelAll.equalsIgnoreCase("True")) {
					Thread.sleep(2000);
					SLocator("CancelAll").click();
					LOGS.info(Thread.currentThread() +" Cancel All Checkbox of Checked");
					ImageName = "Cancellall";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "cancelAll checkBox should display";
					ActRes = "cancelAll checkbox found";
					Status = "Pass";

					ExportResults.exportTestResult("CancelAll checkbox verification :," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);
					if (VerifyQuickSaveAlert.equalsIgnoreCase("True")) {

						LOGS.info(Thread.currentThread() +" VerifyQuickSaveAlert executing");
						SLocator("QuickSave").click();
						LOGS.info(Thread.currentThread() +" QuickSave button cliked");

						if (SLocator("ValidationAlert").isDisplayed()) {

							LOGS.info(Thread.currentThread() +" ValidationAlert displayed");

							ExpRes = "Cancellation reason and type are required if Cancel All is selected";
							/*
							 * ImageName = "ListingImage"; ImgName =
							 * ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							 */
							if (SLocator("ValidationAlert").getText().contains(ExpRes)) {
								ActRes = "Cancellation reason and type are required if Cancel All is selected alert found";
								Status = "Pass";
								ExportResults.exportTestResult("CancelAll alert verification :," + ExpRes + "," + ActRes
										+ "," + Status + "," + "No Image",pr.Resultsfolderpath);

							} else {
								LOGS.info(Thread.currentThread() +
										"Cancellation reason and type are required if Cancel All is selected alert not found");

							}

						}

					}
					if (VerifyCalculateAlert.equalsIgnoreCase("True")) {

						LOGS.info(Thread.currentThread() +"Validate Cancel reason and type is applied to all lines");
						SLocator("Calculatebtn").click();
						LOGS.info(Thread.currentThread() +" Calculate button clicked ");
						Thread.sleep(3000);

						if (SLocator("ValidationAlert").isDisplayed()) {

							LOGS.info(Thread.currentThread() +" ValidationAlert displayed");

							ExpRes = "Cancellation reason and type are required on all cancelled Quote Line Items alert should display";
							ImageName = "ListingImage";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							if (SLocator("ValidationAlert").getText().contains(ExpRes)) {
								ActRes = "Cancellation reason and type are required on all cancelled Quote Line Items alert found";
								Status = "Pass";
								ExportResults.exportTestResult("CancelAll alert verification :," + ExpRes + "," + ActRes
										+ "," + Status + "," + ImageName,pr.Resultsfolderpath);

							} else {
								LOGS.info(Thread.currentThread() +
										"Cancellation reason and type are required if Cancel All is selected alert not found");

							}

						}

					}

					Select cancelreason = new Select(driver.findElement(By.xpath(
							"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

					cancelreason.selectByVisibleText(CancelReason);
					LOGS.info(Thread.currentThread() +"Cancellation Reason selected");

					Select canceltype = new Select(driver.findElement(By.xpath(
							"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

					canceltype.selectByVisibleText(CancelType);
					LOGS.info(Thread.currentThread() +"Cancellation type selected");

					ExpRes = "cancelreason caceltype should given before cancel product ";
					ActRes = "cancelreason caceltype  selected before cancel product ";
					ImageName = "EditquoteForCancel";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					CancelproductRes = "Pass";
					ExportResults.exportTestResult(
							"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					if (VerifyLineItem.equalsIgnoreCase("True")) {

						LOGS.info(Thread.currentThread() +"Validate Cancel reason and type is applied to all lines");
						SLocator("Calculatebtn").click();
						LOGS.info(Thread.currentThread() +" Calculate button clicked ");
						Thread.sleep(3000);
						String Dynamicpath = "//div[@class='datatable leTable style-scope sf-standard-table']//child::div[1]//child::sf-le-table-row";
						int j = driver.findElements(By.xpath(Dynamicpath)).size();
						LOGS.info(Thread.currentThread() +" size of line item available is :" + j);

						ExpRes = "cancelreason and cancellationType should applied to all line  ";
						ActRes = "cancelreason and cancellationType applied to all line ";
						ImageName = "LineItemcancel";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						CancelproductRes = "Pass";
						ExportResults.exportTestResult(
								"Cancel at line :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						
						SLocator("SaveBtn").click();
						LOGS.info(Thread.currentThread() +" Save button clicked ");
						Thread.sleep(6000);
						driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

					}
				}
				SLocator("SaveBtn").click();
				LOGS.info(Thread.currentThread() +" Save button clicked ");
				Thread.sleep(6000);
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

			}

			if (AddingSecondProd.equalsIgnoreCase("True") || IncBudget.equalsIgnoreCase("True")
					|| DecBudget.equalsIgnoreCase("True") || Stage.equalsIgnoreCase("Cancel")
					|| Stage.equalsIgnoreCase("Amend")) {

				Thread.sleep(6000);
				GenerateDocument(GenerateDocument);
				LOGS.info(Thread.currentThread() +"Generate Document completed");
				Thread.sleep(3000);
				if (Stage.equalsIgnoreCase("Cancel") || TestCaseName.contains("PostLiveCancellation"))

				{
					driver.findElement(By.xpath("//td[@id='topButtonRow']/input[@name='cpq_capture_signature']"))
					.click();
					Thread.sleep(3000);
					SLocator("OkBtn").click();
					LOGS.info(Thread.currentThread() +"Ok Btn clicked ");
				} else if ((SalesRepType.equalsIgnoreCase("TSales")) || (SalesRepType.equalsIgnoreCase("CSRep"))
						|| (SalesRepType.equalsIgnoreCase("DSCRep")))
					SignType = "Voice Verify";
				else if ((SalesRepType.equalsIgnoreCase("Premise")) || (SalesRepType.equalsIgnoreCase("SPE")))
					SignType = "Digital Signature";
				capture_signature(SignType);
				LOGS.info(Thread.currentThread() +"Capture Signature completed");
				Thread.sleep(3000);
				PaymentProcess();
				LOGS.info(Thread.currentThread() +"Payment completed");
				Thread.sleep(3000);
				SelectConsultation(SelectConsultation);
				LOGS.info(Thread.currentThread() +"Select Consultation completed");
				Thread.sleep(3000);
				GenerateDocument(GenerateDocument);
				LOGS.info(Thread.currentThread() +"Generate Document completed");
				Thread.sleep(3000);
				submitFinalPage();
				LOGS.info(Thread.currentThread() +"Submit Quote completed");
				CancelproductRes = "Pass";
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			CancelproductRes = "Fail";
			e.printStackTrace();
		}
		return CancelproductRes;
	}

	public  String BundlePriceValid(String[] Prods, String[] Plans) throws Exception {
		LOGS.info(Thread.currentThread() +"Execution of BundlePriceValid method started");
		String SelectedWeb = "", Monthly;
		float TotMonthly;
		int i, j;
		try {
			LOGS.info("In Try Block..Waiting for Page to load Completely");
			driver.manage().timeouts().implicitlyWait(4, TimeUnit.SECONDS);
		WebDriverWait wait2 = new WebDriverWait(driver, 10);
		wait2.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Main']")));
	
	}catch(Exception ex) {
		LOGS.info("Wait is over and the Pocess continues.");
		}
		for (i = 0; i < Prods.length; i++) {

			if ((Prods[i].equalsIgnoreCase(OR.getProperty("19"))) || Prods[i].equalsIgnoreCase(OR.getProperty("02"))) {
				SLocator("Save").click();
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Validating Bundle Price for Package Presence Foundation ");
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("ProductListing"));
				LOGS.info(Thread.currentThread() +"ProductListing found ");
				Thread.sleep(3000);
				if ((SLocator("ProductListing").isDisplayed()) && (SLocator("ProductReview").isDisplayed())
						&& (SLocator("ProductReputation").isDisplayed())) {

					LOGS.info(Thread.currentThread() +
							"All the 3 options displayed: ListingsManagement, Reveiws and Reputation are displayed in Presence Foundation");
					ExpRes = "3 options shloud be displayed ListingsManagement Reveiws and Reputation when Presence Foundation is added";
					/*
					 * ImageName = "ListingImage"; ImgName =
					 * ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					 */
					ActRes = "All 3 options are displayed ListingsManagement Reveiws and Reputation";
					Status = "Pass";
					BundlePriceValidationStatus = Status;
					ExportResults.exportTestResult(
							"ProductName verification :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

					// ExportResults.exportTestResult("ProductName verification," + ExpRes + "," +
					// ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("MonthlyInvFoun"));

				ActRes = SLocator("MonthlyInvFoun").getText();
				LOGS.info(Thread.currentThread() +"Montly investemnt for Presence Foundation:" + ActRes);
				ExpRes = "Monthly investment for Presence Foundation = $129.00";
				if (ActRes == "$129.00") {
					LOGS.info(Thread.currentThread() +"verifying Montly investemnt for Presence Foundation");
					LOGS.info(Thread.currentThread() +"$129.00 found");
					Status = "Pass";
					BundlePriceValidationStatus = Status;
				}
				ExportResults
				.exportTestResult("Add Product :," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

			}
			// if(Prods[i].equalsIgnoreCase("Presence + Performance Sync"))
			if (Prods[i].equalsIgnoreCase(OR.getProperty("02"))) {
				LOGS.info(Thread.currentThread() +"Validating Bundle Price for Package Presence + Performance Sync");
				if ((SLocator("ProductSD").isDisplayed()) && (SLocator("ProductSS").isDisplayed())
						&& (SLocator("ProductSSOcial").isDisplayed())) {

					LOGS.info(Thread.currentThread() +"All the 3 options displayed: Site + Display, Site + Search and Site + Social");
					ExpRes = "3 options shloud be displayed: SitePlusDisplay SitePlusSearch and SitePlusSocial";
					ImageName = "ProductName";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "All 3 options are displayed: SitePlusDisplay SitePlusSearch and SitePlusSocial";
					Status = "Pass";
					ExportResults.exportTestResult(
							"ProductName verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				if (Plans[1].equalsIgnoreCase("Managed Search") && convertMinBudg == 399.00) {
					LOGS.info(Thread.currentThread() +"Min Budget of search is: " + convertMinBudg);
					ExpRes = "Minimum budget of Search should be $399";
					ActRes = "Minimum budget is: " + convertMinBudg;
					Status = "Pass";
					ExportResults.exportTestResult("Minimum Budget Verification for Search," + ExpRes + "," + ActRes
							+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
				if (Plans[1].equalsIgnoreCase("Display") && convertMinBudg == 149.00) {
					LOGS.info(Thread.currentThread() +"Min Budget of Display is: " + convertMinBudg);
					ExpRes = "Minimum budget of Display should be $149";
					ActRes = "Minimum budget is: " + convertMinBudg;
					Status = "Pass";
					ExportResults.exportTestResult("Minimum Budget Verification for Display," + ExpRes + "," + ActRes
							+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
				if (Plans[1].equalsIgnoreCase("Social") && convertMinBudg == 249.00) {
					LOGS.info(Thread.currentThread() +"Min Budget of Social is: " + convertMinBudg);
					ExpRes = "Minimum budget of Social should be $249";
					ActRes = "Minimum budget is: " + convertMinBudg;
					Status = "Pass";
					ExportResults.exportTestResult("Minimum Budget Verification for Social," + ExpRes + "," + ActRes
							+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
			}
			if (Prods[i].equalsIgnoreCase(OR.getProperty("18")) || Prods[i].equalsIgnoreCase(OR.getProperty("16"))
					|| Prods[i].equalsIgnoreCase(OR.getProperty("17")))

			{

				LOGS.info(Thread.currentThread() +"Validating Bundle Price for Package");
				Thread.sleep(3000);
				SLocator("ConfIcon").click();
				LOGS.info(Thread.currentThread() +"Clicked on Configure icon");
				ExpRes = "Pro Website and Standard Website should be the two options under websites";
				List<WebElement> Websites = driver.findElements(By.xpath(
						"//h2[text()='Website']/parent::header/following-sibling::div/descendant::sb-table-row"));
				WebElement element = driver.findElement(By.xpath("//span[text()='Pro Website']"));
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
				((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
				Thread.sleep(3000);
				ImageName = "WebsiteOptions";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				((JavascriptExecutor) driver).executeScript("window.scrollTo(0, 0)");
				if (Websites.size() == 2) {
					Iterator<WebElement> itr = Websites.iterator();
					while (itr.hasNext()) {
						LOGS.info(Thread.currentThread() +"Entered while loop and iterating all the objects");
						String name = itr.next().getAttribute("name");
						LOGS.info(Thread.currentThread() +"Content of the attribute name: " + name);
						if (name.equalsIgnoreCase("Pro Website") || (name.equalsIgnoreCase("Standard Website"))) {
							Status = "Pass";
							ActRes = "Website Plan available under website section is: " + name;
							ExportResults.exportTestResult("Website Option Verification," + ExpRes + "," + ActRes + ","
									+ Status + "," + ImgName,pr.Resultsfolderpath);
						} else {
							Status = "Fail";
							ActRes = "Website Plan available under website section is: " + name;
							ExportResults.exportTestResult("Website Option Verification," + ExpRes + "," + ActRes + ","
									+ Status + "," + ImgName,pr.Resultsfolderpath);
						}
					}
				} else {
					LOGS.info(Thread.currentThread() +"No.of Website plans available under website section is: " + Websites.size());
					Status = "Fail";
					ActRes = "Both/only Pro and Standard Website is not available under website section";
					ExportResults.exportTestResult(
							"Website Option Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				List<WebElement> CheckedPro = driver.findElements(By.xpath(
						"//span[text()='Pro Website']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']//descendant::div[contains(@class,'checked')]"));
				ExpRes = "If Pro Web is pre-selected we should be able to select Std web and Vice-versa";
				if (CheckedPro.size() == 1) {
					LOGS.info(Thread.currentThread() +"Pro website is Pre-selected");
					SLocator("CheckedProWeb").click();
					LOGS.info(Thread.currentThread() +"Clicked on Pro website checkbox to unselect it");
					SLocator("CheckStdWeb").click();
					LOGS.info(Thread.currentThread() +"Checked the checkbox of Standard website");
					SelectedWeb = "Standard";
					WebElement ele = driver.findElement(By.xpath("//span[text()='Standard Website']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
					Thread.sleep(3000);
					ImageName = "ProPreSelected";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Pro web was pre-selected which was changed to Std web";
					Status = "Pass";
					((JavascriptExecutor) driver).executeScript("window.scrollTo(0, 0)");
					ExportResults.exportTestResult(
							"Website Selection Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				// List<WebElement>
				// CheckedStd=driver.findElements(By.xpath("//span[text()='Standard
				// Website']//ancestor::div[@id='rowDiv']//preceding-sibling::div[@id='selectionContainer']//descendant::div[contains(@class,'checked')]"));
				else {
					LOGS.info(Thread.currentThread() +"Standard website is Pre-selected");
					SLocator("CheckedStdWeb").click();
					LOGS.info(Thread.currentThread() +"Clicked on Standard website checkbox to unselect it");
					SLocator("CheckProWeb").click();
					LOGS.info(Thread.currentThread() +"Checked the checkbox of Pro website");
					SelectedWeb = "Pro";
					WebElement ele1 = driver.findElement(By.xpath("//span[text()='Pro Website']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele1);
					Thread.sleep(3000);
					ImageName = "StdPreSelected";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Std web was pre-selected which was changed to Pro web";
					Status = "Pass";
					((JavascriptExecutor) driver).executeScript("window.scrollTo(0, 0)");
					ExportResults.exportTestResult(
							"Website Selection Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				SLocator("Save").click();
				LOGS.info(Thread.currentThread() +"Clicked Save button on configure products page");
			}
			
			if (Prods[i].contains("Diversified") || Prods[i].contains("Social")) {
				
				for (j = 0; j < Plans.length; j++) {

					if (Plans[i].equalsIgnoreCase("Managed Search") && convertMinBudg == 400.00) {
						LOGS.info(Thread.currentThread() +"Min Budget of search is: " + convertMinBudg);
						ExpRes = "Minimum budget of Search should be $400";
						ActRes = "Minimum budget is: " + convertMinBudg;
						Status = "Pass";
						ExportResults.exportTestResult("Minimum Budget Verification for Search," + ExpRes + "," + ActRes
								+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
						BundlePriceValidationStatus = Status;
					}
					if (Plans[i].equalsIgnoreCase("Display") && convertMinBudg == 150.00) {
						LOGS.info(Thread.currentThread() +"Min Budget of Display is: " + convertMinBudg);
						ExpRes = "Minimum budget of Display should be $150";
						ActRes = "Minimum budget is: " + convertMinBudg;
						Status = "Pass";
						ExportResults.exportTestResult("Minimum Budget Verification for Display," + ExpRes + ","
								+ ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
						BundlePriceValidationStatus = Status;
					}
					if (Prods[i].equalsIgnoreCase("Social Advanced Solution") && Plans[i].equalsIgnoreCase("Social")
							&& convertMinBudg == 450.00) {
						LOGS.info(Thread.currentThread() +"Min Budget of Social is: " + convertMinBudg);
						ExpRes = "Minimum budget of Social should be $450";
						ActRes = "Minimum budget is: " + convertMinBudg;
						Status = "Pass";
						ExportResults.exportTestResult("Minimum Budget Verification for Social," + ExpRes + "," + ActRes
								+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
						BundlePriceValidationStatus = Status;
					} else {
						LOGS.info(Thread.currentThread() +"Min Budget of Social is: " + convertMinBudg);
						ExpRes = "Minimum budget of Social should be $250";
						ActRes = "Minimum budget is: " + convertMinBudg;
						Status = "Pass";
						ExportResults.exportTestResult("Minimum Budget Verification for Social," + ExpRes + "," + ActRes
								+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
						BundlePriceValidationStatus = Status;
					}
				}
			}
			/*
			 * SLocator("Save").click();
			 * LOGS.info(Thread.currentThread() +"Clicked Save button on configure products page");
			 */
			if (Prods[i].equalsIgnoreCase(OR.getProperty("18")) || Prods[i].contains("Diversified")
					|| Prods[i].contains("Social")) {
				LOGS.info(Thread.currentThread() +"Verifying if Listings Mgmt, Reviews and Reputation comes as part of package");
				Thread.sleep(6000);
				if (SLocator("ProductListing").isDisplayed() && SLocator("ProductReview").isDisplayed()
						&& SLocator("ProductReputation").isDisplayed()) {
					LOGS.info(Thread.currentThread() +"Listings mgmt, Reviews and Reputation is part of the package");
					WebElement element1 = driver.findElement(By.xpath("//div[text()='Listings Management']"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element1);
					Thread.sleep(3000);
					ExpRes = "Listings mgmt Reviews and Reputation should be part of the package";
					ImageName = "PackageInclusions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					((JavascriptExecutor) driver).executeScript("window.scrollTo(0, 0)");
					ActRes = "Listings mgmt Reviews and Reputation are part of the package";
					Status = "Pass";
					ExportResults.exportTestResult(
							"Website Selection Verification," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					BundlePriceValidationStatus = Status;
				}
				Monthly = SLocator("MonthlyInv").getText();
				String DollarRemMon = Monthly.replace("$", "");
				TotMonthly = Float.parseFloat(DollarRemMon);
				if (SelectedWeb.equalsIgnoreCase("Pro")) {
					LOGS.info(Thread.currentThread() +"Verifying the monthly investment amount of the package");
					ExpRes = "Monthly investment amount of the package should be $228.99";
					if (TotMonthly == 228.99) {
						LOGS.info(Thread.currentThread() +"Monthly package price matches");
						ImageName = "MonthlyTotal";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Monthly investment amount of the package is: " + Monthly;
						Status = "Pass";
						ExportResults.exportTestResult("Monthly investment amount Verification for the package,"
								+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				}
				if (SelectedWeb.equalsIgnoreCase("Standard")) {
					LOGS.info(Thread.currentThread() +"Verifying the monthly investment amount of the package");
					ExpRes = "Monthly investment amount of the package should be $198.99";
					if (TotMonthly == 198.99) {
						LOGS.info(Thread.currentThread() +"Monthly package price matches");
						ImageName = "MonthlyTotal";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Monthly investment amount of the package is: " + Monthly;
						Status = "Pass";
						BundlePriceValidationStatus = Status;
						ExportResults.exportTestResult("Monthly investment amount Verification for the package,"
								+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				}
				if (Prods[i].equalsIgnoreCase("Diversified Digital (no website)") || Prods[i].contains("Social")) {
					LOGS.info(Thread.currentThread() +"Verifying the monthly investment amount of the package");
					ExpRes = "Monthly investment amount of the package should be $129";
					if (TotMonthly == 129.00) {
						LOGS.info(Thread.currentThread() +"Monthly package price matches");
						ImageName = "MonthlyTotal";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Monthly investment amount of the package is: " + Monthly;
						Status = "Pass";
						BundlePriceValidationStatus = Status;
						ExportResults.exportTestResult("Monthly investment amount Verification for the package,"
								+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						BundlePriceValidationStatus = Status;
					}
				}
			}
			// }
		}
		return BundlePriceValidationStatus;
	}

	// Upsert for CPQ orders - Verification of Subscriptions status & Go Live date
	// capture After fulfillment
	public  void subscriptionsValidation(String SalesRep, String quoteNum, String planName) throws Throwable {
		// TODO Auto-generated method stub
		try {

			LOGS.info(Thread.currentThread() +"Calling subscriptionsValidation method");

			driver.navigate().to("https://hibu--full01.cs54.my.salesforce.com/");
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			Thread.sleep(4000);

			LOGS.info(Thread.currentThread() +"Clicking on Account Search button");
			SLocator("searchInputField").click();
			SLocator("searchInputField").clear();
			SLocator("searchInputField").sendKeys(quoteNum);
			Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"Quote Number Entered in the Account Search Field");
			SLocator("searchButton").click();
			Thread.sleep(4000);

			String quoteValue = SLocator("quoteNumHypLink").getText();

			if (quoteValue.equalsIgnoreCase(quoteNum)) {
				SLocator("quoteNumHypLink").click();
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				Thread.sleep(4000);

				String accountNameQuotePage = SLocator("accountNameHypLinkQuotePage").getText();
				SLocator("accountNameHypLinkQuotePage").click();
				driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
				LOGS.info(Thread.currentThread() +"Account Name: " + accountNameQuotePage);
				Thread.sleep(3000);

				String contractCount = SLocator("contractsCount").getText();
				ExpRes = "Capture Available Contracts for the Account";
				ImageName = "ContractCountInfo";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				if (contractCount.equalsIgnoreCase("[0]")) {
					LOGS.info(Thread.currentThread() +"No Contracts for this Quote Number");
					ImageName = "ContractCountInfo";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";

					ActRes = "No Contracts available for the Current Account";
					ExportResults.exportTestResult("Contracts Availability Validation," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);
					count = count + 1;
					driver.quit();
				} else if (contractCount.equalsIgnoreCase("[1]")) {
					LOGS.info(Thread.currentThread() +"Contracts is available for the Quote Number-" + quoteValue);

					ImageName = "ContractCountInfo";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ActRes = "Single Contract Available for the Current Account";
					ExportResults.exportTestResult("Contracts Availability Validation," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);

					SLocator("contractsHypLink").click();
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					LOGS.info(Thread.currentThread() +"Clicked on Contracts Link");
					Thread.sleep(3000);

					contractsInfoVerification();

					String subscriptionsCount = SLocator("subscriptionsCount").getText();
					LOGS.info(Thread.currentThread() +subscriptionsCount);
					ImageName = "SubScriptionInfo";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					int expCount = 0;
					// if((planName.equalsIgnoreCase("Search (A la carte)")) ||
					// planName.equalsIgnoreCase("Search - Guaranteed Clicks"))
					// {
					// if (planName.equalsIgnoreCase("Search - Guaranteed Clicks")) {
					if (planName.equalsIgnoreCase(OR.getProperty("08"))) {
						expCount = 2;
						ExpRes = "Expected Subscriptions Count for " + planName + " is " + expCount;
						if (subscriptionsCount.equalsIgnoreCase("[2]")) {
							LOGS.info(Thread.currentThread() +","+expCount + " Subscriptions available for " + planName);
							Status = "Pass";
							ActRes = expCount + " Subscriptions available for " + planName + " and it's expected";
						} else {
							Status = "Fail";
							ActRes = "Subscriptions count is mismatching as " + subscriptionsCount;
							LOGS.info(Thread.currentThread() +"Subscriptions count is mismatching as " + subscriptionsCount);
						}
					} else if (planName.equalsIgnoreCase(OR.getProperty("01"))) {
						expCount = 1;
						ExpRes = "Expected Subscriptions Count for " + planName + " is " + expCount;
						if (subscriptionsCount.equalsIgnoreCase("[1]")) {
							LOGS.info(Thread.currentThread() +","+expCount + " Subscriptions available for " + planName);
							Status = "Pass";
							ActRes = expCount + " Subscriptions available for " + planName + " and it's expected";
						} else {
							Status = "Fail";
							ActRes = "Subscriptions count is mismatching as " + subscriptionsCount;
							LOGS.info(Thread.currentThread() +"Subscriptions count is mismatching as " + subscriptionsCount);
						}
					}
					// else if (planName.equalsIgnoreCase("Reviews")) {
					else if (planName.equalsIgnoreCase(OR.getProperty("07"))) {
						expCount = 1;
						ExpRes = "Expected Subscriptions Count for " + planName + " is " + expCount;
						if (subscriptionsCount.equalsIgnoreCase("[1]")) {
							LOGS.info(Thread.currentThread() +","+expCount + " Subscriptions available for " + planName);
							Status = "Pass";
							ActRes = expCount + " Subscriptions available for " + planName + " and it's expected";
						} else {
							Status = "Fail";
							ActRes = "Subscriptions count is mismatching as " + subscriptionsCount;
							LOGS.info(Thread.currentThread() +"Subscriptions count is mismatching as " + subscriptionsCount);
						}
					} else if (planName.equalsIgnoreCase(OR.getProperty("11"))) {
						expCount = 2;
						ExpRes = "Expected Subscriptions Count for " + planName + " is " + expCount;
						LOGS.info(Thread.currentThread() +ExpRes);
						if (subscriptionsCount.equalsIgnoreCase("[2]")) {
							LOGS.info(Thread.currentThread() +","+expCount + " Subscriptions available for " + planName);
							Status = "Pass";
							ActRes = expCount + " Subscriptions available for " + planName + " and it's expected";
						} else {
							subscriptionsCount = subscriptionsCount.replace("[", "");
							subscriptionsCount = subscriptionsCount.replace("]", "");
							int subSciptionCountInt = Integer.parseInt(subscriptionsCount);
							LOGS.info(Thread.currentThread() +"Subscriptions Count: " + subscriptionsCount);
							if (subSciptionCountInt > 2) {
								// ArrayList<String> prodList = new
								// ArrayList<String>();

								for (int i = 1; i <= subSciptionCountInt; i++) {

									LOGS.info(Thread.currentThread() +"Subscriptions" + i);
									String subscriptionsNumbPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']/a)["
											+ i + "]";
									subscriptionsNumb = driver.findElement(By.xpath(subscriptionsNumbPath)).getText();
									String prodNameSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[1])["
											+ i + "]";
									prodNameSubscriptions = driver.findElement(By.xpath(prodNameSubscriptionsPath))
											.getText();
									String statusSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[2])["
											+ i + "]";
									statusSubscriptions = driver.findElement(By.xpath(statusSubscriptionsPath))
											.getText();

									LOGS.info(Thread.currentThread() +"Subscriptions Number: " + subscriptionsNumb);
									LOGS.info(Thread.currentThread() +"Subscriptions Product Name: " + prodNameSubscriptions);
									LOGS.info(Thread.currentThread() +"Subscriptions Status: " + statusSubscriptions);
									goLiveDateSubscriptions = "";

									if (statusSubscriptions.equalsIgnoreCase("Active")) {

										String goLiveDateSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[4])["
												+ i + "]";
										goLiveDateSubscriptions = driver
												.findElement(By.xpath(goLiveDateSubscriptionsPath)).getText();
										// goLiveDateSubscriptions=SLocator("goLiveDateSubscriptionsPath").getText();

										LOGS.info(Thread.currentThread() +"Subscription Go Live Date: " + goLiveDateSubscriptions);
										ActRes = "\tSubscription Number: " + subscriptionsNumb
												+ "\n\tSubscription Product Name: " + prodNameSubscriptions
												+ "\n\tSubscription Status: " + statusSubscriptions
												+ "\n\tGo Live Date:" + goLiveDateSubscriptions;
										if (statusSubscriptions.equalsIgnoreCase("Active")) {// ||
											// planName.equalsIgnoreCase("Search
											// -
											// Guaranteed
											// Clicks"))
											// {
											Status = "Pass";
										} else // if((planName.equalsIgnoreCase("Search
											// - Guaranteed Clicks")) &&
											// (!statusSubscriptions.equalsIgnoreCase("Active")))
											// {//||
											// planName.equalsIgnoreCase("Search
											// - Guaranteed Clicks"))
										{
											Status = "Fail";
										}
									} else {
										ActRes = "\n\tSubscription Number: " + subscriptionsNumb
												+ "\n\tSubscription Product Name: " + prodNameSubscriptions
												+ "\n\tSubscription Status: " + statusSubscriptions;
									}

									ExpRes = "Capture Subscription details for the product " + prodNameSubscriptions;

									if (i == 1) {
										ExportResults.exportTestResult("Subscriptions Info," + ExpRes + "," + ActRes
												+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
										allProdName = allProdName + prodNameSubscriptions;
									} else {
										ExportResults.exportTestResult("Subscriptions Info," + ExpRes + "," + ActRes
												+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
										allProdName = allProdName + "-" + prodNameSubscriptions;
									}
									// prodList.add(prodNameSubscriptions);

								}
								LOGS.info(Thread.currentThread() +allProdName);
								ExpRes = "Verify the product - Social (a la carte) and Social are available for the Account";
								ActRes = "Available products: " + allProdName;
								if (allProdName.contains("Social (a la carte)-Social")) {
									Status = "Pass";
								} else {
									Status = "Fail";
								}
								ExportResults.exportTestResult("Product verification in Live Subscriptions," + ExpRes
										+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

							} else {
								Status = "Fail";
								ExpRes = "Subscriptions count should be 2 or more than 2 ";
								ActRes = "Subscriptions count is mismatching as " + subscriptionsCount;
								LOGS.info(Thread.currentThread() +"Subscriptions count is mismatching as " + subscriptionsCount);
								ExportResults.exportTestResult("Product count verification in Live Subscriptions,"
										+ ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

							}

							subScriptionVerificationFlag = "True";
						}
					} else if (planName.equalsIgnoreCase("Social Enhanced Solution")) {
						expCount = 7;
						SLocator("subscriptionsCount").click();
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						Thread.sleep(4000);
						SLocator("ShowMoreLiveSubscriptionLink").click();
						LOGS.info(Thread.currentThread() +"Clicked on Show 2 More Link");
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						Thread.sleep(4000);
						List<WebElement> rows = driver.findElements(By.xpath(
								"(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']/a)"));
						int rowcount = rows.size();
						LOGS.info(Thread.currentThread() +"Total count: " + rowcount);
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						Thread.sleep(4000);

						ExpRes = "Expected Subscriptions Count for " + planName + " is " + expCount;
						LOGS.info(Thread.currentThread() +ExpRes);
						if (rowcount == 7) {
							// if(subscriptionsCount.equalsIgnoreCase("7")) {
							LOGS.info(Thread.currentThread() +","+expCount + " Subscriptions available for " + planName);
							Status = "Pass";
							ActRes = rowcount + " Subscriptions available for " + planName + " and it's expected";
							expCount = rowcount;
						} else {
							/*
							 * subscriptionsCount=subscriptionsCount.replace( "[", "");
							 * subscriptionsCount=subscriptionsCount.replace( "]", ""); int
							 * subSciptionCountInt=Integer.parseInt( subscriptionsCount);
							 * LOGS.info(Thread.currentThread() +"Subscriptions Count: " +subscriptionsCount);
							 */
							if (rowcount > 7) {
								// ArrayList<String> prodList = new
								// ArrayList<String>();

								for (int i = 1; i <= rowcount; i++) {

									LOGS.info(Thread.currentThread() +"Subscriptions" + i);
									String subscriptionsNumbPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']/a)["
											+ i + "]";
									subscriptionsNumb = driver.findElement(By.xpath(subscriptionsNumbPath)).getText();
									String prodNameSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[1])["
											+ i + "]";
									prodNameSubscriptions = driver.findElement(By.xpath(prodNameSubscriptionsPath))
											.getText();
									String statusSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[2])["
											+ i + "]";
									statusSubscriptions = driver.findElement(By.xpath(statusSubscriptionsPath))
											.getText();

									LOGS.info(Thread.currentThread() +"Subscriptions Number: " + subscriptionsNumb);
									LOGS.info(Thread.currentThread() +"Subscriptions Product Name: " + prodNameSubscriptions);
									LOGS.info(Thread.currentThread() +"Subscriptions Status: " + statusSubscriptions);
									goLiveDateSubscriptions = "";

									if (statusSubscriptions.equalsIgnoreCase("Active")) {

										String goLiveDateSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[4])["
												+ i + "]";
										goLiveDateSubscriptions = driver
												.findElement(By.xpath(goLiveDateSubscriptionsPath)).getText();
										// goLiveDateSubscriptions=SLocator("goLiveDateSubscriptionsPath").getText();

										LOGS.info(Thread.currentThread() +"Subscription Go Live Date: " + goLiveDateSubscriptions);
										ActRes = "\tSubscription Number: " + subscriptionsNumb
												+ "\n\tSubscription Product Name: " + prodNameSubscriptions
												+ "\n\tSubscription Status: " + statusSubscriptions
												+ "\n\tGo Live Date:" + goLiveDateSubscriptions;
										if (statusSubscriptions.equalsIgnoreCase("Active")) {// ||
											// planName.equalsIgnoreCase("Search
											// -
											// Guaranteed
											// Clicks"))
											// {
											Status = "Pass";
										} else // if((planName.equalsIgnoreCase("Search
											// - Guaranteed Clicks")) &&
											// (!statusSubscriptions.equalsIgnoreCase("Active")))
											// {//||
											// planName.equalsIgnoreCase("Search
											// - Guaranteed Clicks"))
										{
											if (!prodNameSubscriptions.equalsIgnoreCase("RCF")) {
												Status = "Fail";
											}
										}
									} else {
										ActRes = "\n\tSubscription Number: " + subscriptionsNumb
												+ "\n\tSubscription Product Name: " + prodNameSubscriptions
												+ "\n\tSubscription Status: " + statusSubscriptions;
									}

									ExpRes = "Capture Subscription details for the product " + prodNameSubscriptions;

									if (i == 1) {
										ExportResults.exportTestResult("Subscriptions Info," + ExpRes + "," + ActRes
												+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
										allProdName = allProdName + prodNameSubscriptions;
									} else {
										ExportResults.exportTestResult("Subscriptions Info," + ExpRes + "," + ActRes
												+ "," + Status + "," + "No Image",pr.Resultsfolderpath);
										allProdName = allProdName + "-" + prodNameSubscriptions;
									}

								}
								LOGS.info(Thread.currentThread() +allProdName);
								ExpRes = "Verify the product - Social (a la carte) and Social are available for the Account";
								ActRes = "Available products: " + allProdName;
								if (allProdName.contains("Social (a la carte)-Social")) {
									Status = "Pass";
								} else {
									Status = "Fail";
								}
								ExportResults.exportTestResult("Product verification in Live Subscriptions," + ExpRes
										+ "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

							} else {
								Status = "Fail";
								ExpRes = "Subscriptions count should be 2 or more than 2 ";
								ActRes = "Subscriptions count is mismatching as " + subscriptionsCount;
								LOGS.info(Thread.currentThread() +"Subscriptions count is mismatching as " + subscriptionsCount);
								ExportResults.exportTestResult("Product count verification in Live Subscriptions,"
										+ ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

							}

							subScriptionVerificationFlag = "True";
						}
					}

					if (subScriptionVerificationFlag.equalsIgnoreCase("false")) {
						SLocator("subscriptionsHypLink").click();
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						LOGS.info(Thread.currentThread() +"Clicked on Subscriptions Link");
						Thread.sleep(3000);

						ImageName = "SubScriptionInfo";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						for (int i = 1; i <= expCount; i++) {
							String subscriptionsNumbPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']/a)["
									+ i + "]";
							subscriptionsNumb = driver.findElement(By.xpath(subscriptionsNumbPath)).getText();
							String prodNameSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[1])["
									+ i + "]";
							prodNameSubscriptions = driver.findElement(By.xpath(prodNameSubscriptionsPath)).getText();
							String statusSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[2])["
									+ i + "]";
							statusSubscriptions = driver.findElement(By.xpath(statusSubscriptionsPath)).getText();

							LOGS.info(Thread.currentThread() +"Subscriptions Number: " + subscriptionsNumb);
							LOGS.info(Thread.currentThread() +"Subscriptions Product Name: " + prodNameSubscriptions);
							LOGS.info(Thread.currentThread() +"Subscriptions Status: " + statusSubscriptions);
							goLiveDateSubscriptions = "";
							// goLiveDateSubscriptions =
							// "NoGoLiveDateForPending";
							if (statusSubscriptions.equalsIgnoreCase("Active")) {

								String goLiveDateSubscriptionsPath = "(//h3[text()='Live Subscriptions']//ancestor::div[contains(@class,'customnotabBlock')]//child::th[@scope='row']//following-sibling::td[4])["
										+ i + "]";
								goLiveDateSubscriptions = driver.findElement(By.xpath(goLiveDateSubscriptionsPath))
										.getText();
								// goLiveDateSubscriptions=SLocator("goLiveDateSubscriptionsPath").getText();

								LOGS.info(Thread.currentThread() +"Subscription Go Live Date: " + goLiveDateSubscriptions);
								ActRes = "\n\tSubscription Number: " + subscriptionsNumb
										+ "\n\tSubscription Product Name: " + prodNameSubscriptions
										+ "\n\tSubscription Status: " + statusSubscriptions + "\n\tGo Live Date:"
										+ goLiveDateSubscriptions;
								if (statusSubscriptions.equalsIgnoreCase("Active")) {
									Status = "Pass";
								} else {

									Status = "Fail";
								}
							} else {
								if (prodNameSubscriptions.equalsIgnoreCase("RCF")) {
									Status = "Pass";
								} else {
									Status = "Fail";
								}
								ActRes = "\n\tSubscription Number: " + subscriptionsNumb
										+ "\n\tSubscription Product Name: " + prodNameSubscriptions
										+ "\n\tSubscription Status: " + statusSubscriptions;
							}

							ExpRes = "Capture Subscription details for the product " + prodNameSubscriptions;

							if (i == 1) {
								ExportResults.exportTestResult(
										"Subscriptions Info," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								allProdName = prodNameSubscriptions;
								allProdInfo = subscriptionsNumb + "_" + prodNameSubscriptions + "_"
										+ statusSubscriptions + "_" + goLiveDateSubscriptions;
							} else {
								ExportResults.exportTestResult("Subscriptions Info," + ExpRes + "," + ActRes + ","
										+ Status + "," + "No Image",pr.Resultsfolderpath);
								allProdName = allProdName + "-" + prodNameSubscriptions;
								allProdInfo = allProdInfo + "->" + subscriptionsNumb + "_" + prodNameSubscriptions + "_"
										+ statusSubscriptions + "_" + goLiveDateSubscriptions;

							}
						}

						LOGS.info(Thread.currentThread() +"All Product Names: " + allProdName);
						allProdInfo = allProdInfo.replace("->", "\n");
						LOGS.info(Thread.currentThread() +"All Product Info:\n" + allProdInfo);

					}
					if (planName.equalsIgnoreCase("Social Enhanced Solution")) {
						ExpRes = "Verify the products Social Enhanced Solution-Social-Display-Presence Foundation-Listings Management-Reviews-Reputation are available for the Account";
						ActRes = "Available products: " + allProdName;
						if (allProdName.contains("Social Enhanced Solution") && allProdName.contains("Social-")
								&& allProdName.contains("Display-") && allProdName.contains("Presence Foundation")
								&& allProdName.contains("Listings Management-") && allProdName.contains("Reviews-")
								&& allProdName.contains("Reputation")) {
							if (allProdInfo.contains("Pending")) {
								Status = "Fail";
								JiraStatus = "Failed";
							} else {
								Status = "Pass";
								JiraStatus = "Passed";
							}
						} else {
							Status = "Fail";
						}
						LOGS.info(Thread.currentThread() +"Status : " + Status);
					}
					// else if (planName.equalsIgnoreCase("Search - Guaranteed Clicks")) {
					else if (planName.equalsIgnoreCase(OR.getProperty("08"))) {
						ExpRes = "Verify the products Search - Guaranteed Clicks-RCF are available for the Account";
						ActRes = "Available products: " + allProdName;
						if (allProdName.contains("Search - Guaranteed Clicks") && allProdName.contains("RCF")) {
							if (allProdInfo.contains("Pending")) {
								Status = "Fail";
								JiraStatus = "Failed";
								ActRes = ActRes + ". One of the Status is Still in PENDING";
							} else {
								Status = "Pass";
								JiraStatus = "Passed";
							}
						} else {
							Status = "Fail";
						}
						LOGS.info(Thread.currentThread() +"Status : " + Status);
					}
					ExportResults.exportTestResult("Product verification in Live Subscriptions," + ExpRes + "," + ActRes
							+ "," + Status + "," + "No Image",pr.Resultsfolderpath);

				} else {
					LOGS.info(Thread.currentThread() +"More than One Contracts availble for this Quote Number");
					ImageName = "ContractCountInfo";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";

					ExpRes = "Capture Available Contracts for the Account";
					ActRes = "Multi Contracts Available for the Current Account";
					ExportResults.exportTestResult("Contracts Availability Validation," + ExpRes + "," + ActRes + ","
							+ Status + "," + ImgName,pr.Resultsfolderpath);

					driver.quit();
				}

			} else {
				LOGS.info(Thread.currentThread() +
						"SF Quote Number- " + quoteValue + " is not matching with expected Quote Number- " + quoteNum);
			}

			driver.navigate().back();
			LOGS.info(Thread.currentThread() +"subscriptionsValidation method completed");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in subscriptionsValidation");
			Status = "Fail";
			ImageName = "SubScriptionInfoError";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Subscription method should execute successfully";
			ActRes = "Error in subscriptionsValidation method";
			ExportResults.exportTestResult(
					"Subscription Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}

	}

	public  void contractsInfoVerification() throws Throwable {
		// TODO Auto-generated method stub
		try {

			LOGS.info(Thread.currentThread() +"Calling contractsInfoVerification method");

			String contractNumbAcctInfo = SLocator("contractNumbAcctInfo").getText();
			String contractStartDateAcctInfo = SLocator("contractStartDateAcctInfo").getText();
			String contractEndDateAcctInfo = SLocator("contractEndDateAcctInfo").getText();
			String contractStatusAcctInfo = SLocator("contractStatusAcctInfo").getText();

			ImageName = "ContractsInfoAccountDetails";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Contract Number : " + contractNumbAcctInfo);
			LOGS.info(Thread.currentThread() +"Contract Start Date: " + contractStartDateAcctInfo);
			LOGS.info(Thread.currentThread() +"Contract End Date: " + contractEndDateAcctInfo);
			LOGS.info(Thread.currentThread() +"Contract Status: " + contractStatusAcctInfo);
			Status = "Pass";

			ExpRes = "Capture contract details: \nContract-Number \nContract-StartDate \nContract-EndDate \nContract-Status";
			ActRes = "\tContract-Number: " + contractNumbAcctInfo + "\n\tContract-StartDate: "
					+ contractStartDateAcctInfo + "\n\tContract-EndDate: " + contractEndDateAcctInfo
					+ "\n\tContract-Status: " + contractStatusAcctInfo;
			ExportResults.exportTestResult("Contract Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			SLocator("contractNumbAcctInfo").click();
			LOGS.info(Thread.currentThread() +"Clicked on Contract Number");

			if (contractStatusAcctInfo.equalsIgnoreCase("Activated")) {
				Status = "Pass";
				ActRes = "Contract Status is matching as 'Activated'";
			} else {
				Status = "Fail";
				ActRes = "Contract Status is mismatching as " + contractStatusAcctInfo + " should be Activated Status";
			}
			ExpRes = "Contract Status should be 'Activated'";

			ExportResults.exportTestResult(
					"Contracts Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(3000);

			LOGS.info(Thread.currentThread() +"contractsInfoVerification method completed");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in contractsInfoVerification");
			Status = "Fail";
			ImageName = "ContractsInfoCatch";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Contracts  method should execute successfully";
			ActRes = "Error in contractsInfoVerification method";
			ExportResults
			.exportTestResult("Contracts Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}
	}

	public  void SFLogin() throws Exception {
		try {
			LOGS.info(Thread.currentThread() +"Calling SFLogin method");
			Properties OR = pr.loadPropertiesFiles("Order");

			if (SalesRepType.equalsIgnoreCase("Tsales")) {
				SalesRep = OR.getProperty("TSales");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("Premise")) {
				SalesRep = OR.getProperty("Premise");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("SPE")) {
				SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "SfdcSpePwd");
			} else if (SalesRepType.equalsIgnoreCase("CSRep")) {
				SalesRep = OR.getProperty("CSRep");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("DSCRep")) {
				SalesRep = OR.getProperty("DSCRep");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("NonCpqTsale")) {
				SFLoginResult = SalesforceLogin("tSalesRepUserName", "tSalesRepPassWord");
			} else if (SalesRepType.equalsIgnoreCase("NonCpqPremiseRep")) {
				SFLoginResult = SalesforceLogin("PremiseRepUserName", "PremiseRepPassWord");
			} else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
				SalesRep = OR.getProperty("OpsWizard");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else {
				LOGS.info(Thread.currentThread() +"Select the proper Rep name. Current Sales Rep is :" + SalesRepType);
				count = count + 1;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in SFLogin method");
			Status = "Fail";
			ImageName = "SFLoginError";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "SFLogin method should execute successfully";
			ActRes = "Error in SFLogin method";
			ExportResults
			.exportTestResult("SFLogin Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}
	}

	public  String getInput() throws Exception {

		LOGS.info(Thread.currentThread() +"Executing getInput Keyword Started");
		try {

			String path = regardingfilesPath+"\\Order.properties";
			LOGS.info(Thread.currentThread() +path);
			Properties OR = pr.loadPropertiesFiles("Order");

			LOGS.info(Thread.currentThread() +OR.getProperty("ExcelPathCPQDay2"));

			String excelPath = OR.getProperty("ExcelPathCPQDay2");

			LOGS.info(Thread.currentThread() +"Excel Path:- " + excelPath);
			FileInputStream fileInput = new FileInputStream(excelPath);
			XSSFWorkbook finalWorkbook = new XSSFWorkbook(fileInput);
			XSSFSheet finalSheet = finalWorkbook.getSheetAt(0);
			int rowCount = finalSheet.getLastRowNum();
			LOGS.info(Thread.currentThread() +","+rowCount);

			for (int i = 1; i <= rowCount; i++) {
				Row row = finalSheet.getRow(i);
				LOGS.info(Thread.currentThread() +"Checking data from row " + i);

				if (((row.getCell(0).getStringCellValue()).trim()).equals("QuoteNumber")) {
					LOGS.info(Thread.currentThread() +"Iteration started");
					row = finalSheet.getRow(i + 1);
					{
						String QuoteNumber = (row.getCell(0).getStringCellValue()).trim();
						// LOGS.info(Thread.currentThread() +"Quote Number:" +QuoteNumber);
						String ProductName = (row.getCell(1).getStringCellValue()).trim();
						// LOGS.info(Thread.currentThread() +"Product Name:" +ProductName);
						return QuoteNumber + "_" + ProductName;
					}
				}

			}

			fileInput.close();
			LOGS.info(Thread.currentThread() +"Executing getInput Keyword Complete");
		}

		catch (Exception t) {
			t.printStackTrace();
			return "Fail";
		}

		return QuoteNumber + "_" + ProductName;
	}

	public void BillOrFulfilCheck(String[] Prod, String[] Plan, String Others) throws Exception {
		
		LOGS.info(Thread.currentThread() +"Bill and Fulfill check verification Started");
		String[] OtherSKUs = Others.split(",");
		LOGS.info(Thread.currentThread() +"Navigating to the Products Page ");
		WebElement ProductsTab = driver.findElement(By.cssSelector("#Product2_Tab>a"));
		JavascriptExecutor jsAT = (JavascriptExecutor) driver;
		jsAT.executeScript("arguments[0].click();", ProductsTab);
		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
		String View = "Joe - All Hibu products";
		Select ProdView = new Select(driver.findElement(By.xpath("//select[@id='fcf_product']")));
		if (ProdView.getFirstSelectedOption().getText().equalsIgnoreCase(View)) {
			LOGS.info(Thread.currentThread() +"View already Selected");
			driver.findElement(
					By.xpath("//h3[text()='Product Views']/following-sibling::div/descendant::input[@title='Go!']"))
			.click();
			LOGS.info(Thread.currentThread() +"Clicked on Go Button");
		} else {
			LOGS.info(Thread.currentThread() +"Selecting desired view");
			ProdView.selectByVisibleText(View);
			LOGS.info(Thread.currentThread() +"View Selected");
		}
		for (int i = 0; i < Prod.length; i++) {
			String CurrentProd = Prod[i], BillFlag = null, FulfilFlag = null, ProdBill, ProdFulfill;
			LOGS.info(Thread.currentThread() +"Current Product is: " + CurrentProd);
			ProdBill = SLocatorDynamic("ProdBill1_" + Prod[i] + "_ProdBill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Product Bill flag status for " + Prod[i] + " is: " + ProdBill);
			ProdFulfill = SLocatorDynamic("ProdFulfill1_" + Prod[i] + "_ProdFulfill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Product Fulfil flag status for " + Prod[i] + " is: " + ProdFulfill);
			LOGS.info(Thread.currentThread() +"Input Excel Path is: " + ExcelPath);
			FileInputStream fis = new FileInputStream(ExcelPath);
			Workbook wbk = new XSSFWorkbook(fis);
			Sheet sht = wbk.getSheet("Flags");
			int rowCount = sht.getLastRowNum() - sht.getFirstRowNum();
			LOGS.info(Thread.currentThread() +"Row Count: " + rowCount);
			for (int m = 1; m <= rowCount; m++) {
				Row row = sht.getRow(m);
				Cell cell = row.getCell(0);
				String cellValue = cell.getStringCellValue();
				LOGS.info(Thread.currentThread() +"Cell Value is: " + cellValue);
				if (cellValue.equalsIgnoreCase(CurrentProd)) {
					Cell cell1 = row.getCell(1);
					BillFlag = cell1.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Flag status: " + BillFlag);
					Cell cell2 = row.getCell(2);
					FulfilFlag = cell2.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Fulfil Flag Status: " + FulfilFlag);
				}
			}
			fis.close();
			if (BillFlag.equalsIgnoreCase(ProdBill)) {
				LOGS.info(Thread.currentThread() +"Bill Flag matches");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + ProdBill + " for " + Prod[i]
						+ " on Product page of SF matches the expected flag status of " + BillFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Bill Flag does not match");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + ProdBill + " for " + Prod[i]
						+ " on Product page of SF does not match the expected flag status of " + BillFlag;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}
			if (FulfilFlag.equalsIgnoreCase(ProdFulfill)) {
				LOGS.info(Thread.currentThread() +"Fulfil Flag matches");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + ProdFulfill + " for " + Prod[i]
						+ " on Product page of SF matches the expected flag status of " + FulfilFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Fulfil Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Fulfil Flag does not match");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + ProdFulfill + " for " + Prod[i]
						+ " on Product page of SF does not match the expected flag status of " + FulfilFlag;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}

		}
		for (int j = 0; j < Plan.length; j++) {
			String CurrentPlan = Plan[j], BillFlag = null, FulfilFlag = null, PlanBill, PlanFulfill;
			LOGS.info(Thread.currentThread() +"Current Plan is: " + CurrentPlan);
			PlanBill = SLocatorDynamic("ProdBill1_" + Plan[j] + "_ProdBill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Plan Bill flag status for " + Plan[j] + " is: " + PlanBill);
			PlanFulfill = SLocatorDynamic("ProdFulfill1_" + Plan[j] + "_ProdFulfill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Plan Fulfil flag status for " + Plan[j] + " is: " + PlanFulfill);
			LOGS.info(Thread.currentThread() +"Input Excel Path is: " + ExcelPath);
			FileInputStream fis = new FileInputStream(ExcelPath);
			Workbook wbk = new XSSFWorkbook(fis);
			Sheet sht = wbk.getSheet("Flags");
			int rowCount = sht.getLastRowNum() - sht.getFirstRowNum();
			LOGS.info(Thread.currentThread() +"Row Count: " + rowCount);
			for (int n = 1; n <= rowCount; n++) {
				Row row = sht.getRow(n);
				Cell cell = row.getCell(0);
				String cellValue = cell.getStringCellValue();
				LOGS.info(Thread.currentThread() +"Cell Value is: " + cellValue);
				if (cellValue.equalsIgnoreCase(CurrentPlan)) {
					Cell cell1 = row.getCell(1);
					BillFlag = cell1.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Flag status: " + BillFlag);
					Cell cell2 = row.getCell(2);
					FulfilFlag = cell2.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Fulfil Flag Status: " + FulfilFlag);
				}
			}
			fis.close();
			if (BillFlag.equalsIgnoreCase(PlanBill)) {
				LOGS.info(Thread.currentThread() +"Bill Flag matches");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + PlanBill + " for " + Plan[j]
						+ " on Product page of SF matches the expected flag status of " + BillFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Bill Flag does not match");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + PlanBill + " for " + Plan[j]
						+ " on Product page of SF does not match the expected flag status of " + BillFlag;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}
			if (FulfilFlag.equalsIgnoreCase(PlanFulfill)) {
				LOGS.info(Thread.currentThread() +"Fulfil Flag matches");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + PlanBill + " for " + Plan[j]
						+ " on Product page of SF matches the expected flag status of " + FulfilFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Fulfil Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Fulfil Flag does not match");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + PlanBill + " for " + Plan[j]
						+ " on Product page of SF does not match the expected flag status of " + FulfilFlag;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Fulfil Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}
		}
		for (int k = 0; k < OtherSKUs.length; k++) {
			String OtherSKU = OtherSKUs[k], BillFlag = null, FulfilFlag = null, OtherBill, OtherFulfill;
			LOGS.info(Thread.currentThread() +"Current Plan is: " + OtherSKU);
			OtherBill = SLocatorDynamic("ProdBill1_" + OtherSKUs[k] + "_ProdBill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Other SKUs Bill flag status for " + OtherSKUs[k] + " is: " + OtherBill);
			OtherFulfill = SLocatorDynamic("ProdFulfill1_" + OtherSKUs[k] + "_ProdFulfill2").getAttribute("title");
			LOGS.info(Thread.currentThread() +"Other SKUs Fulfil flag status for " + OtherSKUs[k] + " is: " + OtherFulfill);
			LOGS.info(Thread.currentThread() +"Input Excel Path is: " + ExcelPath);
			FileInputStream fis = new FileInputStream(ExcelPath);
			Workbook wbk = new XSSFWorkbook(fis);
			Sheet sht = wbk.getSheet("Flags");
			int rowCount = sht.getLastRowNum() - sht.getFirstRowNum();
			LOGS.info(Thread.currentThread() +"Row Count: " + rowCount);
			for (int p = 1; p <= rowCount; p++) {
				Row row = sht.getRow(p);
				Cell cell = row.getCell(0);
				String cellValue = cell.getStringCellValue();
				LOGS.info(Thread.currentThread() +"Cell Value is: " + cellValue);
				if (cellValue.equalsIgnoreCase(OtherSKU)) {
					Cell cell1 = row.getCell(1);
					BillFlag = cell1.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Flag status: " + BillFlag);
					Cell cell2 = row.getCell(2);
					FulfilFlag = cell2.getStringCellValue();
					LOGS.info(Thread.currentThread() +"Expected Fulfil Flag Status: " + FulfilFlag);
				}
			}
			fis.close();
			if (BillFlag.equalsIgnoreCase(OtherBill)) {
				LOGS.info(Thread.currentThread() +"Bill Flag matches");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + OtherBill + " for " + OtherSKUs[k]
						+ " on Product page of SF matches the expected flag status of " + BillFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Bill Flag matches");
				ExpRes = "Bill Flag on Products page of SF and Expected flag status should match";
				ActRes = "Bill Flag of " + OtherBill + " for " + OtherSKUs[k]
						+ " on Product page of SF matches the expected flag status of " + BillFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}
			if (FulfilFlag.equalsIgnoreCase(OtherFulfill)) {
				LOGS.info(Thread.currentThread() +"Fulfil Flag matches");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + OtherFulfill + " for " + OtherSKUs[k]
						+ " on Product page of SF matches the expected flag status of " + FulfilFlag;
				Status = "Pass";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +"Fulfil Flag does not match");
				ExpRes = "Fulfil Flag on Products page of SF and Expected flag status should match";
				ActRes = "Fulfil Flag of " + OtherFulfill + " for " + OtherSKUs[k]
						+ " on Product page of SF does not match the expected flag status of " + FulfilFlag;
				Status = "Fail";
				ExportResults.exportTestResult(
						"Bill Flag Status Verification," + ExpRes + "," + ActRes + "," + Status + "," + "No Iamage",pr.Resultsfolderpath);
			}
		}
		SFLoginAsUser("Premise");
		SalesRepType = "Premise";

	}

	public  String PaymentWorkaround() {
		try {

			driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Edit']")).click();
			Thread.sleep(3000);
			driver.findElement(By.xpath("//label[text()='Payment Verified']//following::td[1]/input")).click();
			driver.findElement(By.xpath("//td[@id='topButtonRow']//input[@title='Save']")).click();
			Thread.sleep(3000);
			paymntRslt = "Pass";

		} catch (Exception e) {
			paymntRslt = "Fail";
			e.printStackTrace();
		}
		return paymntRslt;

	}

	public  String fulfillmentprocessExceptSami(String productName, String quoteNum, String SalesRep, String Resultsfolderpath) throws Exception {

		pr.Resultsfolderpath = Resultsfolderpath;
        try {

                String modifiedDate;
                
                LOGS.info(Thread.currentThread() +"Sales Rep is:" +SalesRep); 
              
               if(SalesRep.equalsIgnoreCase("Admin")) {
                String caseurl = driver.getCurrentUrl();
                	try {
    	             driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
     	             driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
     	             Thread.sleep(5000);
     	            SLocator("Cases_Detailslink").click();
     	           Thread.sleep(3000);
                	//driver.findElement(By.xpath("//tr//td[text()='POS']//parent::tr//td/a")).click();
                	driver.findElement(By.xpath("(//th/a[1])[1]")).click();
                	driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
   	                driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
   	                Thread.sleep(5000);
   	                 driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
    	             driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
    	             Thread.sleep(5000);
    	             Actions actions = new Actions(driver);
                     WebElement elementLocator = driver.findElement(By.xpath("//div[@id='00N3100000GbmBk_ileinner']"));
                     actions.doubleClick(elementLocator).perform();
                     
    	           
                	Select Productstatus=new Select(driver.findElement(By.xpath("//select[@id='00N3100000GbmBk']")));
                    Productstatus.selectByVisibleText("Successful");
     				 LOGS.info(Thread.currentThread() +"Consultation Outcome is selected as Successful"); 
     				 ImageName = "ConsultationOutcome";
    	               ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
     				 driver.findElement(By.xpath("(//input[@value=' Save '])[2]")).click();
     				 //driver.navigate().back();
     				 driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
     	             driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
     	             Thread.sleep(10000);
     	            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
    	            driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
    	            Thread.sleep(5000);
    	            
  	               Status = "Pass";
  	               ExpRes = "Consultation Outcome should be Selected as Successful";
  	               ActRes = "Consultation Outcome should be Selected as Successful: "+ QuoteNumber+"- "+ productName;
  	             ExportResults.exportTestResult(

                         "Consultation Outcome:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
  	             driver.navigate().back();
  	             driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
	             driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	             Thread.sleep(10000);
	            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
                driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
                Thread.sleep(5000);
	            SLocator("Cases_Detailslink").click();
                	}
                	catch(Exception e){
                		String casecururl = driver.getCurrentUrl();
                		if(caseurl.equalsIgnoreCase(casecururl)) {
                			LOGS.info(Thread.currentThread() +"Consultation Outcome is saved with exception");
                		      ImageName = "ConsultationException";
                              ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
                		}else
                			e.printStackTrace();
                	}
                
             }else {
            	 driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
                 driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
                 Thread.sleep(5000);
            	 SLocator("Cases_Detailslink").click();
             }
             /*else {
               
                	SLocator("Cases_Detailslink").click();
                	driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
                    driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
                    Thread.sleep(5000);
                     //clicking on Consultation Complete check box
                     Actions actions1 = new Actions(driver);
                    WebElement elementLocator1 = driver.
                    		findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div//img"));
                    actions1.doubleClick(elementLocator1).perform();
                    driver.findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div[2]//input")).click();
                    LOGS.info(Thread.currentThread() +"Clicked on  Consultation Selected Check Box.");
                }
*/

               if (productName.equalsIgnoreCase("Website (a la carte)")||productName.equalsIgnoreCase("Smart Synchronized Solution")||productName.equalsIgnoreCase("Smart Online Presence Solution")

                            ||productName.equalsIgnoreCase("Presence + Performance Sync")||productName.equalsIgnoreCase("Smart Site - Pro")

                                   ||productName.equalsIgnoreCase("Smart Site - Standard")||productName.equalsIgnoreCase("Smart Site - Standard (Spread Billing)")

                                   ||productName.equalsIgnoreCase("Smart Site - Pro (Spread Billing)") || productName.equalsIgnoreCase("Smart Synchronized Solutions")
                                   || productName.equalsIgnoreCase("Smart Presence Solutions")

                           

                             ) {

            	  
            		   
            		   driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                       Thread.sleep(3000);
                       if(SalesRep.equalsIgnoreCase("Admin")) {
                	   Actions actions = new Actions(driver);
                       WebElement elementLocator = driver.findElement(By.xpath("(//td[text()='Product Set']//following::td[1])[1]"));
                       actions.doubleClick(elementLocator).perform();
                	   
                     Select ProductSet=new Select(driver.findElement(By.xpath("//td[text()='Product Set']//following::td[1]//span//select")));
                     ProductSet.selectByVisibleText("Website + Search or Display");
      				 LOGS.info(Thread.currentThread() +"Selected product type set"); 
      				
      				Select processStatus=new Select(driver.findElement(By.xpath("//td[text()='Process Status']//following::td[1]//span//select")));
      				processStatus.selectByVisibleText("Consultation Complete");
     				 LOGS.info(Thread.currentThread() +"Selected Process Status"); 
     				 
     				Select processSubStatus=new Select(driver.findElement(By.xpath("//td[text()='Process Sub Status']//following::td[1]//span//select")));
     				processSubStatus.selectByVisibleText("None");
     				 LOGS.info(Thread.currentThread() +"Selected Process Status"); 
     				 driver.findElement(By.xpath("//input[@value='OK']")).click();
                    
     				 
                     WebElement elementLocator1 = driver.
                     		findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div//img"));
                     actions.doubleClick(elementLocator1).perform();
                     driver.findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div[2]//input")).click();
                     LOGS.info(Thread.currentThread() +"Clicked on  Consultation Selected Check Box.");
                       }
     	           if(!futureGoLiveDate.equalsIgnoreCase("True")) {
     	        	   
     	        	  LOGS.info(Thread.currentThread() +"Since it is a website product we are changing consultation Date to back -30 days");
                    SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

                    Date date_cases = new Date();

                    String Date_1= formatter.format(date_cases);

                    String[] date_c= Date_1.split(" ");

                    LOGS.info(Thread.currentThread() +"Current Date: "+ date_c[0]);

                    //This menthod is used to change the date to back -39

                    modifiedDate = calenderMethod(date_c[0]);

                    LOGS.info(Thread.currentThread() +"Back dated to -30, To update 'Go live' as today's date:" + modifiedDate);



                    Thread.sleep(5000);

                    WebElement elementLocator2 = driver

                    .findElement(By.xpath("//span[text()='Consultation Complete Date']//following::div[1]"));
                    Actions actions = new Actions(driver);
                    actions.doubleClick(elementLocator2).perform();
                    Thread.sleep(3000);

                    LOGS.info(Thread.currentThread() +"Clicked on Consultation Complete Date");

                    actions.moveToElement(SLocator("Cases_ConsultationCompleteDatesendModifieddate"));

                    actions.sendKeys(String.valueOf(modifiedDate + " 8:36 PM"));

                    actions.build().perform();

                    LOGS.info(Thread.currentThread() +"Entered the Back dated  date");
                    LOGS.info(Thread.currentThread() +"Cases Consultation Complete Date Modified to" + modifiedDate);
                    
                    ImageName = "ConsultationComplete";
                    ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
                    Status = "Pass";
                    ExpRes = "Cases Consultation Complete Date Should be Changed and Consultation Complete checkbox should be checked";
                    ActRes = "Cases Consultation Complete Date changed and Consultation Complete checkbox  checked for Quote Number:"+ QuoteNumber+"- "+ productName +" to -" +modifiedDate;

     	           }
            	   else {
               LOGS.info(Thread.currentThread() +"Since it is a website product we are changing consultation Date as today date and the website will be live after 30 days");
               
               Actions actions = new Actions(driver);
               WebElement elementLocator2 = driver.
               		findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div//img"));
               actions.doubleClick(elementLocator2).perform();
               driver.findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div[2]//input")).click();
               LOGS.info(Thread.currentThread() +"Clicked on  Consultation Selected Check Box.");

               ImageName = "ConsultationComplete";
               ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
               Status = "Pass";
               ExpRes = "futureGoLiveDate is set to True So Cases Consultation Complete Date Should not be Changed";
               ActRes = "Cases Consultation Complete Date  is not changed for Quote Number:"+ QuoteNumber+"- "+ productName;

            }
               

               
               ExportResults.exportTestResult(

               "Consultation CompleteDate:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
               Thread.sleep(3000);
               driver.findElement(By.xpath("//td[@id='topButtonRow']//following::input[@value=' Save ']")).click();
               LOGS.info(Thread.currentThread() +"Clicked on save button in Cases");
                } 
               else {
            	 
            	   driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                   Thread.sleep(3000);
                   Actions actions = new Actions(driver);
            	   if(SalesRep.equalsIgnoreCase("Admin")) {
            	   
                   WebElement elementLocator = driver.findElement(By.xpath("//td[text()='Product Set']//following::td[1]//div"));
                   actions.doubleClick(elementLocator).perform();
            	  if(productName.trim().equalsIgnoreCase("Reviews")) {
                 Select ProductSet=new Select(driver.findElement(By.xpath("//td[text()='Product Set']//following::td[1]//span//select")));
                 ProductSet.selectByVisibleText("Reviews");
  				 LOGS.info(Thread.currentThread() +"Selected product type set");
            	  }else  if(productName.trim().equalsIgnoreCase("Listings Management")) {
                      Select ProductSet=new Select(driver.findElement(By.xpath("//td[text()='Product Set']//following::td[1]//span//select")));
                      ProductSet.selectByVisibleText("Listings");
       				 LOGS.info(Thread.currentThread() +"Selected product type set");
                 }
            	  else{
                      Select ProductSet=new Select(driver.findElement(By.xpath("//td[text()='Product Set']//following::td[1]//span//select")));
                      ProductSet.selectByVisibleText("Reputation");
       				 LOGS.info(Thread.currentThread() +"Selected product type set");
                 	  }
  				
  				Select processStatus=new Select(driver.findElement(By.xpath("//td[text()='Process Status']//following::td[1]//span//select")));
  				processStatus.selectByVisibleText("Consultation Complete");
 				 LOGS.info(Thread.currentThread() +"Selected Process Status"); 
 				 
 				Select processSubStatus=new Select(driver.findElement(By.xpath("//td[text()='Process Sub Status']//following::td[1]//span//select")));
 				processSubStatus.selectByVisibleText("None");
 				 LOGS.info(Thread.currentThread() +"Selected Process Status"); 
 				 
 				 driver.findElement(By.xpath("//input[@value='OK']")).click();
            }
 				WebElement elementLocator2 = driver.
 	               		findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div//img"));
 	               actions.doubleClick(elementLocator2).perform();
 	               driver.findElement(By.xpath("//td[text()='Consultation Complete']//following::td[1]//div[2]//input")).click();
 	               LOGS.info(Thread.currentThread() +"Clicked on  Consultation Selected Check Box.");
               
                	
               LOGS.info(Thread.currentThread() +"for "+productName+". we are not changing the consultation Date");

                ImageName = "ConsultationComplete";

               ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

               Status = "Pass";

               ExpRes = "for "+productName+". Only Consultation Complete checkbox should be checked";

               ActRes = "for Quote Number:"+ QuoteNumber+" - "+ productName + ". Only Consultation Complete checkbox checked";

               ExportResults.exportTestResult(

               "Consultation CompleteDate:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

               driver.findElement(By.xpath("//td[@id='topButtonRow']//following::input[@value=' Save ']")).click();

               LOGS.info(Thread.currentThread() +"Clicked on save button in Cases");

               }



               return "Pass";



               } catch (NumberFormatException e) {

               // TODO Auto-generated catch block
            	   ImageName = "ConsultationCompleteException";
                   ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);

            	   LOGS.info("Failed while filling the Consultatioin Details.");
            	   ExceptionMsg = "Failed while filling the Consultatioin Details.";
                   LOGS.info(e.getMessage());
               return "Fail";

               }

 }

	public  String calenderMethod(String datefmt) {

		 LOGS.info(Thread.currentThread() +"Inside Calender Method");
		 String newDate="";
		 SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		 // Getting current date
		 Calendar cal = Calendar.getInstance();
		 System.out.println(cal);
		 // Displaying current date in the desired format
		 System.out.println("Current Date: " + sdf.format(cal.getTime()));
		 
		 if(Day3.equalsIgnoreCase("True")) {
		 //cal.add(Calendar.MONTH, -1);
		 cal.add(Calendar.DAY_OF_MONTH, -30);// To update the date for webiste to tomorrow
		 // Date after adding the days to the current date
		  newDate = sdf.format(cal.getTime());
		 // Displaying the new Date after addition of Days to current date
		 System.out.println("Date after Addition: " + newDate);
		// return newDate;
		 }else {
			 //cal.add(Calendar.MONTH, -1);
			 cal.add(Calendar.DAY_OF_MONTH, -30);// To update the date for webiste to tomorrow
			 // Date after adding the days to the current date
			  newDate = sdf.format(cal.getTime());
			 // Displaying the new Date after addition of Days to current date
			 System.out.println("Date after Addition: " + newDate); 
			// return newDate;

		 }
		 
		 return newDate;

		 
		 }

 
	public  String fulfilmentExceptSami(String CaseNum, String ProductName, String Resultsfolderpath)

            throws Exception {
		pr.Resultsfolderpath = Resultsfolderpath;
		Properties OR = pr.loadPropertiesFiles("Order");
		SalesRep = OR.getProperty("OpsWizard");
				try
				{
					SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					LOGS.info("SF Login Sucessfull");
					
				}
				catch(Exception e)
				{
					LOGS.info("Some error in SF Login");
				}

			     try {
			            LOGS.info("inside fulfilmentExceptSami Method "); 
			       
			            String QS="Submitted";
			            
			             LOGS.info(CaseNum+" " + ProductName+" " + QS);
			             

			            // Searching Account with case Number
			            Thread.sleep(10000);
			           
			            LOGS.info("Hey I am Aftert Click");
			            driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(CaseNum);
			            driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
			           // driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
			            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			            Thread.sleep(6000);

			            // Below line will be clicking on first existence 0f the cases
			            String clickCheck=driver.getCurrentUrl();
			            
			            
			            
			            try {
			            	
			            LOGS.info("Clicking on cases link");
			             driver.findElement(By.xpath("//div[@id='Case_body']//following::tr[1]//th[1]/a")).click();
			            LOGS.info("Clicked on cases link");
			            
			            }
			            catch(Exception e)
			            {
			            
			                driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			                driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			                Thread.sleep(8000);
			            	String actualCheck = driver.getCurrentUrl();
			            	if(clickCheck.trim().equalsIgnoreCase(actualCheck)) {
			            		LOGS.info("Case Click is Failed");
			            		ImageName = "CasePageOpenException";
			            	    ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
			            		ExceptionMsg = "Filed to open the Case page : Application Slowness";
			            		LOGS.info(e.getMessage());
			            	}
			            		else
			            			LOGS.info("Case Click is happened with exception");
			            	
			            }
			            
			            

			             driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			            driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			            Thread.sleep(6000);

			            
			            SalesRep = "No";
			            String fulfillment = fulfillmentprocessExceptSami(ProductName,CaseNum,SalesRep,pr.Resultsfolderpath );

			         
			            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			            driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			            Thread.sleep(5000);
			            driver.findElement(By.xpath("//td[text()='Company Name']//following::td[1]//div/a")).click();
			            LOGS.info("Clicked On Account Link");
			            Thread.sleep(7000);

			            if (fulfillment.equalsIgnoreCase("Fail")) {

			            	 Status = "Fail";
		                     LOGS.info("Non Sami fulfillment Validations - Method Failed");
		                     ActRes = "Non Sami fulfillment Validations -  failed";
		                     Status="Fail";
		                     count = count + 1;ExceptionMsg = "Failed to open the Case page : Application Slowness";

			            } else {
			            	 Status = "Pass";
		                     LOGS.info("Products are Active : Non Sami fulfillment Validations - Method Passed");
		                     ActRes = "Products are active Non Sami fulfillment validations is Passed";
		                     Status="Pass";
		              }
	                  ExpRes = "Products should be Active";

	                  ExportResults.exportTestResult(

	                                "Non Sami fulfillment validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

	                  LOGS.info("**************************Done FulFillment*********************");

	           
	                //Commented to avoid validation time
	   	           /* Thread.sleep(10000);
	   	            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
	   	            driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            driver.findElement(By.xpath("//td[text()='Company Name']//following::td[1]//div/a")).click();
	   	            LOGS.info("Clicked On Account Link");
	   	            driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
	   	            driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            driver.navigate().refresh();
	   	            driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            LOGS.info("Sales rep type is:"+SalesRep);
	   	            
	   	            if(SalesRep.trim().equalsIgnoreCase("Becky DSM")) {
	   	           String accountlink = driver.getCurrentUrl();
	   	           SalesforceTasks.SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswdSPE");
	   	            driver.get(accountlink);
	   	            driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	   	            Thread.sleep(5000);
	   	            }
	   	             String Day2validations=SalesforceTasks.Day2NonSamifulfillmentValidation(ProductName);
	   */

	   	                 /* if (Day2validations.equalsIgnoreCase("Fail")) {

	   	                         Status = "Fail";

	   	                         LOGS.info("Non Sami fulfillment Validations - Method Failed");

	   	                         ActRes = "Non Sami fulfillment Validations -  failed";

	   	                         Status="Fail";

	   	                         count = count + 1;

	   	                   } else {

	   	                         Status = "Pass";

	   	                         LOGS.info("Non Sami fulfillment Validations - Method Passed");

	   	                         ActRes = "Non Sami fulfillment validations is Passed";

	   	                         Status="Pass";

	   	                  }

	   	                  ExpRes = "validations should be verified";

	   	                  ExportResults.exportTestResult(

	   	                                "Non Sami fulfillment validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image");
	   */
	   	           
	   	           
	           

	           

	           

	     } catch (Exception e) {
             //e.printStackTrace();
	    	 ImageName = "CasePageException";
             ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
	    	 Status = "Fail";
	    	 ExceptionMsg = "Failed to open the Case page : Application Slowness";
	    	 LOGS.info("Failed in NON- SAMI FF Method : Application Slowness");
     		 LOGS.info(e.getMessage());

	     }

	      return Status;

}

	/// ________________________________________________________________________________
	// Excelreusable Methods

	public String path;
	public static FileInputStream fis = null;
	public FileOutputStream fileOut = null;
	private static XSSFWorkbook workbook = null;
	private static XSSFSheet sheet = null;
	private static XSSFRow row = null;
	private static XSSFCell cell = null;

	public static void Xls_Reader(String path) {

		String path1 = path;
		System.out.println(path);
		try {
			fis = new FileInputStream(path);
			workbook = new XSSFWorkbook(fis);
			sheet = workbook.getSheetAt(0);
			fis.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	// returns the row count in a sheet
	public static int getRowCount(String sheetName) {
		int index = workbook.getSheetIndex(sheetName);
		if (index == -1)
			return 0;
		else {
			sheet = workbook.getSheetAt(index);
			int number = sheet.getLastRowNum() + 1;
			return number;
		}

	}

	// returns the data from a cell
	public static String getCellData(String sheetName, String colName, int rowNum) {

		try {

			if (rowNum <= 0)
				return "";

			int index = workbook.getSheetIndex(sheetName);
			int col_Num = -1;
			if (index == -1)
				return "";

			sheet = workbook.getSheetAt(index);
			row = sheet.getRow(0);
			for (int i = 0; i < row.getLastCellNum(); i++) {
				// System.out.println(row.getCell(i).getStringCellValue().trim());
				if (row.getCell(i).getStringCellValue().trim().equals(colName.trim()))
					col_Num = i;
			}
			if (col_Num == -1)
				return "";

			sheet = workbook.getSheetAt(index);
			row = sheet.getRow(rowNum - 1);

			if (row == null)
				return "";
			cell = row.getCell(col_Num);

			if (cell == null)
				return "";
			// System.out.println(cell.getCellType());
			if (cell.getCellType() == Cell.CELL_TYPE_STRING)
				return cell.getStringCellValue();
			else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC || cell.getCellType() == Cell.CELL_TYPE_FORMULA) {

				String cellText = String.valueOf(cell.getNumericCellValue());
				if (DateUtil.isCellDateFormatted(cell)) {
					// format in form of M/D/YY
					double d = cell.getNumericCellValue();

					Calendar cal = Calendar.getInstance();
					cal.setTime(DateUtil.getJavaDate(d));
					cellText = (String.valueOf(cal.get(Calendar.YEAR))).substring(2);
					cellText = cal.get(Calendar.DAY_OF_MONTH) + "/" + cal.get(Calendar.MONTH) + 1 + "/" + cellText;

					// System.out.println(cellText);

				}

				return cellText;
			} else if (cell.getCellType() == Cell.CELL_TYPE_BLANK)
				return "";
			else
				return String.valueOf(cell.getBooleanCellValue());

		} catch (Exception e) {

			e.printStackTrace();
			return "row " + rowNum + " or column " + colName + " does not exist in xls";
		}
	}

	//Day3 code start point for cancel and Modify scenarios
	public  String Day3Process(String buisnessID_1, String ExistingProduct_1, String processtoProceedwith_1,
			String changeInProduct_1, String New_or_Modifying_ProductName_1) throws Exception {
		
		
		try {
			LOGS.info(Thread.currentThread() + "Day3 Process Execution Started");
			Status = "Pass";
			LOGS.info(Thread.currentThread() + buisnessID_1 + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1
					+ " # " + changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);

			businessID = buisnessID_1.replace(" ", "");

			wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
			
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			wait.until(ExpectedConditions
					.elementToBeClickable(driver.findElement(By.xpath("//div[@id='searchButtonContainer']"))));
			wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//input[@id='phSearchInput']")));
			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID);
			LOGS.info("Entered Business id in Search Field");
			wait.until(ExpectedConditions
					.elementToBeClickable(driver.findElement(By.xpath("//div[@id='searchButtonContainer']")))).click();
			
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);

			LOGS.info("Clicked on Search Button");
			

			ExpRes = "Account Verification and it should be Available";
			ImageName = "ExistingAccount";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
			try {

				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);

				wait.until(ExpectedConditions
						.elementToBeClickable(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")));
				driver.findElement(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")).click();

				LOGS.info(Thread.currentThread() + "Clicking on Account Link");
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				ActRes = "Account Found";

				if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
					driver.findElement(By.xpath("//span[text()='Details']")).click();
					LOGS.info(Thread.currentThread() + "Clicking on Details Link for the " + SalesRepType + " Rep ");
					driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					
					LOGS.info(Thread.currentThread() + "Clicked on Details Link ");
				}

			} catch (Exception e) {
				LOGS.info(Thread.currentThread() + "Account Not Found");
				ActRes = "Account Not Found";
				LOGS.error("Error in Day3Process Method: Account Not Found : " + Thread.currentThread() + " : " + e);
				ExceptionMsg = "Error in Day3Process Method :: Account Not Found";
				LOGS.info(Thread.currentThread() + "," + "Error in Day3Process Method :: Account Not Found - "
						+ e.getStackTrace());
				Status = "Fail";
				count = count + 1;
				return Status;
			}
			ExportResults.exportTestResult(
					"Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
					pr.Resultsfolderpath);

			driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

			
			String regex = "\\d+";
			wait.until(ExpectedConditions.textMatches(By.xpath("//span[text()='Live Products']/span"),
					Pattern.compile(regex)));

			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[text()='Live Products']/span")));
			String LiveProductAllCount = SLocator("LiveProductCount").getText();
			LiveProductAllCount = LiveProductAllCount.replace("[", "");
			LiveProductAllCount = LiveProductAllCount.replace("]", "");
			LOGS.info(Thread.currentThread() + "All Live Product Count taking from top row links- "
					+ LiveProductAllCount);

			LOGS.info(Thread.currentThread() + "Clicking on Live Products link to get Active product details");
			wait.until(ExpectedConditions.elementToBeClickable(SLocator("LiveProductLink")));
			SLocator("LiveProductLink").click();
			
			LOGS.info(Thread.currentThread() + "Clicked on Live Products link");
			String captureProdCountStr = "";
			productsCaptureHomePage = "";

			if (LiveProductAllCount.contains("+")) {
				
				captureProdCountStr = SLocator("LiveProdCountStr").getText();
				LOGS.info(Thread.currentThread() + "Captured Text-" + captureProdCountStr);
				/*captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
				captureProdCountStr = captureProdCountStr.replace(")", "");
				captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
				captureProdCountStr = captureProdCountStr.replace(" �", "");
				captureProdCountStr = captureProdCountStr.replace(" »", "");
				captureProdCountStr = captureProdCountStr.replace(" ╗", "");*/
				captureProdCountStr = captureProdCountStr.replaceAll("[^0-9]", "");

			
				SLocator("LiveProdCountStr").click();
				
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				
				int ActiveProductsCount = Integer.parseInt(captureProdCountStr);

				for (int i = 1; i <= ActiveProductsCount; i++) {
					String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
					
					String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
					LOGS.info(Thread.currentThread() + "Product Name is :" + getActiveProducts);

					ProductName.add(getActiveProducts);
					productsCaptureHomePage = productsCaptureHomePage + "-" + getActiveProducts;
				}

				driver.navigate().back();

			} else {
				captureProdCountStr = LiveProductAllCount;
				LOGS.info(Thread.currentThread() + "****" + LiveProductAllCount);
				int ActiveProductsCount = Integer.parseInt(captureProdCountStr);

				for (int i = 1; i <= ActiveProductsCount; i++) {
					String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/th/a";
					
					String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
					LOGS.info(Thread.currentThread() + "Product Name is :" + getActiveProducts);

					ProductName.add(getActiveProducts);
					productsCaptureHomePage = productsCaptureHomePage + "-" + getActiveProducts;
				}

			}

			ImageName = "LiveProduct";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
			ExpRes = "Capture the Product Count and Products available for the Account - " + businessID;
			prodCount = ProductName.size();
			LOGS.info(Thread.currentThread() + "Available Active Product: " + prodCount);

			ActRes = prodCount + " Live Products Available and Products are \n" + productsCaptureHomePage;
			Status = "Pass";
			ExportResults.exportTestResult(
					"Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
					pr.Resultsfolderpath);
			
		//	Condition to Update the Budget Estimate for LR(cancel and replace)
              if(LRSelection.equalsIgnoreCase("WithLRBudgetEstimate")) {
				
            	  
            		LOGS.info(Thread.currentThread() +New_or_Modifying_ProductName_1);
            		
            		 if( New_or_Modifying_ProductName_1.trim().contains("a la carte") || New_or_Modifying_ProductName_1.trim().equalsIgnoreCase("Reviews")
                     		|| New_or_Modifying_ProductName_1.trim().contains("Guaranteed") || New_or_Modifying_ProductName_1.trim().contains("Listings")
                     		|| New_or_Modifying_ProductName_1.trim().contains("Smart Site")
                     		|| LRSelection.trim().equalsIgnoreCase("WithoutLRBudgetEstimate")) {
                     	    LOGS.info(Thread.currentThread() +"Selected Plan should go Without LR Budget Estimation. Plan name: "+currentPlan);
                     }
                     else {
                      
				LOGS.info(Thread.currentThread() +"Hey!! I am going to estimate budget to replace with LR product on Non LR Prodcuct");
				
				LOGS.info(Thread.currentThread() +"Hi there! i am going to call the LR budget estimation method");
				
				LRBudgetTool();
				
				LOGS.info(Thread.currentThread() +"Budget estimation is done at account page now moving to contract page");
             	}
				
			}

			
			
			
			
			if (count < 1) {
				driver.navigate().refresh();
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(10000);
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("ContractsLink")));
				SLocator("ContractsLink").click();
				LOGS.info(Thread.currentThread() + "Contracts link clicked in account details page");
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("ContractNolink"));
				
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("ContractNolink")));

				ExpRes = "Capture Contract Number";
				ImageName = "ContractLink";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
				try {
					contractNumber = SLocator("ContractNolink").getText();
					ActRes = "Contract Number:" + contractNumber;
					LOGS.info(Thread.currentThread() + ActRes);

					SLocator("ContractNolink").click();
					LOGS.info(Thread.currentThread() + "Contracts number link clicked in account details page");
					
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					
					Status = "Pass";
				} catch (Exception e) {
					ActRes = "Error in Contracts";
					LOGS.info(Thread.currentThread() + ActRes);
					LOGS.error("Error in Day3Process Method: Contracts Page : " + Thread.currentThread() + " : " + e);
					ExceptionMsg = "Error in Day3Process Method :: Contracts Page";
					LOGS.info(Thread.currentThread() + "," + "Error in Day3Process Method :: Contracts Page - "
							+ e.getStackTrace());
					Status = "Fail";
					count = count + 1;
					return Status;
				}
				ExportResults.exportTestResult(
						"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
						pr.Resultsfolderpath);

				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				
			}

			if (count < 1) {

				String[] existingProductSub_split = ExistingProduct_1.split("->");
				
				if ((processtoProceedwith_1.contains("Cancel")) || (processtoProceedwith_1.contains("cancel"))) {
					LOGS.info(Thread.currentThread() + "Process: " + existingProductSub_split[0]);
				} else {
					LOGS.info(Thread.currentThread() + "Product Name:" + existingProductSub_split[0]);
					
				}
				
				LOGS.info(Thread.currentThread() + "Waited few seconds for Amend button to be visible");
				wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend")));
				SLocator("Amend").click();
				LOGS.info(Thread.currentThread() + "Amend button clicked in contract detail page");
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				

				wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend2")));
				SLocator("Amend2").click();
				LOGS.info(Thread.currentThread() + "Second Amend button clicked");
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				

				LOGS.info(Thread.currentThread() +buisnessID_1 + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
						+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);


				if (processtoProceedwith_1.equalsIgnoreCase("Modify")) {

					if (changeInProduct_1.equalsIgnoreCase("priceChangeIncrease")) {

						String priceChangeMethod = priceChangeIncrease(ExistingProduct_1, New_or_Modifying_ProductName_1);

						if (priceChangeMethod.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Passed");

						}

					}if (changeInProduct_1.equalsIgnoreCase("priceChangeDecrease")) {

						String priceChangeMethod = priceChangeDecrease(ExistingProduct_1, New_or_Modifying_ProductName_1);

						if (priceChangeMethod.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Passed");

						}

					} else if (changeInProduct_1.trim().equalsIgnoreCase("Upgrade")) {

						String UpgradeModify = upgradeModify(ExistingProduct_1, New_or_Modifying_ProductName_1);

						if (UpgradeModify.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"UpgradeModify - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"UpgradeModify - Method Passed");

						}

					} else if (changeInProduct_1.trim().equalsIgnoreCase("Downgrade")) {

						String DowngradeModify = DowngradeModify(ExistingProduct_1, New_or_Modifying_ProductName_1);

						if (DowngradeModify.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"DowngradeModify - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"DowngradeModify - Method Passed");

						}

					} else if (changeInProduct_1.trim().equalsIgnoreCase("AddProduct")) {

						LOGS.info(Thread.currentThread() +"Adding New Products to the existing account");

						String addingProduct_to_existingAccount = AddingAdditionalProduct(
								New_or_Modifying_ProductName_1);

						if (addingProduct_to_existingAccount.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"addingProduct_to_existingAccount - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"addingProduct_to_existingAccount - Method Passed");

						}
					} else if (changeInProduct_1.trim().equalsIgnoreCase("Packages")) {

						LOGS.info(Thread.currentThread() +"Upgrade/Downgrade Packages");

						String Upgrade_Downgrade_Packages = Upgrade_Downgrade_Packages(ExistingProduct_1,
								New_or_Modifying_ProductName_1);

						if (Upgrade_Downgrade_Packages.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"Upgrade_Downgrade_Packages - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"Upgrade_Downgrade_Packages - Method Passed");

						}

					}
				} else if (processtoProceedwith_1.equalsIgnoreCase("Cancel")) {

					String[] changeInProduct_split = changeInProduct_1.split("->");
					LOGS.info(Thread.currentThread() +"Cancelation flow:" + changeInProduct_split[0]);
					LOGS.info(Thread.currentThread() +"Cancelation reason:" + changeInProduct_split[1]);

					if (changeInProduct_split[0].trim().equalsIgnoreCase("CancelAll")) {

						String cancelAll = CancelAll(ExistingProduct_1, changeInProduct_split[1]);

						if (cancelAll.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"cancelAll - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"cancelAll - Method Passed");

						}

					} else if (changeInProduct_split[0].trim().equalsIgnoreCase("CancelLineItem")) {

						String CancelLineItem = CancelLineItem(ExistingProduct_1, changeInProduct_split[1]);

						if (CancelLineItem.equalsIgnoreCase("Fail")) {

							LOGS.info(Thread.currentThread() +"CancelLineItem - Method Failed");
						} else {
							LOGS.info(Thread.currentThread() +"CancelLineItem - Method Passed");

						}

					}

				} else if ((processtoProceedwith_1.contains("Cancel")) || (processtoProceedwith_1.contains("cancel"))) {

					String cancelStatusResult = "";

					if (processtoProceedwith_1.trim().equalsIgnoreCase("FullCancel")) {
						LOGS.info(Thread.currentThread() +"Cancelling All Products");
						cancelStatusResult = CancelAllProduct(changeInProduct_1);

					} else if (processtoProceedwith_1.trim().equalsIgnoreCase("LineItemCancel")) {
						LOGS.info(Thread.currentThread() +"Cancelling the Product "+ExistingProduct_1);
						 cancelStatusResult = CancelLineItemProduct(ExistingProduct_1, changeInProduct_1);

						if (SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise")) {
							cancelStatusResult = CancelLineItemProduct(ExistingProduct_1);
						} else {
							cancelStatusResult = CancelLineItemProduct(ExistingProduct_1, changeInProduct_1);
						}

					} else if (processtoProceedwith_1.trim().equalsIgnoreCase("FullCancelAndAddNewProducts")) {

						LOGS.info(Thread.currentThread() +"Cancelling All Products");
						cancelStatusResult = CancelAllProduct(changeInProduct_1);

						if (cancelStatusResult.equalsIgnoreCase("Fail")) {
							LOGS.info(Thread.currentThread() +"Failed in Full Cancel And Add New Products-Cancel");
							count=count+1;
							Status="Fail";
						} else {
							LOGS.info(Thread.currentThread() +"Adding New Products to the existing account");
							cancelStatusResult = AddingAdditionalProduct(New_or_Modifying_ProductName_1);
						}

					} else if (processtoProceedwith_1.trim().equalsIgnoreCase("CancelLineItemAndAddNewProducts")) {
						LOGS.info(Thread.currentThread() +"Cancelling the particular Product Line Item");
						cancelStatusResult = CancelLineItemProduct(ExistingProduct_1);
						cancelStatusResult = CancelLineItemProduct(ExistingProduct_1, changeInProduct_1);

						if (cancelStatusResult.equalsIgnoreCase("Fail")) {
							LOGS.info(Thread.currentThread() +"Failed in Cancel Line Item And Adding New Products- Cancel");
							count=count+1; 
							Status="Fail";
						} else {
							LOGS.info(Thread.currentThread() +"Adding New Products to the existing account");
							cancelStatusResult = AddingAdditionalProduct(New_or_Modifying_ProductName_1);
						}
					}

					ExpRes = "Cancel Scenario should be process Successfully";
					if (cancelStatusResult.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"Cancel Process Failed");
						Status = "Fail";
						ActRes = "Cancel Process Failed";
						count = count + 1;
					} else {
						LOGS.info(Thread.currentThread() +"Cancel Process Passed Successfully");
						Status = "Pass";
						ActRes = "Cancel Process Passed Successfully";
					}

					Thread.sleep(3000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);

					ImageName = "CancelProcess";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Cancel Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);




					if (count == 0) {
						try {
							LOGS.info(Thread.currentThread() +"Clicking on Save Button in QLE");
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							SLocator("SaveBtn").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							// driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
							LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
						} catch (Exception e) {
							e.printStackTrace();
							LOGS.info(Thread.currentThread() +"Save Button not clicked in QLE page");
							driver.navigate().refresh();
							LOGS.info(Thread.currentThread() +"Page Refreshed");
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							try {
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								SLocator("SaveBtn").click();
								LOGS.info(Thread.currentThread() +"Second Time Tried to Click on Save Button");
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
							} catch (Exception exp) {
								LOGS.error("Error in Day3Process Method: Saving the Quote : "+ Thread.currentThread() +" : " +exp);
								ExceptionMsg = "Error in Day3Process Method :: Saving the Quote";
								LOGS.info(Thread.currentThread() + "," +"Error in Day3Process Method :: Saving the Quote - " + exp.getStackTrace());
								LOGS.info(Thread.currentThread() +"Save Button not clicked");
								Status = "Fail";
								count = count + 1;
							}
						}

					}

				}
			

			if (count == 0) {
				String Genrate_to_SubmitQuoteProcess = Genrate_to_SubmitQuote(changeInProduct_1);

				if (Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")) {

					LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Failed");
					Status = "Fail";
				} else {
					LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Passed");
					Status = "Pass";
				}

			}
}
		} catch (Exception e) {
			
			LOGS.error("Error in Day3Process Method : "+ Thread.currentThread() +" : " +e);
			ExceptionMsg = "Error in Day3Process Method";
			LOGS.info(Thread.currentThread() + "," +"Error in Day3Process Method - " + e.getMessage());
			Status = "Fail";
			count = count + 1;
			
			return Status;
		}

		return Status;
	}  



	public  String CancelLineItem(String existingProduct_1, String changeInProduct_1) {

		try {
			LOGS.info(Thread.currentThread() +"Inside Cancel Line Item method" + existingProduct_1 + "->" + changeInProduct_1);

			driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);

			String[] products = existingProduct_1.split(",");
			LOGS.info(Thread.currentThread() +"display all fetched Products : " + products);

			int length = products.length;
			LOGS.info(Thread.currentThread() +"Number of products available for cancel : " + length);

			if (SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise")) {

				for (int i = 0; i < length; i++) {
					LOGS.info(Thread.currentThread() +products[i]);

					String Text1 = "//div[text()=' " + products[i]
							+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div";
					LOGS.info(Thread.currentThread() +Text1);
					driver.findElement(By.xpath("//div[text()=' " + products[i]
							+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div")).click();

					LOGS.info(Thread.currentThread() +"Selected " + products[i] + " cancel Checkbox");
					Thread.sleep(3000);
				}
				SLocator("QuickSavebtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
				Thread.sleep(15000);

				ExpRes = "Cancel Checkbox should select at line item level before cancel product ";
				ActRes = "Cancel Checkbox selected at line item level before cancel product ";
				ImageName = "CancelCheckBoxSelect";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Select Cancel Checkbox at line item level :," + ExpRes + "," + ActRes
						+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				if (!(CancelAndReplace.equalsIgnoreCase("True"))) {
					// Clicked on Save button if you don't want to quick save the cart
					SLocator("SaveBtn").click();
					driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
					LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
				} else if (CancelAndReplace.equalsIgnoreCase("True")) {

					// Adding new CPQ product to an Existing account
					ProductIdentifierName = "05";
					String inputdata = pr.FetchProductplan(ProductIdentifierName);
					LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
					String[] allProdsplans = inputdata.split("&");
					String allProds = allProdsplans[0];
					LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
					String[] Prods = allProds.split(",");
					String allpalns = allProdsplans[1];
					LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
					String[] Plans = allpalns.split(",");
					LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
					List<WebElement> ProdRowsBefore = driver
							.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
					RowsBeforeAdd = ProdRowsBefore.size();
					AddingProduct(Prods, Plans);
					LOGS.info(Thread.currentThread() +"Adding Product completed");
				}
			}

			for (int i = 0; i < length; i++) {
				LOGS.info(Thread.currentThread() +products[i]);

				String Text1 = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div";
				LOGS.info(Thread.currentThread() +Text1);
				driver.findElement(By.xpath("//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div")).click();

				LOGS.info(Thread.currentThread() +"Selected " + products[i] + " cancel Checkbox");
				Thread.sleep(3000);

				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				WebElement CancelReasonArea = SLocatorDynamic(
						"CancelLineItemCRDynamic1_" + " " + products[i] + "_CancelLineItemCRDynamic2");
				CancelReasonArea.click();
				CancelReasonArea.click();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Thread.sleep(2000);
				Select CancelReasonSelection = new Select(SLocatorDynamic(
						"CancelLineItemCRDynamic1_" + " " + products[i] + "_CancelLineItemCRSelectDynamic2"));
				CancelReasonSelection.selectByVisibleText("Domain Issue");
				LOGS.info(Thread.currentThread() +"Selected cancel Reason");
				Robot robot = new Robot();
				robot.keyPress(KeyEvent.VK_ENTER);
				robot.keyRelease(KeyEvent.VK_ENTER);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Pressed enter");
				Thread.sleep(1000);
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				WebElement CancelTypeArea = SLocatorDynamic(
						"CancelLineItemCTDynamic1_" + " " + products[i] + "_CancelLineItemCTDynamic2");
				CancelTypeArea.click();
				CancelTypeArea.click();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				Select CancelTypeSelection = new Select(SLocatorDynamic(
						"CancelLineItemCTDynamic1_" + " " + products[i] + "_CancelLineItemCTSelectDynamic2"));
				CancelTypeSelection.selectByVisibleText("Credit");
				LOGS.info(Thread.currentThread() +"Selected cancel type");
				robot.keyPress(KeyEvent.VK_ENTER);
				robot.keyRelease(KeyEvent.VK_ENTER);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Pressed enter");
			}
			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");

			Thread.sleep(15000);

			ExpRes = "cancelreason caceltype should select at line item level before cancel product ";
			ActRes = "cancelreason caceltype  selected at line item level before cancel product ";
			ImageName = "EditquoteForCancel";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			if (!(CancelAndReplace.equalsIgnoreCase("True"))) {

				SLocator("SaveBtn").click();
				driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
			}

			if (CancelAndReplace.equalsIgnoreCase("True")) {

				// Adding new CPQ product to an Existing account
				ProductIdentifierName = "05";
				String inputdata = pr.FetchProductplan(ProductIdentifierName);
				LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
				String[] allProdsplans = inputdata.split("&");
				String allProds = allProdsplans[0];
				LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
				String[] Prods = allProds.split(",");
				String allpalns = allProdsplans[1];
				LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
				String[] Plans = allpalns.split(",");
				LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
				List<WebElement> ProdRowsBefore = driver
						.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
				RowsBeforeAdd = ProdRowsBefore.size();
				AddingProduct(Prods, Plans);
				LOGS.info(Thread.currentThread() +"Adding Product completed");
			}

		} catch (Exception e) {
			Status = "Fail";
			e.printStackTrace();
		}

		return Status;
	}

	public  String CancelAllPrepMethod(String SalesRepType, String businessID, String CancelType, String CancelReason,String Resultsfolderpath) throws Exception {

		try {
			count=0;
			CancelAll = "true";
			
			pr.Resultsfolderpath = Resultsfolderpath;
			LOGS.info("REsults Folder Path in Main: "+Resultsfolderpath);
			LOGS.info("REsults Folder Path in Main: "+pr.Resultsfolderpath);
			
			//Properties OR = PreRequisites.loadPropertiesFiles("Order");
			if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
				//SalesRep = "Becky OpsWizard";
				SalesRep = "Greg Young";
				LOGS.info(Thread.currentThread() + "Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				if (SFLoginResult.trim().equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() + "SF Login is Failed.");
					count = count + 1;
				} else
					LOGS.info(Thread.currentThread() + "SF Login is successfully done");
			}
			

			if (count == 0) {
				try {

					try {

						wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
						
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						
						wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='phSearchButton']")));
						driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID);
						// Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						// Thread.sleep(2000);
						driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
						// Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						

						ExpRes = "Account Verification and it should be Available";
						ImageName = "ExistingAccount";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);

						wait.until(ExpectedConditions
								.elementToBeClickable(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")));
						driver.findElement(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")).click();
						LOGS.info(Thread.currentThread() + "Clicking on Account Link");
						// Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						// Thread.sleep(2000);
						ActRes = "Account Found";

						if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[text()='Details']")));
							driver.findElement(By.xpath("//span[text()='Details']")).click();
							LOGS.info(Thread.currentThread() + "Clicking on Details Link for the " + SalesRepType
									+ " Rep ");
							driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(pageLoadTime));
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(3000);
							LOGS.info(Thread.currentThread() + "Clicked on Details Link ");
						}

					} catch (Exception e) {
						LOGS.info(Thread.currentThread() + "Account Not Found");
						ImageName = "AccountNotFoundException";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
						ActRes = "Account Not Found";
						Status = "Fail";
						count = count + 1;
					}
					ExportResults.exportTestResult(
							"Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
							pr.Resultsfolderpath);

					if (count == 0) {

						// wait till Live products count is visible
						String regex = "\\d+";
						wait.until(ExpectedConditions.textMatches(By.xpath("//span[text()='Live Products']/span"),
								Pattern.compile(regex)));

						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						// Thread.sleep(30000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						String LiveProductAllCount = SLocator("LiveProductCount").getText();
						LiveProductAllCount = LiveProductAllCount.replace("[", "");
						LiveProductAllCount = LiveProductAllCount.replace("]", "");
						LOGS.info(Thread.currentThread() + "All Live Product Count taking from top row links- "
								+ LiveProductAllCount);

						LOGS.info(Thread.currentThread()
								+ "Clicking on Live Products link to get Active product details");
						SLocator("LiveProductLink").click();
						// Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						LOGS.info(Thread.currentThread() + "Clicked on Live Products link");
						String captureProdCountStr = "";
						productsCaptureHomePage = "";

						if (LiveProductAllCount.contains("+")) {
							
							captureProdCountStr = SLocator("LiveProdCountStr").getText();
							LOGS.info(Thread.currentThread() + "Captured Text-" + captureProdCountStr);
							//captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
							//captureProdCountStr = captureProdCountStr.replace(")", "");
							//captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
							//captureProdCountStr = captureProdCountStr.replace(" ", "");
							//captureProdCountStr = captureProdCountStr.replace("»", "");
							captureProdCountStr = captureProdCountStr.replaceAll("[^0-9]", "");

							SLocator("LiveProdCountStr").click();
							// Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(2000);
							int ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {
								String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
								
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() + "Product Name is :" + getActiveProducts);

								ProductName.add(getActiveProducts);
								productsCaptureHomePage = productsCaptureHomePage + "-" + getActiveProducts;
							}

							driver.navigate().back();
							
							if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
								wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[text()='Details']")));
								driver.findElement(By.xpath("//span[text()='Details']")).click();
								LOGS.info(Thread.currentThread() + "Clicking on Details Link for the " + SalesRepType
										+ " Rep ");
								driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(pageLoadTime));
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
								// Thread.sleep(3000);
								LOGS.info(Thread.currentThread() + "Clicked on Details Link ");
							}

						} else {
							captureProdCountStr = LiveProductAllCount;
							LOGS.info(Thread.currentThread() + "****" + LiveProductAllCount);
							int ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {
								String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/th/a";
								
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() + "Product Name is :" + getActiveProducts);

								ProductName.add(getActiveProducts);
								productsCaptureHomePage = productsCaptureHomePage + "-" + getActiveProducts;
							}

						}

						ImageName = "LiveProduct";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
						ExpRes = "Capture the Product Count and Products available for the Account - " + businessID;
						prodCount = ProductName.size();
						LOGS.info(Thread.currentThread() + "Available Active Product: " + prodCount);

						ActRes = prodCount + " Live Products Available and Products are \n" + productsCaptureHomePage;
						Status = "Pass";
						ExportResults.exportTestResult(
								"Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
								pr.Resultsfolderpath);

						
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
						// Thread.sleep(2000);
						wait.until(ExpectedConditions.elementToBeClickable(SLocator("ContractsLink")));
						SLocator("ContractsLink").click();
						LOGS.info(Thread.currentThread() + "Contracts link clicked in account details page");
						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("ContractNolink"));
						// Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
						// Thread.sleep(2000);

						ExpRes = "Capture Contract Number";
						ImageName = "ContractLink";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
						try {
							contractNumber = SLocator("ContractNolink").getText();
							ActRes = "Contract Number:" + contractNumber;
							LOGS.info(Thread.currentThread() + ActRes);

							wait.until(ExpectedConditions.elementToBeClickable(SLocator("ContractNolink")));
							SLocator("ContractNolink").click();
							LOGS.info(Thread.currentThread() + "Contracts number link clicked in account details page");
							// Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(2000);
							Status = "Pass";
						} catch (Exception e) {
							ActRes = "Error in Contracts";
							LOGS.info(Thread.currentThread() + ActRes);
							ImageName = "ContractPageException";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
							Status = "Fail";
							count = count + 1;
							LOGS.error("Error in Cancel all :: Contracts Page " + Thread.currentThread() + " : " + e);
							ExceptionMsg = "Error in Cancel all :: Contracts Page ";
							LOGS.info(Thread.currentThread() + "," + "Error in Cancel all :: Contracts Page - "
									+ e.getStackTrace());
						}
						ExportResults.exportTestResult(
								"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
								pr.Resultsfolderpath);

						if (count == 0) {
							// driver.navigate().refresh();
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(2000);

							// Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(2000);
							LOGS.info(Thread.currentThread() + "Waited few seconds for Amend button to be visible");

							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend")));
							SLocator("Amend").click();
							LOGS.info(Thread.currentThread() + "Amend button clicked in contract detail page");
							// Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(2000);

							wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend2")));
							SLocator("Amend2").click();
							LOGS.info(Thread.currentThread() + "Second Amend button clicked");
							// Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(70));
							// Thread.sleep(2000);

						}

						if (count == 0) {

							LOGS.info(Thread.currentThread() + "Inside Cancel All Process");
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							//wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//div[text()='Cancel All']//following::paper-checkbox")));
							//SLocator("CancelAll").click();
							
							// ------shadow dom for clicking on Cancel all check box----
							//Thread.sleep(27000);
							
							try {
								LOGS.info("Waiting for Page to load Completely");
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
								WebDriverWait waitafterAmendBtn = new WebDriverWait(driver, Duration.ofSeconds(45));
								waitafterAmendBtn.until(ExpectedConditions
										.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
							} catch (Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
							}
							
							WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
							WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("sb-field-set-table[num-columns='3']"));
							SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#firstColumn"));
							SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-field-set-table-item[class='--desktop'][item='CPQ_Cancel_All__c']"));
							SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("#field"));
							SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("sb-checkbox[class='--desktop']"));
							SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector("#checkbox"));
							SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
							Thread.sleep(1000);
							WebElement shadowDomHostElement8 =last7.findElement(By.cssSelector("#checkboxContainer"));
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement8));	
							shadowDomHostElement8.click();
							
							// ------ end of shadow dom for clicking on Cancel all check box----
							LOGS.info(Thread.currentThread() + "All Existing products will be cancelled");

							// Thread.sleep(3000);
							
							
							//shadow dom code to select Cancel type------------
							
							WebElement shadowDomHostElement9 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement10 = last8.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement11 = last9.findElement(By.cssSelector("sb-field-set-table[num-columns='3']"));
							SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement11);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement12 = last10.findElement(By.cssSelector("#secondColumn"));
							SearchContext last11 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement12);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement13 = last11.findElement(By.cssSelector("sb-field-set-table-item[class='--desktop'][item='CPQ_Cancellation_Type__c']"));
							SearchContext last12 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement13);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement14 = last12.findElement(By.cssSelector("#field"));
							SearchContext last13 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement14);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement15 = last13.findElement(By.cssSelector("#picklist"));
							SearchContext last14 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement15);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement16 =last14.findElement(By.cssSelector("#myselect"));
							//--------------------------------------------------------
							
							if (CancelType.trim().equalsIgnoreCase("Credit")) {

								//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
								//		"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
								//Select canceltype = new Select(driver.findElement(By.xpath(
								//		"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

								//canceltype.selectByVisibleText("Credit");
								
								//shadow dom code to select Credit type------------
								
								wait.until(ExpectedConditions.visibilityOf(shadowDomHostElement16));	
								Select canceltype = new Select(shadowDomHostElement16);
								canceltype.selectByVisibleText("Credit");
								
								//end of shadow dom code to select Credit type--------
								LOGS.info(Thread.currentThread() + "Cancellation Type selected: " + CancelType);
							} else if (CancelType.trim().equalsIgnoreCase("Customer")) {
//								wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
//										"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
//								Select canceltype = new Select(driver.findElement(By.xpath(
//										"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
//
//								canceltype.selectByVisibleText("Customer");
								
								//shadow dom code to select customer type------------
								wait.until(ExpectedConditions.visibilityOf(shadowDomHostElement16));	
								Select canceltype = new Select(shadowDomHostElement16);
								canceltype.selectByVisibleText("Customer");
								//end of shadow dom code to select customer type------------
								
								LOGS.info(Thread.currentThread() + "Cancellation Type selected: " + CancelType);
							}
							/*
							 * else if (CancelType.trim().equalsIgnoreCase("100% Satisfaction")) { Select
							 * canceltype = new Select(driver.findElement(By.xpath(
							 * "//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select"
							 * )));
							 * 
							 * canceltype.selectByVisibleText("100% Satisfaction");
							 * LOGS.info(Thread.currentThread()
							 * +"Cancellation Reason selected: "+CancelType); }
							 */

							LOGS.info(Thread.currentThread() + "Cancellation type selected");

							//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
							//		"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
							//Select cancelreason = new Select(driver.findElement(By.xpath(
							//		"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

							//cancelreason.selectByVisibleText(CancelReason);
							
							//-----shadow dom to select cancel reason
							WebElement shadowDomHostElement17 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last15 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement17);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement18 = last15.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last16 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement18);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement19 = last16.findElement(By.cssSelector("sb-field-set-table[num-columns='3']"));
							SearchContext last17 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement19);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement20 = last17.findElement(By.cssSelector("#thirdColumn"));
							SearchContext last18 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement20);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement21 = last18.findElement(By.cssSelector("sb-field-set-table-item[class='--desktop'][item='CPQ_Cancellation_Reason__c']"));
							SearchContext last19 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement21);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement22 = last19.findElement(By.cssSelector("#field"));
							SearchContext last20 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement22);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement23 = last20.findElement(By.cssSelector("#picklist"));
							SearchContext last21 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement23);
							//Thread.sleep(1000);
							WebElement shadowDomHostElement24 = last21.findElement(By.cssSelector("#myselect"));
							wait.until(ExpectedConditions.visibilityOf(shadowDomHostElement24));	
							Select cancelreason = new Select(shadowDomHostElement24);
							cancelreason.selectByVisibleText(CancelReason);							
							
							//-----shadow dom to select cancel reason
							
							
							LOGS.info(Thread.currentThread() + "Cancellation Reason selected: " + CancelReason);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
							driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(60));
							LOGS.info(Thread.currentThread() + "WaitTimeover");
							try {
								LOGS.info("Waiting for Page to load Completely");
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
								WebDriverWait waitbeforeCalculateBtn = new WebDriverWait(driver, Duration.ofSeconds(15));
								waitbeforeCalculateBtn.until(ExpectedConditions
										.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
							} catch (Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
							}
							
							LOGS.info(Thread.currentThread() + "Clicking on Calculate button");
							//LOGS.info(Thread.currentThread() + "Clicking on Calculate button:" + SLocator("Calculatebtn"));
							//wait.until(ExpectedConditions.elementToBeClickable(SLocator("Calculatebtn")));
							//wait.until(ExpectedConditions.elementToBeClickable(SLocator("Calculatebtn"))).click();
							
							//----shadow dom calculate btn----
							WebElement shadowDomHostElement25 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last22 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement25);
							WebElement shadowDomHostElement26 = last22.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last23 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement26);
							WebElement shadowDomHostElement27 = last23.findElement(By.cssSelector("sb-custom-action[name='Calculate']"));
							SearchContext last24 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement27);
							WebElement shadowDomHostElement28 = last24.findElement(By.cssSelector("#mainButton"));
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement28));
							shadowDomHostElement28.click();
							
														
							LOGS.info(Thread.currentThread() + "Clicked on Calculate button");
							//LOGS.info(Thread.currentThread() + "Clicked on Calculate button:" + SLocator("Calculatebtn"));
							// Thread.sleep(5000);

							try {
								LOGS.info("Waiting for Page to load Completely");
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
								WebDriverWait waitafterCalculateBtn = new WebDriverWait(driver, Duration.ofSeconds(15));
								waitafterCalculateBtn.until(ExpectedConditions
										.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
							} catch (Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
							}

							//wait.until(ExpectedConditions.elementToBeClickable(SLocator("QuickSavebtn")));
							//SLocator("QuickSavebtn").click();
							
							//---shadow dom for quicksavebtn -----
							WebElement shadowDomHostElement29 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last25 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement29);
							WebElement shadowDomHostElement30 = last25.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last26 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement30);
							WebElement shadowDomHostElement31 = last26.findElement(By.cssSelector("sb-custom-action[name='Quick Save']"));
							SearchContext last27 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement31);
							WebElement shadowDomHostElement32 =last27.findElement(By.cssSelector("#mainButton"));
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement32));
							shadowDomHostElement32.click();
							
							
							LOGS.info(Thread.currentThread() + "Clicked on Quick Save button");
							// code for new change in QLE after click on quick save for cancel
							LOGS.info(Thread.currentThread() +"I am there to handle quick save and continue");
							try {
								LOGS.info("Waiting for Page to load Completely");
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
								WebDriverWait waitafterQSaveBtn = new WebDriverWait(driver, Duration.ofSeconds(15));
								waitafterQSaveBtn.until(ExpectedConditions
										.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
							} catch (Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
							}
							
							/* -----handling alert ------------
							List<WebElement> AlertVerify = driver.findElements(By.xpath("//sb-i18n[text()='Alert']//ancestor::header/following-sibling::div//descendant::ul/ul"));
							LOGS.info(Thread.currentThread() +"List: " + AlertVerify);
							
							if (AlertVerify.isEmpty()) {
								LOGS.info(Thread.currentThread() +"No recommendation alert");
								AlertExists = "No";
								ImageName1 = "NoAlert";
								ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
								LOGS.info(Thread.currentThread() +"Value of Alert flag: " + AlertExists);
							} else {
								
								LOGS.info(Thread.currentThread() +"CancelAll Alert is displayed");
								//Thread.sleep(6000);
								wait.until(ExpectedConditions.elementToBeClickable(SLocator("RecommendAlert")));
								AlertMsg = SLocator("RecommendAlert").getText();
								LOGS.info("Alert Message Xpath: "+ SLocator("RecommendAlert"));
								LOGS.info(Thread.currentThread() +"Alert Message: " + AlertMsg);
								AlertMsg = AlertMsg.replace(",", "");
								LOGS.info(Thread.currentThread() +"Alert message after removing comma: " + AlertMsg);
								ImageName1 = "AlertMsg";
								ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
								LOGS.info(Thread.currentThread() +"Captured Alert message");
								try {
								wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Quick Save and Continue']")));
								wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Quick Save and Continue']"))).click();//paper-button[text()='Quick Save and Continue']
								LOGS.info(Thread.currentThread() +"Clicked Continue on Alert dialog");
								}catch(Exception e){
									LOGS.info("Clicked on alert continue in catch");
									try {
										LOGS.info("Waiting for Page to load Completely");
										driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
										WebDriverWait waitafterCalculateBtn = new WebDriverWait(driver, 15);
										waitafterCalculateBtn.until(ExpectedConditions
												.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
									} catch (Exception ex) {
										LOGS.info("Wait is over and the Pocess continues.");
									}
									//wait.until(ExpectedConditions.elementToBeClickable(SLocator("AlertContinueBtn"))).click();
									wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Quick Save and Continue']")));
									wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Quick Save and Continue']"))).click();
								}

							} */
							// code is over till here
							// Thread.sleep(5000);

							try {
								LOGS.info("Waiting for Page to load Completely");
								driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));
								WebDriverWait waitafterCalculateBtn = new WebDriverWait(driver, Duration.ofSeconds(15));
								waitafterCalculateBtn.until(ExpectedConditions
										.elementToBeClickable(By.xpath("//paper-button[text()='MyNewProducts']")));
							} catch (Exception ex) {
								LOGS.info("Wait is over and the Pocess continues.");
							}

							ExpRes = "CancelReason and CacelType should be selected before Saving the Quote.";
							ActRes = "CancelReason and CacelType are selected before Saving the Quote.";
							Status = "Pass";
							ImageName = "EditquoteForCancel";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
							ExportResults.exportTestResult("Select cancellation reason :," + ExpRes + "," + ActRes + ","
									+ Status + "," + ImgName, pr.Resultsfolderpath);

							//wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
							// Thread.sleep(15000);
							//SLocator("SaveBtn").click();
							
							// ------------------ Shadow DOM for SAVE btn in Quote Page ----------------------------------
							WebElement shadowDomHostElement33 = driver.findElement(By.cssSelector("#sbPageContainer"));
							SearchContext last28 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement33);
							WebElement shadowDomHostElement34 = last28.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
							SearchContext last29 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement34);
							WebElement shadowDomHostElement35 = last29.findElement(By.cssSelector("sb-custom-action[name='Save and Select Subscriptions']"));
							SearchContext last30 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement35);
							WebElement shadowDomHostElement36 = last30.findElement(By.cssSelector("#mainButton"));
							wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement36));
							shadowDomHostElement36.click();
							
							// driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
							LOGS.info(Thread.currentThread() + "Clicked Save on Edit Quote Page");
							// Thread.sleep(3000);
							driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
							// Thread.sleep(5000);
							wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='00N5A00000H3LaH_ileinner']")));

							ImageName = "QuotePageAfterSavingQuote";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);
							ExpRes = "CancelReason and CacelType should be Available in Quote Page";

							LOGS.info(Thread.currentThread() + "Cancel Validation in Quote Page");
							String QuotecancelReason = driver
									.findElement(By.xpath("//div[@id='00N5A00000H3LaH_ileinner']")).getText();
							String QuoteCancelType = driver
									.findElement(By.xpath("//div[@id='00N5A00000H3LaI_ileinner']")).getText();
							if (QuoteCancelType.trim().equalsIgnoreCase(CancelType)) {
								LOGS.info(Thread.currentThread()
										+ "INPUT CancelType is matched with the Cancel Type given in Quote page");
								LOGS.info(Thread.currentThread() + "Cancellation Reason in Quote page is: "
										+ QuoteCancelType);
								ActRes = "Cancel Type in Quote page is: " + QuoteCancelType + " and cancel reason is: "
										+ QuotecancelReason;
								Status = "Pass";
							} else {
								LOGS.info(Thread.currentThread() + "user given Cancel Type is: " + CancelType
										+ " not matching with the Cancel Type in quote Page: " + QuoteCancelType);
								ActRes = "user given Cancel Type is: " + CancelType
										+ " not matching with the Cancel Type in quote Page: " + QuoteCancelType;
								Status = "Fail";
							}

							ExportResults.exportTestResult("Select cancellation reason :," + ExpRes + "," + ActRes + ","
									+ Status + "," + ImgName, pr.Resultsfolderpath);
						}
					}
				} catch (Exception e) {
					ImageName = "CancelProcessException";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);

					Status = "Fail";
					ExpRes = "Cancell All Process should be verified & should be Pass";

					ActRes = "Cancel All Process Failed - Reached to Catch Exception";
					ExportResults.exportTestResult(
							"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
							pr.Resultsfolderpath);
					count = count + 1;
					LOGS.error("Error in Cancel all :: Contracts Page " + Thread.currentThread() + " : " + e);
					ExceptionMsg = "Error in Cancel all :: Contracts Page ";
					LOGS.info(Thread.currentThread() + "," + "Error in Cancel all :: Contracts Page - "
							+ e.getStackTrace());

					return Status;
				}
			}

			if (count == 0) {
				String Genrate_to_SubmitQuoteProcess = Genrate_to_SubmitQuote(changeInProduct_1);

				if (Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")) {

					LOGS.info(Thread.currentThread() + "Genrate_to_SubmitQuoteProcess - Method Failed");
					Status = "Fail";
				} else {
					LOGS.info(Thread.currentThread() + "Genrate_to_SubmitQuoteProcess - Method Passed");
					Status = "Pass";
				}

			}

		} catch (Exception e) {
			LOGS.error("Error in Cancel all Method : " + Thread.currentThread() + " : " + e);
			ExceptionMsg = "Error in Cancel all Method ";
			LOGS.info(Thread.currentThread() + "," + "Error in Cancel all Method - " + e.getStackTrace());
			ImageName = "CancelAllMethodException";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver, pr.Resultsfolderpath);

			Status = "Fail";
			ExpRes = "CancelAllResult should be verified & should be Pass";

			ActRes = "CancelAllResult Process Failed - Reached to Catch Exception";
			ExportResults.exportTestResult(
					"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,
					pr.Resultsfolderpath);
			count = count + 1;

			return Status;
		}

		return Status;
	}
	
	
	
	public  String CancelAll(String existingProduct_1, String changeInProduct_1) throws Exception {

		try {

			LOGS.info(Thread.currentThread() +"Inside Cancel All method" + existingProduct_1 + "->" + changeInProduct_1);

			SLocator("CancelAll").click();
			LOGS.info(Thread.currentThread() +"Existing products will be cancelled");

			Thread.sleep(6000);

			if (changeInProduct_1.trim().equalsIgnoreCase("Credit")) {
				Select canceltype = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

				canceltype.selectByVisibleText("Credit");
			}

			else if (changeInProduct_1.trim().equalsIgnoreCase("Customer")) {
				Select canceltype = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

				// canceltype.selectByVisibleText("Credit");
				canceltype.selectByVisibleText("Customer");
			}

			else if (changeInProduct_1.trim().equalsIgnoreCase("100% Satisfaction")) {
				Select canceltype = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

				// canceltype.selectByVisibleText("Credit");
				canceltype.selectByVisibleText("100% Satisfaction");
			}

			LOGS.info(Thread.currentThread() +"Cancellation type selected");

			Select cancelreason = new Select(driver.findElement(By.xpath(
					"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

			cancelreason.selectByVisibleText("Domain Issue");
			LOGS.info(Thread.currentThread() +"Cancellation Reason selected");

			Thread.sleep(6000);

			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");

			Thread.sleep(9000);

			ExpRes = "cancelreason caceltype should given before cancel product ";
			ActRes = "cancelreason caceltype  selected before cancel product ";
			Status = "Pass";
			ImageName = "EditquoteForCancel";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			if (!(CancelAndReplace.equalsIgnoreCase("True"))) {
				SLocator("SaveBtn").click();
				driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
			}

			if (CancelAndReplace.equalsIgnoreCase("True")) {

				LOGS.info(Thread.currentThread() +"Clearing Cancellation fields to avoid impact on newly added Product");
				Thread.sleep(5000);
				try {
					Thread.sleep(5000);
					WebElement CancelAllChkbox;

					CancelAllChkbox = driver.findElement(By.xpath("//paper-checkbox"));
					LOGS.info(Thread.currentThread() +"Unchecking the checkbox found ");
					String value = CancelAllChkbox.getAttribute("aria-checked");
					LOGS.info(Thread.currentThread() +"field value" + value);

					Thread.sleep(5000);
					if (value.contains("true")) {
						LOGS.info(Thread.currentThread() +"checked");
						CancelAllChkbox.click();
						LOGS.info(Thread.currentThread() +"Checked the checkbox");
					} else {
						CancelAllChkbox.click();
						LOGS.info(Thread.currentThread() +"Checked the checkbox in else");
					}
				} catch (Exception e) {

					LOGS.info(Thread.currentThread() +"Unable to uncheck the checkbox");
					e.printStackTrace();
				}
				Thread.sleep(6000);

				Select CancelReason = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));

				CancelReason.selectByVisibleText("--None--");
				LOGS.info(Thread.currentThread() +"Cancellation Reason selected as None");
				SLocator("QuickSavebtn").click();

				LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");

				Thread.sleep(8000);

				ExpRes = "CancelReason CancelType and CancelAll field values should be removed";
				ActRes = "CancelReason CancelType and CancelAll field values gets removed";
				Status = "Pass";
				ImageName = "EditCancelField";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Removing CancelReason CancelType and CancelAll field values :," + ExpRes
						+ "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				// read the product
				ProductIdentifierName = "07";
				String inputdata = pr.FetchProductplan(ProductIdentifierName);
				LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
				String[] allProdsplans = inputdata.split("&");
				String allProds = allProdsplans[0];
				LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
				String[] Prods = allProds.split(",");
				String allpalns = allProdsplans[1];
				LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
				String[] Plans = allpalns.split(",");
				LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
				List<WebElement> ProdRowsBefore = driver
						.findElements(By.xpath("//div[@id='droppableStandardRows']/sf-le-table-row"));
				RowsBeforeAdd = ProdRowsBefore.size();
				AddingProduct(Prods, Plans);
				LOGS.info(Thread.currentThread() +"Adding Product completed");
			}

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			Status = "Fail";
			e.printStackTrace();

		}

		return Status;
	}


public  String DowngradeModify(String existingProduct_1, String new_or_Modifying_ProductName_1) throws Exception {
	
	try {
		LOGS.info(Thread.currentThread() +"Inside Downgrade Method: "+existingProduct_1+"->"+new_or_Modifying_ProductName_1);	
		  
		String [] existingProduct_split=existingProduct_1.split("->");
		LOGS.info(Thread.currentThread() +"Product Name:"+existingProduct_split[0]);
		LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
		
		
		LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
		
		if(existingProduct_split[0].trim().equalsIgnoreCase("Website (a la carte)")){
			
			LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
			
			String existingProduct_split_QLE=" "+existingProduct_split[0]; 
			
			Thread.sleep(10000);
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(2000);
			 Thread.sleep(10000);
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(2000);
			    
			driver.findElement(By.xpath("//div[text()='"+existingProduct_split_QLE+"']//following::div[@index='7'][1]//div/div[1]"))
					.click();
			
			LOGS.info(Thread.currentThread() +"Selected"+existingProduct_split_QLE+"cancel Checkbox");
			
			LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
			
			if (!(SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {
			 
			 driver.findElement(By.xpath("//div[@field='CPQ_Cancellation_Reason__c']")).click();
			 Thread.sleep(3000);
			 
			 WebElement CancelTypeArea=SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTDynamic2");
			 CancelTypeArea.click();
			 CancelTypeArea.click();
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(2000);
			 Select CancelTypeSelection=new Select(driver.findElement(By.xpath("//div[text()=' Website (a la carte)']/parent::div/following-sibling::div[contains(@field,'Cancellation_Type')]//select")));
			 CancelTypeSelection.selectByVisibleText("Customer");
			 Thread.sleep(2000);
			 LOGS.info(Thread.currentThread() +"Selected cancel type"); 
			 Robot robot=new Robot();
			 robot.keyPress(KeyEvent.VK_ENTER);
			 robot.keyRelease(KeyEvent.VK_ENTER);
			 Thread.sleep(2000);
			 LOGS.info(Thread.currentThread() +"Pressed enter"); 
			
			 Thread.sleep(5000);
			 
			 Thread.sleep(3000);
				
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 WebElement CancelReasonArea=SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRDynamic2");
			 CancelReasonArea.click();
			 CancelReasonArea.click();
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(3000); 
			 Select CancelReasonSelection=new Select(SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRSelectDynamic2"));
			 CancelReasonSelection.selectByVisibleText("Domain Issue");
			 LOGS.info(Thread.currentThread() +"Selected cancel Reason");
			 
			 robot.keyPress(KeyEvent.VK_ENTER);
			 robot.keyRelease(KeyEvent.VK_ENTER);
			 Thread.sleep(2000);
			 LOGS.info(Thread.currentThread() +"Pressed enter"); 
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(2000);
			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
			
			ExpRes = "cancelreason caceltype should given before cancel product ";
			ActRes = "cancelreason caceltype  selected before cancel product ";
			ImageName = "EditquoteForCancel";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			}
			Thread.sleep(5000);
			
			String [] new_or_Modifying_ProductName_Split= new_or_Modifying_ProductName_1.split("->");
		    LOGS.info(Thread.currentThread() +"Product Name:"+new_or_Modifying_ProductName_Split[0]);
		    LOGS.info(Thread.currentThread() +"Plan Name:"+new_or_Modifying_ProductName_Split[1]);

		    String[] Prods1=new String[]{new_or_Modifying_ProductName_Split[0]};
		    String[] Plans2=new String[]{new_or_Modifying_ProductName_Split[1]};
		  
		    LOGS.info(Thread.currentThread() +"hey i am here 2");
		  
		    AddingProduct(Prods1, Plans2);
		    LOGS.info(Thread.currentThread() +"Adding Product completed");
			
		  
		    ExpRes = "Downgrade with "+ new_or_Modifying_ProductName_1;
		    ActRes = "Downgrade with "+ new_or_Modifying_ProductName_1;
		    ImageName = "Adding replacemet product";
		    ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		    ExportResults.exportTestResult(
					"Adding replacemet product," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			
		}
		else if(existingProduct_split[0].equalsIgnoreCase("Search (a la carte)")){
			try {
				
				LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
				
				String existingProduct_split_QLE=" "+existingProduct_split[0]; 
				Thread.sleep(5000);
				    
				driver.findElement(By.xpath("//div[text()='"+existingProduct_split_QLE+"']//following::div[@index='7'][1]//div/div[1]"))
						.click();
				
				LOGS.info(Thread.currentThread() +"Selected"+existingProduct_split_QLE+"cancel Checkbox");
				
				LOGS.info(Thread.currentThread() +"Plan Name:"+existingProduct_split[1]);
				Thread.sleep(5000);
				
				if (!(SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {
				 
				 driver.findElement(By.xpath("//div[@field='CPQ_Cancellation_Reason__c']")).click();
				 Thread.sleep(5000);
				 
				 WebElement CancelTypeArea=SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTDynamic2");
				 CancelTypeArea.click();
				 CancelTypeArea.click();
				 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				 Thread.sleep(5000);
				 Select CancelTypeSelection=new Select(driver.findElement(By.xpath("//select[@class= 'myselect style-scope sb-select --desktop style-scope sf-le-table-row']")));
				 CancelTypeSelection.selectByVisibleText("Customer");
				 Thread.sleep(2000);
				 LOGS.info(Thread.currentThread() +"Selected cancel type"); 
				 Robot robot=new Robot();

				 robot.keyPress(KeyEvent.VK_ENTER);
				 robot.keyRelease(KeyEvent.VK_ENTER);
				 Thread.sleep(2000);
				 LOGS.info(Thread.currentThread() +"Pressed enter"); 
				
				 Thread.sleep(5000);
				 
				 Thread.sleep(3000);
					
				 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				 WebElement CancelReasonArea=SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRDynamic2");
				 CancelReasonArea.click();
				 CancelReasonArea.click();
				 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				 Thread.sleep(5000); 
				 //Select CancelReasonSelection=new Select(SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRSelectDynamic2"));
				 Select CancelReasonSelection=new Select(driver.findElement(By.xpath("//select[@class= 'myselect style-scope sb-select --desktop style-scope sf-le-table-row']")));
				 CancelReasonSelection.selectByVisibleText("Domain Issue");
				 LOGS.info(Thread.currentThread() +"Selected cancel Reason");
				 
				 robot.keyPress(KeyEvent.VK_ENTER);
				 robot.keyRelease(KeyEvent.VK_ENTER);
				 Thread.sleep(2000);
				 LOGS.info(Thread.currentThread() +"Pressed enter"); 
				 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				 Thread.sleep(2000);
				SLocator("QuickSavebtn").click();
				LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
				
				ExpRes = "cancelreason caceltype should given before cancel product ";
				ActRes = "cancelreason caceltype  selected before cancel product ";
				ImageName = "EditquoteForCancel";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult(
						"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				
				}
				Thread.sleep(5000);
				
				String [] new_or_Modifying_ProductName_Split= new_or_Modifying_ProductName_1.split("->");
			    LOGS.info(Thread.currentThread() +"Product Name:"+new_or_Modifying_ProductName_Split[0]);
			    LOGS.info(Thread.currentThread() +"Plan Name:"+new_or_Modifying_ProductName_Split[1]);

			    String[] Prods1=new String[]{new_or_Modifying_ProductName_Split[0]};
			    String[] Plans2=new String[]{new_or_Modifying_ProductName_Split[1]};
					    
			    LOGS.info(Thread.currentThread() +"Hey we are going to add SGC");
			AddingProduct(Prods1, Plans2);
			    
				LOGS.info(Thread.currentThread() +"Adding Product completed");
				Status = "Pass";

			} catch (Exception e) {
				Status = "Fail";
				e.printStackTrace();
				count = count + 1;
			}
			return Status;
		}
		
		
		return "Pass";
	} catch (Exception e) {
		e.printStackTrace();
		// TODO Auto-generated catch block
	}
		return "Fail";
	}




//----------------------------
public  String upgradeModify(String existingProduct_1, String new_or_Modifying_ProductName_1) throws Exception {
	

	
	try {
		LOGS.info(Thread.currentThread() +"Inside upgrade Method: "+existingProduct_1+"->"+new_or_Modifying_ProductName_1);	
		  
		String [] existingProduct_split=existingProduct_1.split("->");
		LOGS.info(Thread.currentThread() +"Product Name: "+existingProduct_split[0]);
		LOGS.info(Thread.currentThread() +"Plan Name: "+existingProduct_split[1]);
		
		if(existingProduct_split[0].trim().equalsIgnoreCase("Website (a la carte)")||existingProduct_split[0].equalsIgnoreCase("Search - Guaranteed Clicks")){
			
			LOGS.info(Thread.currentThread() +"Plan Name: "+existingProduct_split[1]);
			
			
			String existingProduct_split_QLE=" "+existingProduct_split[0]; 
			    
			driver.findElement(By.xpath("//div[text()='"+existingProduct_split_QLE+"']//following::div[@index='7'][1]//div/div[1]"))
					.click();
			
			LOGS.info(Thread.currentThread() +"Selected"+existingProduct_split_QLE+"cancel Checkbox");
			Thread.sleep(3000);
			
			if (!(SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {
			 Thread.sleep(2000);
			
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 WebElement CancelTypeArea=SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTDynamic2");
			 CancelTypeArea.click();
			 Thread.sleep(2000);
			 CancelTypeArea.click();
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Select CancelTypeSelection=new Select(SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTSelectDynamic2"));
			 CancelTypeSelection.selectByVisibleText("Customer");
			 LOGS.info(Thread.currentThread() +"Selected cancel type"); 
			 Robot robot=new Robot();
			 robot.keyPress(KeyEvent.VK_ENTER);
			 robot.keyRelease(KeyEvent.VK_ENTER);
			 Thread.sleep(2000);
			 LOGS.info(Thread.currentThread() +"Pressed enter"); 
			 
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 WebElement CancelReasonArea=SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRDynamic2");
			 Thread.sleep(2000);
			 CancelReasonArea.click();
			 Thread.sleep(2000);
			 CancelReasonArea.click();
			 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			 Thread.sleep(3000); 
			 Select CancelReasonSelection=new Select(SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRSelectDynamic2"));
			 CancelReasonSelection.selectByVisibleText("Domain Issue");
			 LOGS.info(Thread.currentThread() +"Selected cancel Reason");
			
			 robot.keyPress(KeyEvent.VK_ENTER);
			 robot.keyRelease(KeyEvent.VK_ENTER);
			 Thread.sleep(2000);
			 LOGS.info(Thread.currentThread() +"Pressed enter"); 
			 Thread.sleep(3000);
			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
			
			ExpRes = "cancelreason caceltype should given before cancel product ";
			ActRes = "cancelreason caceltype  selected before cancel product ";
			ImageName = "EditquoteForCancel";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			}
			Thread.sleep(5000);

			String [] new_or_Modifying_ProductName_Split= new_or_Modifying_ProductName_1.split("->");
		    LOGS.info(Thread.currentThread() +"Product Name:"+new_or_Modifying_ProductName_Split[0]);
		    LOGS.info(Thread.currentThread() +"Plan Name:"+new_or_Modifying_ProductName_Split[1]);

		    String[] Prods1=new String[]{new_or_Modifying_ProductName_Split[0]};
		    String[] Plans2=new String[]{new_or_Modifying_ProductName_Split[1]};

		    AddingProduct(Prods1, Plans2);
		    LOGS.info(Thread.currentThread() +"Adding Product completed");
			
		    ExpRes = "Upgrade with"+ new_or_Modifying_ProductName_1;
		    ActRes = "Upgrade with "+new_or_Modifying_ProductName_1;
		    ImageName = "Adding replacemet product";
		    ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		    ExportResults.exportTestResult(
					"Adding replacemet product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			
		}
		else if(existingProduct_split[0].equalsIgnoreCase("Social (a la carte)")||existingProduct_split[0].equalsIgnoreCase("Display (a la carte)")||existingProduct_split[0].equalsIgnoreCase("Search (a la carte)")){

			driver.findElement(By.xpath("//div[text()=' "+existingProduct_split[0]+"']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
			LOGS.info(Thread.currentThread() +"Reconfigure Line");	
			
			String []insideQLEproduct=existingProduct_split[0].split(" ");
			
			if(insideQLEproduct[0].equalsIgnoreCase("Search")){
				
				insideQLEproduct[0]="Managed Search";
			}
			
			String userDefindBudget=SLocatorDynamic("BudgetTADynamic1_"+insideQLEproduct[0]+ "_BudgetTADynamic2").getText();
			LOGS.info(Thread.currentThread() +"Price present in Monthy Investment"+userDefindBudget);
			
			String BudgetToEnter=userDefindBudget;
			
			if (new_or_Modifying_ProductName_1.equalsIgnoreCase("Search (a la carte)->3 Months Package Term")){
				
				BudgetToEnter="4000";
				
				LOGS.info(Thread.currentThread() +BudgetToEnter+"By Setting this budget, Tearm will vary from '6 Months Package Term' to '3 Months Package Term' as upgrade process");
				
			}
			else if(new_or_Modifying_ProductName_1.equalsIgnoreCase("Display (a la carte)->6 months Package Term")||new_or_Modifying_ProductName_1.equalsIgnoreCase("Display (a la carte)->3 months Package Term")){
				
				if(new_or_Modifying_ProductName_1.equalsIgnoreCase("Display (a la carte)->6 months Package Term")){
				
				BudgetToEnter="400";
				
				LOGS.info(Thread.currentThread() +BudgetToEnter+"By Setting this budget tearm will vary from  '12 months Package Term' to '6 months Package Term' as upgrade process");
				
				}else if(new_or_Modifying_ProductName_1.equalsIgnoreCase("Display (a la carte)->3 months Package Term")){
					
				BudgetToEnter="5000";
				}
				
				LOGS.info(Thread.currentThread() +BudgetToEnter+"By Setting this budget tearm will vary from  '12 months Package Term' to '3 months Package Term' as upgrade process");
			}
			
			else if (new_or_Modifying_ProductName_1.equalsIgnoreCase("Social (a la carte)->6 months Package Term")){
				
				
				BudgetToEnter="500";
				
				LOGS.info(Thread.currentThread() +BudgetToEnter+"By Setting this budget tearm will vary from  '12 months Package Term' to '6 months Package Term' as upgrade process");
			}
			
			
			LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
			Actions actions = new Actions(driver);
			actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" +insideQLEproduct[0]+ "_BudgetTADynamic2"));
			actions.click();
			LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
			actions.sendKeys(String.valueOf(BudgetToEnter));
			actions.build().perform();
			LOGS.info(Thread.currentThread() +"Entered the upgraded budget price"+BudgetToEnter);	
			
			Status="Pass";
			
			LOGS.info(Thread.currentThread() +"1st budget SAVE");	
			
			driver.findElement(By.xpath("//paper-button[@id='pcSave']")).click();
			
			Thread.sleep(5000);
			
			LOGS.info(Thread.currentThread() +"1st QLE SAVE");	
			
			driver.findElement(By.xpath("//sb-custom-action[@name='Save and Select Subscriptions']")).click();
			
			Thread.sleep(5000);
			
		}
		
		return "Pass";
	} catch (Exception e) {
		
		e.printStackTrace();
		// TODO Auto-generated catch block
		return "Fail";
		
	}

}

//_____________________________________________________________________________________________________________________________________

public  String priceChange(String existingProduct_1 , String new_or_Modifying_ProductName_1){
	 
	 
	try {
		
		LOGS.info(Thread.currentThread() +"Inside Price Change Method: "+existingProduct_1+" "+new_or_Modifying_ProductName_1);	
		 String [] productCPQ1={};
		 String [] NewproductCPQ1={};
		
		if(existingProduct_1.contains("Search - Guaranteed Clicks")){
			
			productCPQ1=existingProduct_1.split("->");
			LOGS.info(Thread.currentThread() +"ProductName"+productCPQ1[0]);
			LOGS.info(Thread.currentThread() +"PlanName"+productCPQ1[1]);
			
			NewproductCPQ1=existingProduct_1.split("->");
			LOGS.info(Thread.currentThread() +"NewpriceProductName"+NewproductCPQ1[0]);
			LOGS.info(Thread.currentThread() +"NewpricePlanName"+NewproductCPQ1[1]);
			
			
			driver.findElement(By.xpath("//div[text()=' "+productCPQ1[0]+"']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
			LOGS.info(Thread.currentThread() +"Reconfigure Line");
			
			if(NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_185")){
				 Select guaranteedClicks = new Select(driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));	
				guaranteedClicks.selectByVisibleText("60 Clicks - $185");
				LOGS.info(Thread.currentThread() +"Selected : 60 Clicks - $185");
			}else if(NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_270")){
				Select guaranteedClicks = new Select(driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));	
				guaranteedClicks.selectByVisibleText("90 Clicks - $270");
				LOGS.info(Thread.currentThread() +"Selected : 90 Clicks - $270");
			}else if(NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_140")){
				Select guaranteedClicks = new Select(driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));	
				guaranteedClicks.selectByVisibleText("45 Clicks - $140");
				LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
			}
		}else if(existingProduct_1.equalsIgnoreCase("Social (a la carte)")||existingProduct_1.equalsIgnoreCase("Display (a la carte)")||existingProduct_1.equalsIgnoreCase("Search (a la carte)")||existingProduct_1.equalsIgnoreCase("Mobile Boost")){
			
			driver.findElement(By.xpath("//div[text()=' "+existingProduct_1+"']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
			LOGS.info(Thread.currentThread() +"Reconfigure Line");
			
			
			String []insideQLEproduct=existingProduct_1.split(" ");
			
			if(insideQLEproduct[0].equalsIgnoreCase("Search")){
				
				insideQLEproduct[0]="Managed Search";
			}
			
			String userDefindBudget=SLocatorDynamic("BudgetTADynamic1_"+insideQLEproduct[0]+ "_BudgetTADynamic2").getText();
			LOGS.info(Thread.currentThread() +"Price present in Monthy Investment"+userDefindBudget);
					
			String userDefindBudget1 = userDefindBudget.substring(1, userDefindBudget.length());
			
			float convertMinBudg = Float.parseFloat(userDefindBudget1);
			
			float BudgetToEnter=convertMinBudg +10;
			
			LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
			Actions actions = new Actions(driver);
			actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" +insideQLEproduct[0]+ "_BudgetTADynamic2"));
			actions.click();
			LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
			actions.sendKeys(String.valueOf(BudgetToEnter));
			actions.build().perform();
			LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");	
			
		}

			driver.findElement(By.xpath("//h1[text()='Configure Products']//following::paper-button/sb-i18n[text()='Save']")).click();
			LOGS.info(Thread.currentThread() +"Clicked on Save Button");
			Thread.sleep(5000);


			SLocator("SaveBtn").click();
			LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");

			Status="Pass";

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block

			Status="Fail";
			e.printStackTrace();
		}


		return Status;


	}

	public  String Genrate_to_SubmitQuote(String changeInProduct_1) throws Exception{
		
		 try {

             LOGS.info(Thread.currentThread() + "Genrate_to_SubmitQuote method started");
             driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
             wait.until(ExpectedConditions.visibilityOfElementLocated(
            		 By.xpath("//td[text()='Remaining Actions']/following-sibling::td/div")));
             
             OpptyNameQuoteDetls = SLocator("OpptyNameValue").getText();
 			BusinessNameQuoteDetls = SLocator("BusinessNameValue").getText();
 			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
 			QuoteNumber = SLocator("QuoteNumb").getText();
 			RemainingActions = SLocator("RemainingActionsValue").getText();

 			ImageName = "QuoteDetailsPage";
 			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
 			ExpRes = "Capture QuoteNumber - BusinessName - OpportunityName - OrderStage - Remaining Actions Details from Quote Detail Page";
 			ActRes = "Quote Number:" + QuoteNumber + "\nBusiness Name:" + BusinessNameQuoteDetls + "\nOpportunity Name:"
 					+ OpptyNameQuoteDetls + "\nOrder Stage:" + OrderStageQuoteDetls + "\nRemaining Actions:"
 					+ RemainingActions;
 			Status = "Pass";
 			ExportResults.exportTestResult("Capture Details from Quote Detail Page Information: ," + ExpRes + ","
 					+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

 			
             if (RemainingActions.contains("Capture Signature")) {

                   if (SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("OpsWizard")) {

                          capture_signature("Voice Verify");

                          LOGS.info(Thread.currentThread() + "Capture Signature completed");

                   } else {

                          capture_signature("Digital Signature");

                          LOGS.info(Thread.currentThread() + "Capture Signature completed");

                          driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                   }

             }


             RemainingActions = SLocator("RemainingActionsValue").getText();

             if (RemainingActions.contains("Payment")) {

                   PaymentProcess();

                   LOGS.info(Thread.currentThread() + "Payment completed");

                   driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);

             }



             RemainingActions = SLocator("RemainingActionsValue").getText();

             if (RemainingActions.contains("Consultation")) {

                   SelectConsultation("On Demand");

                   LOGS.info(Thread.currentThread() + "SelectConsultation");
                     driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);

             }


             RemainingActions = SLocator("RemainingActionsValue").getText();
             
                if (RemainingActions.contains("Submit Quote")) {
            	 
                     GenerateDocumentResult = GenerateDocument(GenerateDocument);

   				if (GenerateDocumentResult.equalsIgnoreCase("Fail")) {
   					Status = "Fail";
   					LOGS.error("Error while Generating the document before submitting the Quote "+ Thread.currentThread() );
   					ExceptionMsg = "Error while Generating the document before submitting the Quote.";
   					LOGS.info(Thread.currentThread() + "," +"Error while Generating the document before submitting the Quote." );
   					LOGS.info(Thread.currentThread() +"Error in Generate Document");
   					count = count + 1;
   					
   				}
                   driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                   submitFinalPage();

             }

             LOGS.info(Thread.currentThread() + "Cancel Orders Submitted Successfully");



      } catch (Exception e) {
             Status = "Fail";
             LOGS.error("Error while Submitting the Quote " + Thread.currentThread() + " : " + e);
             ExceptionMsg = "Error while Submitting the Quote.";
             LOGS.info(Thread.currentThread() + "," + "Error while Submitting the Quote - " + e.getStackTrace());
             return Status;
      }

   return Status;
		
		
		
		
		/*

		try {
			LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuote method started");
			//BusinessNameQuoteDetls = "";
			GenerateDocument(GenerateDocument);
			LOGS.info(Thread.currentThread() +"Generate Document Completed");
			Thread.sleep(5000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(5000);

			OpptyNameQuoteDetls = SLocator("OpptyNameValue").getText();
			BusinessNameQuoteDetls = SLocator("BusinessNameValue").getText();
			OrderStageQuoteDetls = SLocator("OrderStageValue").getText();
			QuoteNumber = SLocator("QuoteNumb").getText();
			RemainingActions = SLocator("RemainingActionsValue").getText();

			ImageName = "QuoteDetailsPage";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture QuoteNumber - BusinessName - OpportunityName - OrderStage - Remaining Actions Details from Quote Detail Page";
			ActRes = "Quote Number:" + QuoteNumber + "\nBusiness Name:" + BusinessNameQuoteDetls + "\nOpportunity Name:"
					+ OpptyNameQuoteDetls + "\nOrder Stage:" + OrderStageQuoteDetls + "\nRemaining Actions:"
					+ RemainingActions;
			Status = "Pass";
			ExportResults.exportTestResult("Capture Details from Quote Detail Page Information: ," + ExpRes + ","
					+ ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			Thread.sleep(5000);	
	if (RemainingActions.contains("Capture Signature")) {
				
				if(SalesRepType.equalsIgnoreCase("TSales")){
					
					capture_signature("Voice Verify");
					LOGS.info(Thread.currentThread() +"Capture Signature completed");
				}
				else{	
					capture_signature("Digital Signature");
					LOGS.info(Thread.currentThread() +"Capture Signature completed");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
				}
			}

			if(Cardnum.equalsIgnoreCase("DIG_315_1036_TC09")){

				try {
					String hasvalidregtrueaftercapturesignature = SalesforceTasks.quatePagevalidate("hasvalidregtrueaftercapturesignature");

					if (hasvalidregtrueaftercapturesignature.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"Failed in quate Page validate Method");
						Status = "Fail";
						org.testng.Assert.fail("Failed in quate Page validate method");

					}
				} catch (Exception e) {
					count = count + 1;
					org.testng.Assert.fail("Failed in quatePagevalidate");
					LOGS.info(Thread.currentThread() +"Error in quatePagevalidate");
				}

			}
			
			Thread.sleep(3000);
			RemainingActions = SLocator("RemainingActionsValue").getText();

			if (RemainingActions.contains("Payment")) {
				PaymentProcess();
				LOGS.info(Thread.currentThread() +"Payment completed");
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
			}

			if(Cardnum.equalsIgnoreCase("DIG_315_1039_TC12")){

				try {
					LOGS.info(Thread.currentThread() +"Since we changed the budget we have skipped Payment and Conceltation");
					String After_SelectConsultation = SalesforceTasks.quatePagevalidate("After_SelectConsultation");

					if (After_SelectConsultation.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"Failed in quate Page validate Method");
						Status = "Fail";
						org.testng.Assert.fail("Failed in quate Page validate method");

					}
				} catch (Exception e) {
					count = count + 1;
					org.testng.Assert.fail("Failed in quatePagevalidate");
					LOGS.info(Thread.currentThread() +"Error in quatePagevalidate");
				}


			}
			Thread.sleep(3000);
			RemainingActions = SLocator("RemainingActionsValue").getText();
			if (RemainingActions.contains("Consultation")) {
				SelectConsultation("POS");
				LOGS.info(Thread.currentThread() +"SelectConsultation");
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
			}


			if (Cardnum.equalsIgnoreCase("DIG_315_1038_TC11")) {

				try {
					String After_SelectConsultation = SalesforceTasks.quatePagevalidate("After_SelectConsultation");

					if (After_SelectConsultation.equalsIgnoreCase("Fail")) {
						LOGS.info(Thread.currentThread() +"Failed in quate Page validate Method");
						Status = "Fail";
						org.testng.Assert.fail("Failed in quate Page validate method");

					}
				} catch (Exception e) {
					count = count + 1;
					org.testng.Assert.fail("Failed in quatePagevalidate");
					LOGS.info(Thread.currentThread() +"Error in quatePagevalidate");
				}

			}
		 
			Thread.sleep(3000);
			RemainingActions = SLocator("RemainingActionsValue").getText();
			
			if (RemainingActions.contains("Submit Quote")) {
				
				GenerateDocumentResult = GenerateDocument(GenerateDocument);
				if (GenerateDocumentResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.error("Error while Generating the document before submitting the Quote "+ Thread.currentThread() );
					ExceptionMsg = "Error while Generating the document before submitting the Quote.";
					LOGS.info(Thread.currentThread() + "," +"Error while Generating the document before submitting the Quote." );
					LOGS.info(Thread.currentThread() +"Error in Generate Document");
					count = count + 1;
					
				}
				
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);
				submitFinalPage();
			}

			LOGS.info(Thread.currentThread() +"Cancel Orders Submitted Successfully");


		} catch (Exception e) {
			// TODO Auto-generated catch block
			Status="Fail";
			LOGS.error("Error while Submitting the Quote "+ Thread.currentThread() +" : " +e);
			ExceptionMsg = "Error while Submitting the Quote.";
			LOGS.info(Thread.currentThread() + "," +"Error while Submitting the Quote - " + e.getMessage());
			
			return Status;
		}

		return Status;


	*/}

	public String AmendBlockDateworkAround() {

		try {
			SFInspectorPI("Amendment Block Date");

			LOGS.info(Thread.currentThread() +"SFInspectorPI method execution completed");
			Thread.sleep(4000);
			//SLocator("editBtnSfInp").click();

			driver.findElement(By.xpath("//button[text()='Edit']")).click();

			LOGS.info(Thread.currentThread() +"clicked on edit btn in SF inspector");

			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(4000);
			String amendBlockDate=driver.findElement(By.xpath("//tr[contains(@title,'Amend_Block_Date__c')]/td[4]/textarea")).getText();
			LOGS.info(Thread.currentThread() +"Amend Block Date set by system: "+amendBlockDate);
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
			 // Getting current date
			 Calendar cal = Calendar.getInstance();
			 System.out.println(cal);
			 // Displaying current date in the desired format
			 System.out.println("Current Date: " + sdf.format(cal.getTime()));
			 //cal.add(Calendar.MONTH, -1);
			 cal.add(Calendar.DAY_OF_MONTH, -1);// To update the date for webiste to tomorrow
			 // Date after adding the days to the current date
			 String newDate = sdf.format(cal.getTime());
			 // Displaying the new Date after addition of Days to current date
			 LOGS.info(Thread.currentThread() +"Amend Block Date set by code:" + newDate);
			driver.findElement(By.xpath("//tr[contains(@title,'Amend_Block_Date__c')]/td[4]/textarea")).clear();
			driver.findElement(By.xpath("//tr[contains(@title,'Amend_Block_Date__c')]/td[4]/textarea")).sendKeys(newDate.replace("/", "-")  );
			Thread.sleep(5000);
			driver.findElement(By.xpath("//button[text()='Save']")).click();
			LOGS.info(Thread.currentThread() +"Save clicked in SF inspector");


			Status="Pass";

		} catch (Exception e) {
			// TODO Auto-generated catch block

			Status = "Fail";
			e.printStackTrace();
		}

		return Status;
	}


	public  String AmendCancelUsingInputSheet() throws Exception {

		try {
			LOGS.info(Thread.currentThread() +"AmendCancelUsingInputSheet Method Started");

			// to set path of excel (excel file path)
			SalesforceTasks
					.Xls_Reader(regardingfilesPath+"\\AmendProcess//CancelInputSheet.xlsx");
			// to get row count (sheetName)
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				count=0;
				LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

				String folderName=TestCaseName+"_Data"+(lineItemInt-1);
				Resultsfolderpath = pr.createFolder(folderName);
				pr.preparingOutputSheets();

				SalesRepType = SalesforceTasks.getCellData("InputSheet", "Sales Rep Type", lineItemInt);
				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
				// to get cell data ( Sheet Name, column Name, Rownumber)
				cancelProcessType = SalesforceTasks.getCellData("InputSheet", "Process", lineItemInt);
				String cancelProduct = SalesforceTasks.getCellData("InputSheet", "Product to be cancelled",
						lineItemInt);
				CancelReason = SalesforceTasks.getCellData("InputSheet", "Cancel Reason", lineItemInt);
				CancelType = SalesforceTasks.getCellData("InputSheet", "Cancel Type", lineItemInt);
				CancelOutcome= SalesforceTasks.getCellData("InputSheet", "Cancellation Outcome", lineItemInt);
				ProductIdentifierName=SalesforceTasks.getCellData("InputSheet", "New Product ID", lineItemInt);

				LOGS.info(Thread.currentThread() +SalesRepType + " # " + businessID + " # " + cancelProcessType + " # " + cancelProduct + " # "
						+ CancelReason + " # " + CancelType + " # " + CancelOutcome + " # " + ProductIdentifierName);
				String CancelDetails=  CancelType + "->" + CancelReason + "->" + CancelOutcome;

				try {
					SFLogin();
					LOGS.info(Thread.currentThread() +"SF Login is successfully done");
				} catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Error in SF Login- " + e.getMessage());
					count=count+1;
				}


				if (count == 0) {
					try {
						String Day3ProcessResult = Day3Process(businessID, cancelProduct,
								cancelProcessType, CancelDetails, ProductIdentifierName);

						ImageName = "Day3ProcessResult";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
							Status = "Fail";
							LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
							ActRes = "Day3 Process is failed";
							count = count + 1;
						} else {
							Status = "Pass";
							LOGS.info(Thread.currentThread() +"Day3 Process Method Verified");
							JiraStatus = "Passed";
							ActRes = "Day3 Process is Verified Successfully";
						}
						ExpRes = "Day3 Process verification and it should be Successful & should be Pass";
						ExportResults.exportTestResult(
								"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						//driver.quit();
					} catch (Throwable e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in Day3 Process Result " + e.getMessage());
						count = count + 1;
						// driver.quit();
					}
				}

				//callZephyr();
			}

		} catch (Exception e) {
			ImageName = "Day3ProcessResult";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			e.printStackTrace();
			Status = "Fail";
			ExpRes = "Day3 Process should be verified & should be Pass";
			e.printStackTrace();
			ActRes = "Day3 Process Failed - Reached to Catch Exception";
			ExportResults
			.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}

		return Status;
	}


	public  String CancelAllProduct(String cancelDetails) throws Exception {

		try {
			LOGS.info(Thread.currentThread() +"Inside Cancel All method");
			int noLines = 0;

			String[] cancelDetails_split = cancelDetails.split("->");
			CancelType = cancelDetails_split[0];
			CancelReason = cancelDetails_split[1];
			CancelOutcome = cancelDetails_split[2];

			LOGS.info(Thread.currentThread() +"Cancellation Type:" + CancelType);
			LOGS.info(Thread.currentThread() +"Cancellation Reason:" + CancelReason);
			LOGS.info(Thread.currentThread() +"Cancellation Outcome:" + CancelOutcome);

			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);

			ExpRes = "Cancellation Type - Cancellation Reason - Cancellation Outcome details taking from Input sheet";
			ImageName = "CancellationDetails";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ActRes = "Cancellation Details:\nType-" + cancelDetails_split[0] + "\nReason-"
					+ cancelDetails_split[1] + "\nCancellation Outcome-" + cancelDetails_split[2];
			ExportResults
			.exportTestResult("Cancellation Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			List<WebElement> lineItems = driver.findElements(By.xpath("//div[@id='items']/div"));
			noLines = lineItems.size();
			LOGS.info(Thread.currentThread() +"Available line items in the product page: " + noLines);

			SLocator("CancelAll").click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"Selected Cancel All CheckBox");

			QuoteNumber=SLocator("QuoteNumbQLE").getText();
			LOGS.info(Thread.currentThread() +"Quote Number:"+QuoteNumber);
			ExpRes = "Quote Number Verification";
			ActRes="Quote Number:"+QuoteNumber;
			ImageName = "QuoteNumberQLEPage";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ExportResults
			.exportTestResult("Capture Quote Number From QLE:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			if (!CancelType.equalsIgnoreCase("None")) {
				Select selectCancelType = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Type']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
				selectCancelType.selectByVisibleText(CancelType);
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Cancellation Type Selected");
			}

			if (!CancelReason.equalsIgnoreCase("None")) {
				Select selectCancelReason = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Reason']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
				selectCancelReason.selectByVisibleText(CancelReason);
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Cancellation Reason Selected");
			}


			if (CancelOutcome.equalsIgnoreCase("None")) {
				LOGS.info(Thread.currentThread() +"Cancellation Outcome is defaults to None");

			} else {
				Select selectCancelOutcome = new Select(driver.findElement(By.xpath(
						"//div[text()='Cancellation Outcome']//parent::div[@class='td style-scope sb-field-set-table-item --desktop']//select")));
				selectCancelOutcome.selectByVisibleText(CancelOutcome);
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Cancellation Outcome Selected");
			} 


			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);

			if ((CancelReason.equalsIgnoreCase("None")) && (CancelType.equalsIgnoreCase("None"))){

				String cancelTypeReasonVerification="";
				String ExpectedMessage="";

				if ((SalesRepType.equalsIgnoreCase("OpsWizard")) || (SalesRepType.equalsIgnoreCase("SPE"))) {
					ExpRes = "Validate the Message -'Cancellation reason and type are required if Cancel All is selected.' for "
							+ SalesRepType;
					try {
						cancelTypeReasonVerification = SLocator("NotifyAlert").getText();
						LOGS.info(Thread.currentThread() +"Validation Message->" + cancelTypeReasonVerification);

						ExpectedMessage="Cancellation reason and type are required if Cancel All is selected";
						if (cancelTypeReasonVerification.contains(ExpectedMessage)){
							Status="Pass";
						} else {
							Status="Fail";
						}
						ActRes = "Getting Validation Message as " + cancelTypeReasonVerification 
								+ " for Sales Rep " + SalesRepType;

					} catch (Exception e) {
						e.printStackTrace();
						Status="Fail";
						ActRes = "Validation message missing for " + SalesRepType 
								+ " & Should be - "+ExpectedMessage;
					}

					ImageName = "ValidationMessage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult("Cancel Reason & Cancel Type Verification:," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

					count=count+1;
					//						driver.quit();
				}
			}

			if (( (CancelType.equalsIgnoreCase("Customer")) 
					&& ((CancelReason.equalsIgnoreCase("Increased")) || (CancelReason.equalsIgnoreCase("Decreased")))) 
					||  ((CancelType.equalsIgnoreCase("Spendout")) 
							&& (CancelReason.equalsIgnoreCase("Budget Moved")) )) {

				String cancelTypeReasonVerification="";
				String ExpectedMessage="";

				ExpRes = "Validate the Message -'These values are unavailable as Cancellation Reason for the User.' for the Sales Rep-"
						+ SalesRepType;
				try {
					ExpectedMessage = "These values are unavailable as Cancellation Reason for the User";

					cancelTypeReasonVerification = SLocator("NotifyAlert").getText();
					LOGS.info(Thread.currentThread() +"Validation Message->" + cancelTypeReasonVerification);

					if (cancelTypeReasonVerification.contains(ExpectedMessage)) {
						Status = "Pass";
					} else {
						Status = "Fail";
					}
					ActRes = "Getting Validation Message as " + cancelTypeReasonVerification + " for Sales Rep "
							+ SalesRepType;

				} catch (Exception e) {
					e.printStackTrace();
					Status = "Fail";
					ActRes = "Validation message missing for " + SalesRepType + " & Should be - " + ExpectedMessage;
				}

				ImageName = "ValidationMessage";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Cancel Reason & Cancel Type Verification:," + ExpRes + "," + ActRes
						+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				count = count + 1;
			}
			if (count == 0) {
				String AttrbtLineItem = "";

				ExpRes = "Cancel line item Verification";
				for (int i = 1; i <= noLines; i++) {
					String lineItemPath = "//div[@id='items']/div[" + i + "]//div/img[@alt='X']";
					LOGS.info(Thread.currentThread() +"LineItem Path:" + lineItemPath);
					try {
						AttrbtLineItem = driver.findElement(By.xpath(lineItemPath)).getAttribute("class");
						LOGS.info(Thread.currentThread() +"Attribute Line Item" + AttrbtLineItem);
					} catch (Exception e) {
						e.printStackTrace();
						AttrbtLineItem = "Not Found";
						Status = "Fail";
						LOGS.info(Thread.currentThread() +Status);
						break;
					}

					if (AttrbtLineItem.equalsIgnoreCase("style-scope sf-le-table-row")) {
						LOGS.info(Thread.currentThread() +Status);
						LOGS.info(Thread.currentThread() +"Attribute Line Item" + AttrbtLineItem);
					} else {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +Status);
						ActRes = "Line item not Cancelled";
						break;
					}
				}

				if (Status.equalsIgnoreCase("Fail")) {
					ActRes = "Lines are not Cancelled(X) in Line Action";
				} else
					ActRes = "Lines are Cancelled(X) in Line Action";

				ImageName = "EditquoteForCancel";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult("Cancel check mark Status Verification :," + ExpRes + "," + ActRes + ","
						+ Status + "," + ImgName,pr.Resultsfolderpath);


				// driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
				//LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
				Status = "Pass";

			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			Status = "Fail";
			e.printStackTrace();
			count=count+1;
		}

		return Status;
	}


	public  String Amend_Modify_Upgrade_Downgrade_PriceChange_InputSheet() throws Exception {

			try {
				// to set path of excel (excel file path)
				SalesforceTasks
						.Xls_Reader(regardingfilesPath+"\\AmendProcess//Day3_PriceChange_Upgrade_Downgrade.xlsx");
				
				// to get row count (sheetName)
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
				LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);
				String userRole=SalesforceTasks.getCellData("InputSheet","UserRole",lineItemInt);
				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
				String ExistingProduct_1=SalesforceTasks.getCellData("InputSheet", "Existing_Product",lineItemInt); // to get cell data ( Sheet Name, column Name, Rownumber)
				String processtoProceedwith_1=SalesforceTasks.getCellData("InputSheet","Process",lineItemInt);
				String changeInProduct_1=SalesforceTasks.getCellData("InputSheet","ChangeInProduct",lineItemInt);
				String New_or_Modifying_ProductName_1=SalesforceTasks.getCellData("InputSheet","New_or_Modifying_ProductName",lineItemInt); 

				LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # " + changeInProduct_1 + " # "
						+ New_or_Modifying_ProductName_1);

				if (userRole.equalsIgnoreCase(" ")||businessID.equalsIgnoreCase(" ")||ExistingProduct_1.equalsIgnoreCase(" ")||processtoProceedwith_1.equalsIgnoreCase(" ")||changeInProduct_1.equalsIgnoreCase(" ")||New_or_Modifying_ProductName_1.equalsIgnoreCase(" ")) {
					LOGS.info(Thread.currentThread() +"No sufficent data to run the script");
					driver.quit();
				}else {
					LOGS.info(Thread.currentThread() +"Data extrated from excel sucessfull");

				}



				try
				{	

					Properties OR = pr.loadPropertiesFiles("Order");
					SalesRepType=userRole;
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}





				String Day3ProcessResult = Day3Process_Modify(businessID, ExistingProduct_1, processtoProceedwith_1,
						changeInProduct_1, New_or_Modifying_ProductName_1);

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process Modify - Method Failed");
					ActRes = "Day 3 Process Modify failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day 3 Process Modify - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process Modify Passed";
				}
				ExpRes = "Day 3 Process Modify should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Modify Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);


				String Summary = processtoProceedwith_1+": "+changeInProduct_1+" from "+ExistingProduct_1+"to";
				String Description = "Capture Subscription Number, Product Name, Product Status, End Date details & Date Verification";
				//String jiraCardNo = JiraClass.createTaskinJira(Summary, Description);
				//TestCaseNum = ZephyrTestCase.createZephyrTestCase(Summary, Description);
				testResults ="Business Id : " + businessID;
				System.out.println("Zephyr Card No = "+TestCaseNum);
				ExportResults.CExportQuote();
			}

		} catch (Exception e) {
			ImageName = "Day3ProcessResult";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			e.printStackTrace();
			Status = "Fail";
			ExpRes = "Day 3 Process should be verified & should be Pass ";
			e.printStackTrace();
			ActRes = "Day 3 Process is failed - Reached to Catch Exception ";
			ExportResults
			.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}
		return Status;
	}

	public  String Day3Process_Modify(String buisnessID_1, String ExistingProduct_1, String processtoProceedwith_1,
			String changeInProduct_1, String New_or_Modifying_ProductName_1) throws Exception {

		try {


			LOGS.info(Thread.currentThread() +buisnessID_1+" # "+ExistingProduct_1+" # "+processtoProceedwith_1+" # "+changeInProduct_1+" # "+New_or_Modifying_ProductName_1);
			String buisnessID1=buisnessID_1.replace(" ","");

			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(buisnessID1);
			driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();

			Thread.sleep(8000);

			driver.findElement(By.xpath("//td[text()='"+buisnessID1+"']//parent::tr//th/a")).click();
			LOGS.info(Thread.currentThread() +"Clicking on Account Link");

			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);

			Thread.sleep(8000);

			ExpRes = "Account Should be Available";
			ActRes = "Account Found";
			Status ="Pass";
			ImageName = "ExistingAccount";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			//Contract Page 

			SLocator("ContractsLink").click();
			LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");                        
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
					SLocator("ContractNolink"));

			contractNumber=driver.findElement(By.xpath("//th[contains(text(),'Contract Number')]//ancestor::tr[@class='headerRow']//following::tr[1]/th/a")).getText();
			LOGS.info(Thread.currentThread() +"Generated Contract Number:"+contractNumber);

			SLocator("ContractNolink").click();
			LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");

			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(5000);

			LOGS.info(Thread.currentThread() +"Waited 10 Secs for  Amend button to be visible");
			SLocator("Amend").click();
			LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page ");
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			Thread.sleep(10000);
			SLocator("Amend2").click();                       
			LOGS.info(Thread.currentThread() +"Second time Amend button clicked ");
			Thread.sleep(3000);


			LOGS.info(Thread.currentThread() +buisnessID_1+" # "+ExistingProduct_1+" # "+processtoProceedwith_1+" # "+changeInProduct_1+" # "+New_or_Modifying_ProductName_1);

			if(processtoProceedwith_1.equalsIgnoreCase("Modify")) {

				if(changeInProduct_1.equalsIgnoreCase("PriceChange")){ 

					String priceChangeMethod= priceChange(ExistingProduct_1,New_or_Modifying_ProductName_1);

					if(priceChangeMethod.equalsIgnoreCase("Fail")){

						LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Failed");	
					}else {
						LOGS.info(Thread.currentThread() +"priceChangeMethod - Method Passed");

					}	

				}else if(changeInProduct_1.trim().equalsIgnoreCase("Upgrade")){

					String UpgradeModify=upgradeModify(ExistingProduct_1, New_or_Modifying_ProductName_1);


					if(UpgradeModify.equalsIgnoreCase("Fail")){

						LOGS.info(Thread.currentThread() +"UpgradeModify - Method Failed");	
					}else {
						LOGS.info(Thread.currentThread() +"UpgradeModify - Method Passed");

					}	

				}else if(changeInProduct_1.trim().equalsIgnoreCase("Downgrade")){

					String DowngradeModify=DowngradeModify(ExistingProduct_1, New_or_Modifying_ProductName_1);

					if(DowngradeModify.equalsIgnoreCase("Fail")){

						LOGS.info(Thread.currentThread() +"DowngradeModify - Method Failed");	
					}else {
						LOGS.info(Thread.currentThread() +"DowngradeModify - Method Passed");

					}	

				}else if(changeInProduct_1.trim().equalsIgnoreCase("AddingProduct")){

					String AddingAdditional_Product=AddingAdditionalProduct(New_or_Modifying_ProductName_1);

					if(AddingAdditional_Product.equalsIgnoreCase("Fail")){

						LOGS.info(Thread.currentThread() +"AddingAdditionalProduct - Method Failed");	
					}else {
						LOGS.info(Thread.currentThread() +"AddingAdditionalProduct - Method Passed");

					}	

				} 
			}

			String Genrate_to_SubmitQuoteProcess= Genrate_to_SubmitQuote(changeInProduct_1);

			if(Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")){

				LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Failed");       
			}else {
				LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Passed");

			}     

			Status="Pass";





		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Status="Fail";
		}

		return Status;
	}  

	public  String CancelLineItemProduct(String productToBeCancel, String cancelDetails) {

		try {
			LOGS.info(Thread.currentThread() +
					"Inside Cancel Line Item for particular product method" + productToBeCancel + " " + cancelDetails);

			String[] cancelDetails_split = cancelDetails.split("->");
			CancelType = cancelDetails_split[0];
			CancelReason = cancelDetails_split[1];
			CancelOutcome = cancelDetails_split[2];

			LOGS.info(Thread.currentThread() +"Cancellation Type:" + CancelType);
			LOGS.info(Thread.currentThread() +"Cancellation Reason:" + CancelReason);
			LOGS.info(Thread.currentThread() +"Cancellation Outcome:" + CancelOutcome);
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);

			ExpRes = "Cancellation Type - Cancellation Reason - Cancellation Outcome details taking from Input sheet";
			ImageName = "CancellationDetails";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			Status = "Pass";
			ActRes = "Cancellation Details:\nType-" + cancelDetails_split[0] + "\nReason-" + cancelDetails_split[1]
					+ "\nCancellation Outcome-" + cancelDetails_split[2];
			ExportResults
			.exportTestResult("Cancellation Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			String CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);
			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox Already Checked");
				LOGS.info(Thread.currentThread() +"Clicking on Cancel All Checkbox to Uncheck");
				SLocator("CancelAll").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
			}

			CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);

			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is Checked");
			} else
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is UnChecked");

			String[] products = productToBeCancel.split(",");
			LOGS.info(Thread.currentThread() +"Display all fetched Products : " + products);
			int InputProductCount = products.length;
			LOGS.info(Thread.currentThread() +"Number of products available for Cancel: " + InputProductCount);
			LOGS.info(Thread.currentThread() +"Live Products >" + productsCaptureHomePage);

			SLocator("fullScreenModeIcon").click();
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(6000);
			LOGS.info(Thread.currentThread() +"Clicked on Full Screen Button");

			for (int i = 0; i < InputProductCount; i++) {

				LOGS.info(Thread.currentThread() +products[i]);
				ExpRes = "Selecting a Cancel Checkbox for the product" + products[i];

				if (productsCaptureHomePage.contains(products[i])) {

					try {
						driver.findElement(By.xpath("//div[text()=' " + products[i]
								+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]//div[contains(@class,'checkboxcontainer')]"))
						.click();
						LOGS.info(Thread.currentThread() +"Selected " + products[i] + " cancel Checkbox");
						Thread.sleep(3000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						ImageName = "ProductLines";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Cancel Product is available & checked Checkbox related to the product " + products[i];
						Status = "Pass";
					} catch (Exception e) {
						e.printStackTrace();
						ImageName = "CancelCheckBoxSelect_" + products[i];
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						LOGS.info(Thread.currentThread() +"Product Missing/Unavailable -" + products[i]);
						ActRes = "Product checkbox Missing/Unavailable for cancel line item " + products[i];
						Status = "Fail";
					}

				} else {
					ImageName = "CancelCheckBoxSelect_" + products[i];
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ActRes = "Product(" + products[i] + ") mentioned in the spreadsheet is not available";
					LOGS.info(Thread.currentThread() +ActRes);
					Status = "Fail";
				}

				ExportResults.exportTestResult("Cancel Checkbox validation for each Product:," + ExpRes + "," + ActRes
						+ "," + Status + "," + ImgName,pr.Resultsfolderpath);

				String cancelTypeTextAreaPath = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancellation_Type__c']//div/span";
				driver.findElement(By.xpath(cancelTypeTextAreaPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Clicked on Cancel Type Text Area");

				String cancelTypeSelectPath = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancellation_Type__c']//div[2]//select";
				driver.findElement(By.xpath(cancelTypeSelectPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				WebElement UserView = driver.findElement(By.xpath(cancelTypeSelectPath));
				Select userviewdrpdwn = new Select(UserView);
				userviewdrpdwn.selectByVisibleText(CancelType);
				Thread.sleep(3000);
				driver.findElement(By.xpath(cancelTypeSelectPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);

				String MonthlyInvestmentTextAreaPath = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Monthly_Investment__c']//div";
				driver.findElement(By.xpath(MonthlyInvestmentTextAreaPath)).click();
				LOGS.info(Thread.currentThread() +"Entered cancel type " + CancelType);

				String cancelReasonTextAreaPath = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancellation_Reason__c']//div/span";
				driver.findElement(By.xpath(cancelReasonTextAreaPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				String cancelReasonSelectPath = "//div[text()=' " + products[i]
						+ "']//parent::div//following::div[@field='CPQ_Cancellation_Reason__c']//div[2]//select";
				driver.findElement(By.xpath(cancelReasonSelectPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				UserView = driver.findElement(By.xpath(cancelReasonSelectPath));
				userviewdrpdwn = new Select(UserView);
				userviewdrpdwn.selectByVisibleText(CancelReason);
				driver.findElement(By.xpath(cancelReasonSelectPath)).click();
				Thread.sleep(2000);

				driver.findElement(By.xpath(MonthlyInvestmentTextAreaPath)).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);

			}

			LOGS.info(Thread.currentThread() +"Products verified as per the input sheet");
			LOGS.info(Thread.currentThread() +"Clicking on Quick Save Button ");
			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);

			if (SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise")) {

				LOGS.info(Thread.currentThread() +"Rep Type:" + SalesRepType + " Product Count:" + prodCount + " Input Product Count:"
						+ InputProductCount);

				if (prodCount > InputProductCount) {

				} else if (prodCount == InputProductCount) {
					ExpRes = "Validation Message should be 'You cannot Cancel All on this order due to insufficient access'";
					String cancelAlertVerification = "", ExpectedMessage = "";
					try {
						cancelAlertVerification = SLocator("NotifyAlert").getText();
						LOGS.info(Thread.currentThread() +"Validation Message->" + cancelAlertVerification);

						ExpectedMessage = "You cannot Cancel All on this order due to insufficient access";
						if (cancelAlertVerification.contains(ExpectedMessage)) {
							Status = "Pass";
						} else {
							Status = "Fail";
							count = count + 1;
						}
						ActRes = "Getting Validation Message as " + cancelAlertVerification + " for Sales Rep "
								+ SalesRepType;

					} catch (Exception e) {
						e.printStackTrace();
						Status = "Fail";
						ActRes = "Validation message missing for " + SalesRepType + " & Should be - " + ExpectedMessage;
						count = count + 1;
					}

					ImageName = "ValidationMessage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Cancel Verification:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					count = count + 1;

				}

			}
		} catch (Exception e) {
			Status = "Fail";
			e.printStackTrace();
			count = count + 1;
		}

		return Status;
	}


	public  String CancelLineItemProduct(String productToBeCancel) {

		try {
			LOGS.info(Thread.currentThread() +"Inside Cancel Line Item for particular product method" + productToBeCancel);

			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);

			String CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);
			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox Already Checked");
				LOGS.info(Thread.currentThread() +"Clicking on Cancel All Checkbox to Uncheck");
				SLocator("CancelAll").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
			}

			CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);

			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is Checked");
				ActRes = "Cancel All Checkbox is Checked";
				Status = "Fail";
			} else {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is UnChecked");
				ActRes = "Cancel All Checkbox is UnChecked as expected";
				Status = "Pass";
			}

			ExpRes = "CancelAll Checkbox should be unchecked for line item cancel";
			ImageName = "CancelAllCheckbox1";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Cancel All CheckBox Status Verification:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			int InputProductCount = 0;
			String[] products = productToBeCancel.split(",");
			LOGS.info(Thread.currentThread() +"Display all fetched Products : " + products);
			InputProductCount = products.length;
			LOGS.info(Thread.currentThread() +"Number of products available for Cancel: " + InputProductCount);

			for (int i = 0; i < InputProductCount; i++) {

				LOGS.info(Thread.currentThread() +products[i]);
				LOGS.info(Thread.currentThread() +productsCaptureHomePage);

				if (productsCaptureHomePage.contains(products[i])) {
					ExpRes = "Cancel Checkbox should select at line item level before cancel product " + products[i];

					try {

						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						SLocator("fullScreenModeIcon").click();
						Thread.sleep(3000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(6000);
						LOGS.info(Thread.currentThread() +"Clicked on Full Screen Button");

						// driver.findElement(By.xpath("//div[text()=' " +
						// products[i]
						// +
						// "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div")).click();
						// String pa1="//div[text()=' " + products[i]
						// +"']//parent::div//following::div[@field='CPQ_Cancel__c'][1]//div[contains(@class,'checkboxcontainer')]";
						// LOGS.info(Thread.currentThread() +pa1);

						driver.findElement(By.xpath("//div[text()=' " + products[i]
								+ "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]//div[contains(@class,'checkboxcontainer')]"))
						.click();
						LOGS.info(Thread.currentThread() +"Selected " + products[i] + " cancel Checkbox");
						Thread.sleep(3000);

						// WebElement ProductLines =
						// driver.findElement(By.xpath("//div[text()=' " +
						// products[i]
						// +
						// "']//parent::div//following::div[@field='CPQ_Cancel__c'][1]/div/div"));
						// ((JavascriptExecutor)
						// driver).executeScript("arguments[0].scrollIntoView(true);",
						// ProductLines);
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						ImageName = "ProductLines";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						ActRes = "Cancel Product is available & checked Checkbox related to the product " + products[i];

					} catch (Exception e) {
						e.printStackTrace();
						ImageName = "CancelCheckBoxSelect_" + products[i];
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						LOGS.info(Thread.currentThread() +"Product Missing/Unavailable -" + products[i]);
						ActRes = "Product checkbox Missing/Unavailable for cancel line item " + products[i];
					}

					ExportResults.exportTestResult("Select Cancel Checkbox at line item level:," + ExpRes + "," + ActRes
							+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
				} else {
					LOGS.info(Thread.currentThread() +products[i] + " Product mentioned in the spreadsheet is not available");

				}
			}

			SLocator("fullScreenModeIcon").click();
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Minimized Screen");

			LOGS.info(Thread.currentThread() +"Products verified as per the input sheet");
			LOGS.info(Thread.currentThread() +"Clicking on Quick Save Button ");
			SLocator("QuickSavebtn").click();
			LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
			Thread.sleep(3000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);

			if (SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise")) {

				LOGS.info(Thread.currentThread() +"Rep Type:" + SalesRepType + " Product Count:" + prodCount + " Input Product Count:"
						+ InputProductCount);

				if (prodCount <= InputProductCount) {
					ExpRes = "Validation Message should be 'You cannot Cancel All on this order due to insufficient access'";
					String cancelAlertVerification = "", ExpectedMessage = "";
					try {
						cancelAlertVerification = SLocator("NotifyAlert").getText();
						LOGS.info(Thread.currentThread() +"Validation Message->" + cancelAlertVerification);

						ExpectedMessage = "You cannot Cancel All on this order due to insufficient access";
						if (cancelAlertVerification.contains(ExpectedMessage)) {
							Status = "Pass";
						} else {
							Status = "Fail";
							count = count + 1;
						}
						ActRes = "Getting Validation Message as " + cancelAlertVerification + " for Sales Rep "
								+ SalesRepType;

					} catch (Exception e) {
						e.printStackTrace();
						Status = "Fail";
						ActRes = "Validation message missing for " + SalesRepType + " & Should be - " + ExpectedMessage;
						count = count + 1;
					}

					ImageName = "ValidationMessage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExportResults.exportTestResult(
							"Cancel Verification:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

			}

			CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);
			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox Already Checked");
				LOGS.info(Thread.currentThread() +"Clicking on Cancel All Checkbox to Uncheck");
				SLocator("CancelAll").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
			}

			CheckboxAttribute = SLocator("CancelAllCheckbox").getAttribute("class");
			LOGS.info(Thread.currentThread() +"Check Box Class details: " + CheckboxAttribute);

			if (CheckboxAttribute.contains("checked")) {
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is Checked");
			} else
				LOGS.info(Thread.currentThread() +"Cancel All Checkbox is UnChecked");

		} catch (Exception e) {
			Status = "Fail";
			e.printStackTrace();
		}

		return Status;
	}



	public  String AddingAdditionalProduct(String new_or_Modifying_ProductName_1) {

		
		try {
			
			/*ProductIdentifierName = new_or_Modifying_ProductName_1;
			String inputdata = PreRequisites.FetchProductplan(ProductIdentifierName);
			LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
			String[] allProdsplans = inputdata.split("&");
			String allProds = allProdsplans[0];
			LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
			String[] Prods = allProds.split(",");
			String allpalns = allProdsplans[1];
			LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);
			String[] Plans = allpalns.split(",");
			LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
			AddingProduct(Prods, Plans);
			LOGS.info(Thread.currentThread() +"Adding Product completed");
			Status = "Pass";*/
			
			
			String[] Prods = new String[1];
			
			if(new_or_Modifying_ProductName_1.trim().contains("Foundation"))
			{
				Prods[0] = "Online Foundation Solutions";
			}else if(new_or_Modifying_ProductName_1.trim().contains("Smart Presence"))
			{
				Prods[0] = "Smart Presence Solutions";
			}else if(new_or_Modifying_ProductName_1.trim().contains("Smart Sync"))
			{
			  Prods[0] = "Smart Synchronized Solutions";
			}else if(new_or_Modifying_ProductName_1.trim().contains("Synchronized Marketing"))
			{
				Prods[0] = "Synchronized Marketing Solutions";
			}
			else if(new_or_Modifying_ProductName_1.trim().contains("Smart Site"))
			{
				Prods[0] = "Website (a la carte)";
			}
			else if(new_or_Modifying_ProductName_1.trim().contains("(a la carte)"))
			{
				Prods[0] = new_or_Modifying_ProductName_1;
			}
			else if(new_or_Modifying_ProductName_1.trim().contains("Search - Guaranteed Clicks")||new_or_Modifying_ProductName_1.trim().contains("Reviews")
					||new_or_Modifying_ProductName_1.trim().contains("Listings"))
			{
				Prods[0] = new_or_Modifying_ProductName_1;
			}
			
			LOGS.info(Thread.currentThread() +"display all fetched product names: " + Prods);
			String[] Plans = new_or_Modifying_ProductName_1.split(",");
			LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
			
			LOGS.info(Thread.currentThread() +"####################################################################");
			LOGS.info(Thread.currentThread() +"                                                                    ");
			LOGS.info(Thread.currentThread() +"Adding Product Started");
			LOGS.info(Thread.currentThread() +"                                                                    ");
			LOGS.info(Thread.currentThread() +"####################################################################");
			
			
			try {
				driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
				LOGS.info("Waiting for the page to load by Holding the driver control to wait");
				WebDriverWait wait1 = new WebDriverWait(driver, 19);
				
				wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));
			
			}catch(Exception ex) {
				ImageName = "BeforeClickingAddProduct ";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				LOGS.info("Wait is over and the Pocess continues.");
			
			}
			
			AddingProduct(Prods, Plans);
			
			LOGS.info(Thread.currentThread() +"####################################################################");
			LOGS.info(Thread.currentThread() +"                                                                    ");
			LOGS.info(Thread.currentThread() +"Adding Product Completed");
			LOGS.info(Thread.currentThread() +"                                                                    ");
			LOGS.info(Thread.currentThread() +"####################################################################");
			Status = "Pass";

		} catch (Exception e) {
			LOGS.error("Error in Adding product Method : "+ Thread.currentThread() +" : " +e);
			ExceptionMsg = "Error in Adding product Method : ";
			LOGS.info(Thread.currentThread() + "," +"Error in Adding product Method :  - " + e.getMessage());
			Status = "Fail";
			count = count + 1;
			
			return Status;
		}
		
		return Status;
	}


/*	public  void callZephyr() throws Exception {

			if (uniqueIssueId.equalsIgnoreCase("")) {
				ExportResults.ExportQuote();

				LOGS.info(Thread.currentThread() +"\nSummary:" + Summary + "\nDescription:" + Description);
				//String jiraCardNo = JiraClass.createTaskinJira(Summary, Description);
				//LOGS.info(Thread.currentThread() +"Jira Card Number:"+jiraCardNo);
				TestCaseNum = ZephyrTestCase.createZephyrTestCase(Summary, Description);
				testResults = "Business Id : " + businessID;
				System.out.println("Zephyr Card No = " + TestCaseNum);
				ExportResults.CExportQuote();

			} else {

				LOGS.info(Thread.currentThread() +"Issue ID for "+ plansLabel+": "+uniqueIssueId);
				String jiraCard ="";//"TCM-286";
				//ZephyrTestCase.multipleExecutionsOnUniqueIssueId(uniqueIssueId.trim(), jiraCard);
				//ExportResults.CExportQuote();
			}

		}*/
		
/*		public void callZephyr(String issueID) throws Exception {

			if (issueID.equalsIgnoreCase("")) {

				LOGS.info(Thread.currentThread() +"\nSummary:" + Summary + "\nDescription:" + Description);
				//String jiraCardNo = JiraClass.createTaskinJira(Summary, Description);
				//LOGS.info(Thread.currentThread() +"Jira Card Number:"+jiraCardNo);
				TestCaseNum = ZephyrTestCase.createZephyrTestCase(Summary, Description);
				System.out.println("Zephyr Card No = " + TestCaseNum);
				ExportResults.CExportQuote();

		} else {

				LOGS.info(Thread.currentThread() +"Issue ID for "+ plansLabel+": "+uniqueIssueId);
				String jiraCard ="";//"TCM-286";
				ZephyrTestCase.multipleExecutionsOnUniqueIssueId(uniqueIssueId.trim(), jiraCard);
				ZephyrTestCase.multipleExecutionsOnUniqueIssueId(uniqueIssueId.trim(), pr.jiraNo);

				//ExportResults.CExportQuote();
			}

		}*/

	public  String quatePagevalidate(String stagename) throws Exception  {

		LOGS.info(Thread.currentThread() +"inside quatePagevalidate ");


		//generateDoc Quote page validation		
		if(stagename.equalsIgnoreCase("generate_document")){
			//buttons--------------------------------------------------------------------			
			try {
				if(SLocator("genDocQteEdbtn").isDisplayed() && SLocator("capSigQteEdbtn").isDisplayed() && SLocator("PaymentBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"Generate Document ,Capture Signature & Payment buttons appear");

					ImageName = "QuotePage initail stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Generate Document Capture Signature & Payment buttons appear";
					ActRes = "Generate Document Capture Signature & Payment buttons appeared";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}

				else
				{

					LOGS.info(Thread.currentThread() +"Generate Document ,Capture Signature & Payment buttons are not appeared");

					ImageName = "QuotePage initail stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Generate Document Capture Signature & Payment buttons appear";
					ActRes = "Generate Document Capture Signature & Payment buttons are not appeared";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				//Stage_Capture();	
				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Initial Stage")){

					LOGS.info(Thread.currentThread() + "Order Stage :"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage is Initial Stage";
					ActRes = "Order Stage is Initial Stage";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage is Initial Stage";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}


				String remainingactions=driver.findElement(By.xpath("//td[text()='Remaining Actions']//following::td[1]//div")).getText();

				if (remainingactions.equalsIgnoreCase("Capture Signature; Payment; Select Consultation; Submit Quote")){

					LOGS.info(Thread.currentThread() +"Remaining Actions"+"------->"+remainingactions);

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ActRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ActRes = "Remaining Actions data is mismatched";
					ExportResults.exportTestResult(
							"Remaining Actions Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		

				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");
				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");
				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");

				if(sigCapChkbox.equalsIgnoreCase("Not Checked") && payVerifChkbox.equalsIgnoreCase("Not Checked") && consulSelChkbox.equalsIgnoreCase("Not Checked")){

					LOGS.info(Thread.currentThread() +"Signature Captured ,Payment Verified & Consultation Selected CheckBoxes are Not Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Signature Captured Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ExportResults.exportTestResult(
							"QuotePage Stage Captured CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Signature Captured ,Payment Verified & Consultation Selected CheckBoxes are Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Signature Captured Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Signature Captured Payment Verified & Consultation Selected CheckBoxes are Checked";
					ExportResults.exportTestResult(
							"QuotePage Stage Captured CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's before 'Generate Document'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validate's before 'Generate Document' should be Succesfull ";
				ActRes = "Quote Page validate's before 'Generate Document' is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's before 'Generate Document':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}	
			catch (Exception e) {
				ImageName = "Quote Page validate's before 'Generate Document'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validate's before 'Generate Document' should be succesfull ";
				ActRes = "Quote Page validate's before 'Generate Document' is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's before 'Generate Document':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}
		//after Signature -------------------------------------------------------------------	

		if(stagename.equalsIgnoreCase("After_Signature")){
			try {	
				//buttons------------------------------------------------------------------------------------------------------------------------------------			
				if(SLocator("PaymentBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"Payment buttons appear");

					ImageName = "Quote Page after Complete_Signature stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Payment buttons appear";
					ActRes = "Payment buttons appeared";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Payment buttons are not appeared");

					ImageName = "Quote Page after Complete_Signature stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Payment buttons appear";
					ActRes = "Payment buttons are not appeared";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}			
				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Check Payment")){

					LOGS.info(Thread.currentThread() + "Order Stage"+"------->"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage is Initial Stage";
					ActRes = "Order Stage is Initial Stage";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage is Initial Stage";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}


				String remainingactions=driver.findElement(By.xpath("//td[text()='Remaining Actions']//following::td[1]//div")).getText();

				if (remainingactions.equalsIgnoreCase("Payment; Select Consultation; Submit Quote")){

					LOGS.info(Thread.currentThread() +"Remaining Actions"+"------->"+remainingactions);

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ActRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ActRes = "Remaining Actions data is mismatched";
					ExportResults.exportTestResult(
							"Remaining Actions Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		

				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");	

				if(sigCapChkbox.equalsIgnoreCase("Checked")){				
					LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is Checked");

					ImageName = "Signature Captured CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured CheckBox Should be Checked";
					ActRes = "Signature Captured CheckBox is Checked";	
					ExportResults.exportTestResult(
							"Signature Captured CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}			
				else
				{	LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is not Checked");

				ImageName = "Signature Captured CheckBox";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Signature Captured CheckBox Should be Checked";
				ActRes = "Signature Captured CheckBox is not Checked";
				ExportResults.exportTestResult(
						"Signature Captured CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");
				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");


				if(payVerifChkbox.equalsIgnoreCase("Not Checked")&&consulSelChkbox.equalsIgnoreCase("Not Checked")){

					LOGS.info(Thread.currentThread() +"Payment Verified & Consultation Selected CheckBoxes are Not Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ExportResults.exportTestResult(
							"Payment Verified & Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Payment Verified & Consultation Selected CheckBoxes are Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Payment Verified & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Payment Verified & Consultation Selected CheckBoxes are Checked";
					ExportResults.exportTestResult(
							"Payment Verified & Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's after Signature";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validate's after Signature should be Succesfull ";
				ActRes = "Quote Page validate's after Signature is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after Signature:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);



			}catch (Exception e) {
				ImageName = "Quote Page validate's after Signature";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validate's after Signature should be Succesfull ";
				ActRes = "Quote Page validate's after Signature is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's before 'Payment':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}


		}




		if(stagename.equalsIgnoreCase("After_payment")){

			try {

				//buttons------------------------------------------------------------------------------------------------------------------------------------			
				if(SLocator("SelectConsultnBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"SelectConsultnBtn buttons appear");

					ImageName = "Quote Page after payment stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Select Consultation buttons appear";
					ActRes = "Select Consultation buttons appeared";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Select Consultation buttons are not appeared");

					ImageName = "Quote Page  after payment stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Select Consultation buttons appear";
					ActRes = "Select Consultation buttons are not appeared";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}			
				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Select Consultation")){

					LOGS.info(Thread.currentThread() + "Order Stage"+"------->"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage is Select Consultation";
					ActRes = "Order Stage is Select Consultation";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage is Select Consultation";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}


				String remainingactions=driver.findElement(By.xpath("//td[text()='Remaining Actions']//following::td[1]//div")).getText();

				if (remainingactions.equalsIgnoreCase("Select Consultation; Submit Quote")){

					LOGS.info(Thread.currentThread() +"Remaining Actions"+"------->"+remainingactions);

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Remaining Actions is 'Select Consultation'";
					ActRes = "Remaining Actions is 'Select Consultation'";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Remaining Actions is 'Select Consultation'";
					ActRes = "Remaining Actions data is mismatched";
					ExportResults.exportTestResult(
							"Remaining Actions Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		

				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");	
				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");

				if(sigCapChkbox.equalsIgnoreCase("Checked") && payVerifChkbox.equalsIgnoreCase("Checked")){				

					LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is Checked");

					ImageName = "Signature Captured & Payment Verified CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured & Payment Verified  CheckBox Should be Checked";
					ActRes = "Signature Captured & Payment Verified  CheckBox is Checked";	
					ExportResults.exportTestResult(
							"Signature Captured & Payment Verified CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}			
				else
				{	LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is not Checked");

				ImageName = "Signature Captured & Payment Verified  CheckBox";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Signature Captured & Payment Verified CheckBox Should be Checked";
				ActRes = "Signature Captured & Payment Verified CheckBox is not Checked";
				ExportResults.exportTestResult(
						"Signature Captured & Payment Verified CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}

				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");
				if(consulSelChkbox.equalsIgnoreCase("Not Checked")){

					LOGS.info(Thread.currentThread() +"Consultation Selected CheckBoxes are Not Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Consultation Selected CheckBoxes are Not Checked";
					ExportResults.exportTestResult(
							"Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Consultation Selected CheckBoxes are Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Consultation Selected CheckBoxes are Checked";
					ExportResults.exportTestResult(
							"Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's after 'Payement'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validate's after 'Payement' should be Succesfull ";
				ActRes = "Quote Page validate's after 'Payment' is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after 'Payment':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);



			}catch (Exception e) {
				ImageName = "Quote Page validate's after 'Payment'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validate's after 'Payment' should be succesfull ";
				ActRes = "Quote Page validate's after 'Payment' is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after 'Payment':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}

		//After_SelectConsultation-----------------------------------------------------------------------------------------------

		if(stagename.equalsIgnoreCase("After_SelectConsultation")){
			try {
				//buttons------------------------------------------------------------------------------------------------------------------------------------			
				if( SLocator("SubmitQteBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"Submit button appear");

					ImageName = "Quote Page after select consultation stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Submit button appear";
					ActRes = "Submit button appeared";	
					ExportResults.exportTestResult(
							"Quote Page after select consultation stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}else
				{

					LOGS.info(Thread.currentThread() +"Submit button are not appeared");

					ImageName = "Quote Page  after select consultation stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Submit button appear";
					ActRes = "Submit button are not appeared";
					ExportResults.exportTestResult(
							"Quote Page after select consultation stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}			
				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Submit Quote")){

					LOGS.info(Thread.currentThread() + "Order Stage:"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage should be Submit Quote";
					ActRes = "Order Stage is Submit Quote";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);			
				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage should be Submit Quote";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}		
				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		

				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");	
				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");
				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");

				if(sigCapChkbox.equalsIgnoreCase("Checked") && payVerifChkbox.equalsIgnoreCase("Checked") && consulSelChkbox.equalsIgnoreCase("Checked")){				

					LOGS.info(Thread.currentThread() +"Signature Captured, Payment Verified & Consultation Selected CheckBox is Checked");

					ImageName = "Signature Captured, Payment Verified & Consultation Selected CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox Should be Checked";
					ActRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox is Checked";				
				}			
				else
				{	LOGS.info(Thread.currentThread() +"Signature Captured, Payment Verified & Consultation Selected CheckBox is not Checked");

				ImageName = "Signature Captured, Payment Verified & Consultation Selected CheckBox";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox Should be Checked";
				ActRes = "Signature Captured, Payment Verified & Consultation Selected CheckBox is not Checked";
				ExportResults.exportTestResult(
						"QuotePage CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's after SelectConsultation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validate's after SelectConsultation should be Succesfull ";
				ActRes = "Quote Page validate's after SelectConsultation is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after SelectConsultation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}catch (Exception e) {
				ImageName = "Quote Page validate's after SelectConsultation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validate's after SelectConsultation should be Succesfull ";
				ActRes = "Quote Page validate's after SelectConsultation is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after 'Payment':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}


		//noSigbutPaymentdone----------------------------------------------------------------------------------------------	





		if(stagename.equalsIgnoreCase("noSigbutPaymentdone")){
			try {
				//buttons------------------------------------------------------------------------------------------------------------------------------------			
				if(SLocator("capSigQteEdbtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"Capture Signature buttons appear");

					ImageName = "Quote Page after noSigbutPaymentdone stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Capture Signature buttons appear";
					ActRes = "Capture Signature buttons appeared";
					ExportResults.exportTestResult(
							"Quote Page after noSigbutPaymentdone stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Capture Signature  buttons are not appeared");

					ImageName = "Quote Page after noSigbutPaymentdone stage buttons";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Capture Signature appear";
					ActRes = "Capture Signature are not appeared";
					ExportResults.exportTestResult(
							"Quote Page after noSigbutPaymentdone stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}			
				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Get Signature")){

					LOGS.info(Thread.currentThread() + "Order Stage"+"------->"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage should be Get Signature";
					ActRes = "Order Stage is Get Signature";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage is Get Signature";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}


				String remainingactions=driver.findElement(By.xpath("//td[text()='Remaining Actions']//following::td[1]//div")).getText();

				if (remainingactions.equalsIgnoreCase("Capture Signature; Select Consultation; Submit Quote")){

					LOGS.info(Thread.currentThread() +"Remaining Actions"+"------->"+remainingactions);

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Remaining Actions is 'Capture Signature; Select Consultation'";
					ActRes = "Remaining Actions is 'Capture Signature; Select Consultation'";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Remaining Actions is 'Capture Signature; Payment; Select Consultation'";
					ActRes = "Remaining Actions data is mismatched";
					ExportResults.exportTestResult(
							"Remaining Actions Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		


				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");

				if(payVerifChkbox.equalsIgnoreCase("Checked")){				
					LOGS.info(Thread.currentThread() +"Payment Verified CheckBox is Checked");

					ImageName = "Signature Captured CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Payment Verified CheckBox Should be Checked";
					ActRes = "Payment Verified CheckBox is Checked";		
					ExportResults.exportTestResult(
							"QuotePage Signature Captured CheckBox:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}			
				else
				{	
					LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is not Checked");

					ImageName = "Signature Captured CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Payment Verified CheckBox Should be Checked";
					ActRes = "Payment Verified CheckBox is not Checked";
					ExportResults.exportTestResult(
							"QuotePage Signature Captured CheckBox:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");	
				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");


				if(sigCapChkbox.equalsIgnoreCase("Not Checked")&&consulSelChkbox.equalsIgnoreCase("Not Checked")){

					LOGS.info(Thread.currentThread() +"Signature Captured & Consultation Selected CheckBoxes are Not Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Signature Captured & Consultation Selected CheckBoxes are Not Checked";
					ExportResults.exportTestResult(
							"QuotePage Signature Captured & Consultation CheckBox:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				else
				{

					LOGS.info(Thread.currentThread() +"Signature Captured & Consultation Selected CheckBoxes are Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Signature Captured & Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Signature Captured & Consultation Selected CheckBoxes are Checked";
					ExportResults.exportTestResult(
							"QuotePage Signature Captured & Consultation CheckBox:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's no signature but payment done";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validate's no signature but payment doneshould be Succesfull ";
				ActRes = "Quote Page validate's no signature but payment done is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's no signature but payment:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);



			}catch (Exception e) {
				ImageName = "Quote Page validate's no signature but payment done";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validate's no signature but payment doneshould be Succesfull ";
				ActRes = "Quote Page validate's no signature but payment is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's no signature but payment:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}

		if(stagename.equalsIgnoreCase("hasvalidregtrueaftercapturesignature")){

			try {	
				//buttons------------------------------------------------------------------------------------------------------------------------------------			
				if(!SLocator("PaymentBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"Payment buttons appear");

					ImageName = "Quote Page after Capture Signature while'has validation is set to true'";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Since'has validation is set to true' payment process skipped and button not appeared";
					ActRes = "Since'has validation is set to true' payment process skipped and button appeared";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Payment buttons are not appeared");

					ImageName = "Quote Page after Capture Signature while'has validation is set to true'";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Since'has validation is set to true' payment process skipped and button not appeared";
					ActRes = "Since'has validation is set to true' payment process skipped and button not appeared";
					ExportResults.exportTestResult(
							"Quote Page after Capture Signature while'has validation is set to true':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}

				if(SLocator("SelectConsultnBtn").isDisplayed()){

					LOGS.info(Thread.currentThread() +"SelectConsultnBtn buttons appear");

					ImageName = "Quote Page after Capture Signature while'has validation is set to true'";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Select Consultation button should appear after Capture Signature while'has validation is set to true'";
					ActRes = "Select Consultation button appeard after Capture Signature while'has validation is set to true'";
					ExportResults.exportTestResult(
							"Quote Page after Capture Signature while'has validation is set to true':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Select Consultation buttons are not appeared");

					ImageName = "Quote Page after Capture Signature while'has validation is set to true'";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Select Consultation button should appear after Capture Signature while'has validation is set to true'";
					ActRes = "Select Consultation button not appeard after Capture Signature while'has validation is set to true'";
					ExportResults.exportTestResult(
							"Quote Page after Complete_Signature stage buttons Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				//orderStage------------------------------------------------------------------------------------------------------------------------------------------			


				String orderstage=driver.findElement(By.xpath("//td[text()='Order Stage']//following::td[1]//div")).getText();

				if (orderstage.equalsIgnoreCase("Select Consultation")){

					LOGS.info(Thread.currentThread() + "Order Stage"+"------->"+orderstage);

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Order Stage is should be Select Consultation";
					ActRes = "Order Stage is Select Consultation";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Order Stage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Order Stage is should be Select Consultation";
					ActRes = "Order Stage data is mismatched";
					ExportResults.exportTestResult(
							"Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}


				String remainingactions=driver.findElement(By.xpath("//td[text()='Remaining Actions']//following::td[1]//div")).getText();

				if (remainingactions.equalsIgnoreCase("Select Consultation; Submit Quote")){

					LOGS.info(Thread.currentThread() +"Remaining Actions"+"------->"+remainingactions);

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Remaining Actions should be'Select Consultation; Submit Quote'";
					ActRes = "Remaining Actions are 'Select Consultation; Submit Quote'";
					ExportResults.exportTestResult("Order Stage Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		

				}else{

					ImageName = "Remaining Actions";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Remaining Actions should be'Select Consultation; Submit Quote'";
					ActRes = "Remaining Actions data is mismatched";
					ExportResults.exportTestResult(
							"Remaining Actions Status Validation :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}

				//Checkboxes-----------------------------------------------------------------------------------------------------------------------------------		

				String sigCapChkbox = SLocator("sigCapChkbox").getAttribute("alt");	
				String payVerifChkbox = SLocator("payVerifChkbox").getAttribute("alt");

				if(sigCapChkbox.equalsIgnoreCase("Checked") && payVerifChkbox.equalsIgnoreCase("Checked")){				

					LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is Checked");

					ImageName = "Signature Captured & Payment Verified CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Signature Captured & Payment Verified  CheckBox Should be Checked";
					ActRes = "Signature Captured & Payment Verified  CheckBox is Checked";	
					ExportResults.exportTestResult(
							"Signature Captured & Payment Verified CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
				}			
				else
				{	LOGS.info(Thread.currentThread() +"Signature Captured CheckBox is not Checked");

				ImageName = "Signature Captured & Payment Verified  CheckBox";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Signature Captured & Payment Verified CheckBox Should be Checked";
				ActRes = "Signature Captured & Payment Verified CheckBox is not Checked";
				ExportResults.exportTestResult(
						"Signature Captured & Payment Verified CheckBox :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}

				String consulSelChkbox = SLocator("consulSelChkbox").getAttribute("alt");
				if(consulSelChkbox.equalsIgnoreCase("Not Checked")){

					LOGS.info(Thread.currentThread() +"Consultation Selected CheckBoxes are Not Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Pass";
					ExpRes = "Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Consultation Selected CheckBoxes are Not Checked";
					ExportResults.exportTestResult(
							"Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}

				else
				{

					LOGS.info(Thread.currentThread() +"Consultation Selected CheckBoxes are Checked");

					ImageName = "QuotePage CheckBox";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					Status = "Fail";
					ExpRes = "Consultation Selected CheckBoxes are Not Checked";
					ActRes = "Consultation Selected CheckBoxes are Checked";
					ExportResults.exportTestResult(
							"Consultation Selected CheckBoxes :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
				}


				ImageName = "Quote Page validate's after Signature - 'has valid registration is set true'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "Pass";
				ExpRes = "Quote Page validations after Signature - 'has valid registration is set true' should be Succesfull ";
				ActRes = "Quote Page validations  after Signature - 'has valid registration is set true'is Succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's after Signature:," + ExpRes + "," + ActRes + "," + Status + "," + "Noimage",pr.Resultsfolderpath);



			}catch (Exception e) {
				ImageName = "Quote Page validate's after Signature - 'has valid registration is set true'";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				Status = "fail";
				ExpRes = "Quote Page validations  after Signature - 'has valid registration is set true' should be Succesfull ";
				ActRes = "Quote Page validations  after Signature - 'has valid registration is set true' is not succesfull ";
				ExportResults.exportTestResult(
						"Quote Page validate's before 'Payment':," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}


		return Status;


		//return string;
	}

	public  String StartTermEndDateValidation() throws Exception, InterruptedException {

		LOGS.info(Thread.currentThread() +"Started Term End Date Validation and Updation");

		Status = "Pass";
		SFInspectorPlugin = "True";

			// Taking Input from Excel sheet
			SalesforceTasks
					.Xls_Reader(regardingfilesPath+"\\AmendProcess//CancelInputSheet.xlsx");
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

			count = 0;
			LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

			String folderName = TestCaseName + "_Data" + (lineItemInt - 1);
			Resultsfolderpath = pr.createFolder(folderName);
			pr.preparingOutputSheets();

			// to get cell data ( Sheet Name, column Name, Row number)
			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
			cancelProcessType = getCellData("InputSheet", "Process", lineItemInt);
			ProductNameString = getCellData("InputSheet", "Product to be cancelled", lineItemInt);

			LOGS.info(Thread.currentThread() +" # " + businessID + " # " + cancelProcessType + " # " + ProductNameString + " # ");

			if (ProductNameString.equalsIgnoreCase("Search - Guaranteed Clicks")) {
				LOGS.info(Thread.currentThread() +"Term End Date is not required for " + ProductNameString);
			} else {

				try {
					Properties OR = pr.loadPropertiesFiles("Order");
					SalesRep = OR.getProperty("UserwithAmendBlockDatepermission");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					String SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);

					if (SFLoginResult.equalsIgnoreCase("Fail")) {
						count = count + 1;
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Failed in SF Login");
					} else
						LOGS.info(Thread.currentThread() +"SF Login is successfully done");

				} catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Error in SF Login- " + e.getMessage());
					count = count + 1;
				}

				if (count == 0) {
					try {

						String TermsEndDateStatus = TermEndDateValidation(businessID, ProductNameString);

						if (TermsEndDateStatus.equalsIgnoreCase("Pass")) {
							Description = "Term End Date Changed for the Account ID " + businessID + " and Product "
									+ ProductName;
							// LOGS.info(Thread.currentThread() +Description);
						} else {
							Description = "Term End Date Unchanged for the Account ID->" + businessID + " for "
									+ ProductName;
							// LOGS.info(Thread.currentThread() +Description);
						}

					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Error in Term End Date");
						Status = "Fail";
					}
				}

				if (TestCaseName.equalsIgnoreCase("AmendInTermsDateUpdate")) {
					Summary = "Term End Date Update:" + buisnessID + " for " + ProductNameString;
					LOGS.info(Thread.currentThread() +"Summary:" + Summary);
					LOGS.info(Thread.currentThread() +"Description:" + Description);

					MoveOrCopyFile.copyFunction("C:\\Automation\\OutputFiles\\TestResult.xlsx",
							Resultsfolderpath + "\\TestResult.xlsx");

					// TestCaseNum=JiraClass.createTestCaseinJira(Summary,Description);
					// driver.quit();
				}
			}

		}
		return Status;

	}


	public  String FullCancelUsingInputSheet() throws Exception {
		TestCaseName = "CPQFullCancel";
		cancelProcessType = "Cancel";
		SFInspectorPlugin = "True";

		try {
			LOGS.info(Thread.currentThread() +"Full Cancel Method Started");

			// to set path of excel (excel file path)
			SalesforceTasks
			.Xls_Reader(regardingfilesPath + "//InputFiles//AmendProcess//FullCancelInput.xlsx");

			// to get row count (sheetName)
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			// data fetching from input sheet from second row to last line
			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
				count = 0;
				LOGS.info(Thread.currentThread() +"Taking input from Full Cancel Spread Sheet Row# ->" + lineItemInt);

					// to get cell data (First Value Sheet Name, Second Value Column
					// Name, Third Value Row number)
					SalesRepType = SalesforceTasks.getCellData("InputSheet", "Sales Rep Type", lineItemInt);
					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					businessID = businessID.trim();
					CancelReason = SalesforceTasks.getCellData("InputSheet", "Cancel Reason", lineItemInt);
					CancelType = SalesforceTasks.getCellData("InputSheet", "Cancel Type", lineItemInt);
					CancelOutcome = SalesforceTasks.getCellData("InputSheet", "Cancellation Outcome", lineItemInt);
					ProductIdentifierName = SalesforceTasks.getCellData("InputSheet", "New Product ID", lineItemInt);
					uniqueIssueId=SalesforceTasks.getCellData("InputSheet", "Issue ID", lineItemInt);
					jiraNo=SalesforceTasks.getCellData("InputSheet", "TCM", lineItemInt);
					
					//Cancel Type should be valid Type
					if (!CancelType.equalsIgnoreCase("None")) {
						
						//Cancel Reason should be valid Reason
						if (!CancelReason.equalsIgnoreCase("None")) {
							
							LOGS.info(Thread.currentThread() +SalesRepType + " # " + businessID + " # " + CancelReason + " # " + CancelType + " # "
									+ CancelOutcome + " # " + ProductIdentifierName);
							cancelDetails= CancelType + "_" + CancelReason + "_"+ CancelOutcome; 
							
							String folderName = TestCaseName + "_Data" + (lineItemInt - 1);
							Resultsfolderpath = pr.createFolder(folderName);
							pr.preparingOutputSheets();

							if(!ProductIdentifierName.equalsIgnoreCase("NA")){
								String inputdata = pr.FetchProductplan(ProductIdentifierName);
								LOGS.info(Thread.currentThread() +"Display all fetched product and plan name ->" + inputdata);
								String[] allProdsplans = inputdata.split("&");
								String allProds = allProdsplans[0];
								LOGS.info(Thread.currentThread() +"Display all fetched product names ->" + allProds);
								String allplans = allProdsplans[1];
								LOGS.info(Thread.currentThread() +"Display all fetched plan names ->" + allplans);

								if (ProductIdentifierName.equalsIgnoreCase("01") || ProductIdentifierName.equalsIgnoreCase("05")
										|| ProductIdentifierName.equalsIgnoreCase("06") || ProductIdentifierName.equalsIgnoreCase("07")
										|| ProductIdentifierName.equalsIgnoreCase("08") || ProductIdentifierName.equalsIgnoreCase("09")
										|| ProductIdentifierName.equalsIgnoreCase("10") || ProductIdentifierName.equalsIgnoreCase("11")
										|| ProductIdentifierName.equalsIgnoreCase("18") || ProductIdentifierName.equalsIgnoreCase("19")
										|| ProductIdentifierName.equalsIgnoreCase("22") || ProductIdentifierName.equalsIgnoreCase("23")
										|| ProductIdentifierName.equalsIgnoreCase("25")) {

									plansLabel = allProds;
									
								} else {
									plansLabel = allProds + " : " + allplans;
								}
								LOGS.info(Thread.currentThread() +"Selected Product Name is -> " + plansLabel);
							} else {
								if(plansLabel.equalsIgnoreCase("")){
									LOGS.info(Thread.currentThread() +"Please enter the plansLabel, it should not be Empty");
									count=count+1;
								}
							}
							LOGS.info(Thread.currentThread() +"Selected Product Name -> " + plansLabel);


						if (count == 0) {
							try {
								String Day3ProcessResult = FullCancelProcess(SalesRepType, businessID,
										cancelDetails, ProductIdentifierName);

								ImageName = "Day3ProcessResult";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
									Status = "Fail";
									LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
									ActRes = "Day3 Process is failed";
									count = count + 1;
								} else {
									Status = "Pass";
									LOGS.info(Thread.currentThread() +"Day3 Process Method Verified");
									JiraStatus = "Passed";
									ActRes = "Day3 Process is Verified Successfully";
								}

								ExpRes = "Day3 Process verification and it should be Successful & should be Pass";
								ExportResults.exportTestResult(
										"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

								} catch (Throwable e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
									LOGS.info(Thread.currentThread() +"Error in Day3 Process Result " + e.getMessage());
									count = count + 1;
								}

								// driver.quit();

								Summary = "Full Cancel : Cancelling All Product including " + plansLabel
										+ " with Cancel Type-" + CancelType + " and Cancel Reason " + CancelReason;
								// Description = "Full Cancel Verifications with
								// Type "+CancelType +" and Reason - "+ CancelReason;

						Description = "Cancelled All Product with Cancel Type-" + CancelType + " & Cancel Reason-"
								+ CancelReason + " for the Account-" + businessID
								+ ". Added Cancel Validations Steps along with Reference";
						LOGS.info(Thread.currentThread() +"Description:" + Description);

								MoveOrCopyFile.copyFunction(Resultsfolderpath + "\\ZephyrTestResult.xlsx",
										"C:\\Automation\\OutputFiles\\ZephyrTestResult.xlsx");

						//callZephyr();

					} else

						LOGS.info(Thread.currentThread() +"Select proper Cancel Reason from Input sheet");

				}	else

					LOGS.info(Thread.currentThread() +"Select proper Cancel Type from Input sheet");
			}

		} 
			
		}catch (Exception e) {
			ImageName = "Day3ProcessResult";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			e.printStackTrace();
			Status = "Fail";
			ExpRes = "Day3 Process should be verified & should be Pass";
			e.printStackTrace();
			ActRes = "Day3 Process Failed - Reached to Catch Exception";
			ExportResults
			.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}

		return Status;
	}



		// Full Cancellation requires Unique Business ID, Cancellation Details like
		// Type, Reason, Overcome..
		// SalesRepType like SPE, TSales.. Product Identifier for product
		// availability in the Account
		public  String FullCancelProcess(String salesRepType, String buisnessID_1, String fullCancelDetails,
				String prodID) throws Throwable {
			cancelProcessType = "Cancel";
			SFInspectorPlugin = "True";
			String cancelStatusResult = "";

			TestCaseName = "CPQFullCancel";
			String folderName = TestCaseName + "_Data1";
			Resultsfolderpath = pr.createFolder(folderName);
			
			//Moving Test result Template and zephyr result template from the template folder to recently created result folder
			MoveOrCopyFile.copyFunction(regardingfilesPath+"/Templates/TestResult.xlsx",Resultsfolderpath+"\\TestResult.xlsx");
			MoveOrCopyFile.copyFunction(regardingfilesPath+"/Templates/ZephyrTestResult.xlsx",Resultsfolderpath+"\\ZephyrTestResult.xlsx");

			if (count == 0) {
				// Chrome Launching and SalesForce Login with respective
				// SalesRepType
				try {
					SFLogin(salesRepType);
				} catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Error in SalesForce Login- " + e.getMessage());
					count = count + 1;
				}
			}
		

		if (count == 0) {
			LOGS.info(Thread.currentThread() +"Full Cancel Process Started");
			try {
				LOGS.info(Thread.currentThread() +
						"Details for Full Cancellation: " + buisnessID_1 + " # " + fullCancelDetails + " # " + prodID);
				driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID);
				driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
				Thread.sleep(10000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(6000);

				ExpRes = "Account verification and Account should be Available in Search List";
				ImageName = "ExistingAccount";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				// Business ID entered in Search field
				driver.findElement(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")).click();
				Thread.sleep(5000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);
				LOGS.info(Thread.currentThread() +"Clicked on Account Link");
				ActRes = "Account ID-" + businessID + " Found";

			} catch (Throwable e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				ActRes = "Account ID-" + businessID + " Not Found";
				LOGS.info(Thread.currentThread() +ActRes);
				Status = "Fail";
				count = count + 1;
			}
			ExportResults
			.exportTestResult("Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}


		if (count == 0) {
			try {
				if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
					driver.findElement(By.xpath("//span[text()='Details']")).click();
					LOGS.info(Thread.currentThread() +"Clicking on Details Link for the " + SalesRepType + " Rep ");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					LOGS.info(Thread.currentThread() +"Clicked on Details Link ");
				}
			} catch (Exception e) {
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error in OpsWizard Page");
				Status = "Fail";
				count = count + 1;
			}
		}


		if (count == 0) {
			// Capture Product Count from Live Products
			getLiveProductDetails();
			LOGS.info(Thread.currentThread() +"Printing activeProdDetails :" +activeProdDetails);
			activeProdCountBeforeCancel = ActiveProductsCount;
			if (activeProdCountBeforeCancel==0){
				count=count+1;
				ExpRes="Products availability verification in Live Products";
				ActRes="There is No Products In Live Products for Cancellation";
				LOGS.info(Thread.currentThread() +ActRes);
				Status="Fail";
				ExportResults
				.exportTestResult("Live Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} else {
				LOGS.info(Thread.currentThread() +","+activeProdCountBeforeCancel + " Products available in Live Products");
				Status = "Pass";
				ExpRes = "Verify the account which is suitable for Pre-Live Cancel or Post-Live Cancel";
				if (activeProdDetails.contains("Pending")) {
					LOGS.info(Thread.currentThread() +"Printing activeProdDetails :" +activeProdDetails);
					ActRes = "Account is suitable for Pre-Live Full Cancel";
					LOGS.info(Thread.currentThread() +ActRes);
				} else if (activeProdDetails.contains("Active")) {
					LOGS.info(Thread.currentThread() +"Printing activeProdDetails :" +activeProdDetails);
					ActRes = "Account is suitable for Post-Live full Cancel";
					LOGS.info(Thread.currentThread() +ActRes);
				}
				ExportResults.exportTestResult("Account verification for Full Cancel: ," + ExpRes + "," + ActRes + ","
						+ Status + "," + "No Image",pr.Resultsfolderpath);
			}


			if (count == 0) {
				if (CancelType.equalsIgnoreCase("100% Satisfaction")) {
					ExpRes="Website Product required for 100% Satisfaction Cancel";
					if (activeProdDetails.contains("Site") || activeProdDetails.contains("a1a0S000001nC5u")) {
						LOGS.info(Thread.currentThread() +"Printing activeProdDetails :" +activeProdDetails);
						ActRes="Website Product Available for 100% Satisfaction Cancellation";
						Status="Pass";
					} else {
						ActRes="Website Product Not available for the current account";
						Status="Fail";
						count = count + 1;
					}
					LOGS.info(Thread.currentThread() +ActRes);
					ExportResults
					.exportTestResult("Website Product Verification for 100% Satisfaction Cancel: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);


					if (count == 0) {
						String goLiveDateAvailable = "";
						String gLiveDateSF=cancel100PercentStsfnGoLiveD;
						//for (int j = 0; j < gLiveCount; j++) {
						//gLiveDateSF = gLiveDate[j];
						LOGS.info(Thread.currentThread() +"Go Live Date in SF for parent website is "+ ": " + gLiveDateSF);

						for (int i = 0; i > -7; i--) {
							DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
							final Calendar cal = Calendar.getInstance();
							cal.add(Calendar.DATE, i);
							String dateVerify = dateFormat.format(cal.getTime()).trim();
							LOGS.info(Thread.currentThread() +"Date" + i + ": " + dateVerify);

							String[] dateFun = dateVerify.split("/");
							String sfDateFormat = Integer.parseInt(dateFun[0]) + "/" + Integer.parseInt(dateFun[1]) + "/" + dateFun[2];
							LOGS.info(Thread.currentThread() +"SF Date format:" + sfDateFormat);

							if (sfDateFormat.equalsIgnoreCase(gLiveDateSF)) {
								LOGS.info(Thread.currentThread() +"Go live Date for website created within 7 days & valid date for 100% satisfaction Cancel");
								goLiveDateAvailable = "Pass";
								break;
							}
						}
						//}

						ExpRes = "Website Go Live Date validation and should be within 7 days for 100% Satisfaction Cancel";
						if (!goLiveDateAvailable.equalsIgnoreCase("Pass")) {
							count = count + 1;
							ActRes = "Account is not suitable for 100% satisfaction Cancel. Date should be within 7 days";
							Status = "Fail";
							LOGS.info(Thread.currentThread() +ActRes);
						} else {
							ActRes = "Account having data with Go Live Date-" + gLiveDateSF
									+ " and suitable for 100% satisfaction Cancel.";
							Status = "Pass";
						}

						ExportResults.exportTestResult("Go Live Date validation for 100% Satisfaction Cancel: ,"
								+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}

				} else if (CancelType.equalsIgnoreCase("Spendout")) {

					ExpRes="Budget Product required for Spendout Cancellation";
					if (activeProdDetails.contains("Display") || activeProdDetails.contains("Social")
							|| activeProdDetails.contains("Search")) {
						ActRes="Budget Product Available for Spendout Cancellation";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Pass";
					} else {
						ActRes="Budget Product required for Spendout Cancellation";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Fail";
						count = count + 1;
					}
					ExportResults.exportTestResult("Budget Product verification in Live Products for Spendout Cancellation: ,"
							+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
			}
		}


		if (count == 0) {
			// Capture Product details from Live Products
			getProductHistoryDetails();

			prodHistoryCountBeforeCancel = productHistoryCount;
			LOGS.info(Thread.currentThread() +","+prodHistoryCountBeforeCancel + " Products is in Product History Before Cancel");
		}


		if (count == 0) {
			// Contract Page
			try {
				SLocator("ContractsLink").click();
				LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
				((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
						SLocator("ContractNolink"));
				Thread.sleep(3000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(3000);

				ExpRes = "Capture Contract Number";
				ImageName = "ContractLink";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				// Capture Contract number
				contractNumber = SLocator("ContractNolink").getText();
				ActRes = "Contract Number:" + contractNumber;
				LOGS.info(Thread.currentThread() +ActRes);
				SLocator("ContractNolink").click();
				Thread.sleep(5000);
				driver.navigate().refresh();
				Thread.sleep(5000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);
				LOGS.info(Thread.currentThread() +"Contract number link clicked in account details page");
				Status = "Pass";
				ExportResults
				.exportTestResult("Contract Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				if (CancelType.equalsIgnoreCase("Spendout") || CancelType.equalsIgnoreCase("Customer")
						|| CancelType.equalsIgnoreCase("100% Satisfaction")) {
					SFInspectorBillingAnniversaryDay();
				}

			} catch (Exception e) {
				ExpRes = "Capture Contract Number";
				ActRes = "Error in Contracts";
				LOGS.info(Thread.currentThread() +ActRes);
				Status = "Fail";
				count = count + 1;
				ExportResults
				.exportTestResult("Contract Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		}


		if (count == 0) {
			// Product details taking from live subscription page
			getLiveSubscriptionsDetails();

			if(ActiveSubScrptCount==0){
				LOGS.info(Thread.currentThread() +"Products are not available in Live subscriptions");
				count=count+1;
			} else {
				liveSubscriptionCountBeforeCancel = ActiveSubScrptCount;
				LOGS.info(Thread.currentThread() +","+liveSubscriptionCountBeforeCancel
						+ " Product avaialable in Live SubScription in Contract Page");
			}
		}

		if (count == 0) {
			try {
				SLocator("Amend").click();
				LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page");
				Thread.sleep(5000);
				driver.navigate().refresh();
				Thread.sleep(5000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);

				SLocator("Amend2").click();
				LOGS.info(Thread.currentThread() +"Second Amend button clicked");
				Thread.sleep(5000);
				driver.navigate().refresh();
				Thread.sleep(5000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(5000);
				LOGS.info(Thread.currentThread() +buisnessID_1 + " # " + fullCancelDetails + " # " + prodID);

				LOGS.info(Thread.currentThread() +"Cancelling All Products");
				cancelStatusResult = CancelAllProduct(fullCancelDetails);

				ExpRes = "Quote should be Saved without errors";
				if (cancelStatusResult.equalsIgnoreCase("Fail")) {
					ActRes = "Full Cancel Process Failed - Quote process failed in QLE page";
					LOGS.info(Thread.currentThread() +ActRes);
					Status = "Fail";
					ActRes = "Quote process failed in QLE page";
					count = count + 1;
				} else {
					Status = "Pass";
					ActRes = "Quote Number " + QuoteNumber + " created and Saved in QLE Page without errors";
					LOGS.info(Thread.currentThread() +ActRes);
				}

				ImageName = "CancelProcess";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult(
						"Full Cancel Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			} catch (Exception exp) {
				exp.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error while creating quotes");
				Status = "Fail";
				count = count + 1;
			}
		}

		if (count == 0) {
			try {
				LOGS.info(Thread.currentThread() +"Clicking on Save Button in QLE");
				SLocator("SaveBtn").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				// driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
			} catch (Exception e) {
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Save Button not clicked in QLE page");
				driver.navigate().refresh();
				LOGS.info(Thread.currentThread() +"Page Refreshed");
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);

				try {
					SLocator("SaveBtn").click();
					LOGS.info(Thread.currentThread() +"Second Time Tried to Click on Save Button");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
				} catch (Exception exp) {
					exp.printStackTrace();
					LOGS.info(Thread.currentThread() +"Save Button not clicked");
					Status = "Fail";
					count = count + 1;
				}
			}
		}

		if (count == 1) {

			try {
				String Genrate_to_SubmitQuoteProcess = Genrate_to_SubmitQuote(fullCancelDetails);

				if (Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Failed");
					Status = "Fail";
				} else {
					LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Passed");
					Status = "Pass";
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Status = "Fail";
				count = count + 1;
			}

		}
		return Status;
	}


	//SalesForce login with SalesRep (Premise, TSales..) 
	public  void SFLogin(String SalesRepType) throws Throwable {
		try {
			LOGS.info(Thread.currentThread() +"SalesForce Login method Started");

			Properties OR = pr.loadPropertiesFiles("Order");

			if (SalesRepType.equalsIgnoreCase("TSales")) {
				SalesRep = OR.getProperty("TSales");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("Premise")) {
				SalesRep = OR.getProperty("Premise");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("SPE")) {
				SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswdSPE");
			} else if (SalesRepType.equalsIgnoreCase("CSRep")) {
				SalesRep = OR.getProperty("CSRep");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("DSCRep")) {
				SalesRep = OR.getProperty("DSCRep");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else if (SalesRepType.equalsIgnoreCase("NonCpqTsale")) {
				SFLoginResult = SalesforceLogin("tSalesRepUserName", "tSalesRepPassWord");
			} else if (SalesRepType.equalsIgnoreCase("NonCpqPremiseRep")) {
				SFLoginResult = SalesforceLogin("PremiseRepUserName", "PremiseRepPassWord");
			} else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
				SalesRep = OR.getProperty("OpsWizard");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			} else {
				LOGS.info(Thread.currentThread() +"Select the proper Rep name. Current Sales Rep is :" + SalesRepType);
				count = count + 1;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in SFLogin method");
			Status = "Fail";
			ImageName = "SFLoginError";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "SFLogin method should execute successfully";
			ActRes = "Error in SFLogin method";
			ExportResults
			.exportTestResult("SFLogin Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}
	}

		// Capture the product details (Product Name, Product Status, Go live Date)
		// from live products
		public  void getLiveProductDetails() throws Throwable {
			String captureProdCountStr = "";
			productsCaptureHomePage = ""; 
			Status = "Pass";
			LOGS.info(Thread.currentThread() +"Capturing Live Product Details");
			
			try {
				// Taking Live Product Count
				Thread.sleep(7000);
				driver.navigate().refresh();
				Thread.sleep(10000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(10000);
				
				liveProductAllCount = SLocator("LiveProductCount").getText();
				liveProductAllCount = liveProductAllCount.replace("[", "");
				liveProductAllCount = liveProductAllCount.replace("]", "");
				LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + liveProductAllCount);

				SLocator("LiveProductLink").click();
				Thread.sleep(8000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(8000);
				LOGS.info(Thread.currentThread() +"Clicked on Live Products link");

				if (liveProductAllCount.equalsIgnoreCase("0")) {

					LOGS.info(Thread.currentThread() +"Active Product count is Zero");
					ActiveProductsCount = 0;
					ImageName = "LiveProductsPage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				} else if (liveProductAllCount.contains("+")) {
					captureProdCountStr = SLocator("LiveProdCountStr").getText();
					LOGS.info(Thread.currentThread() +"Captured Text-" + captureProdCountStr);

					SLocator("LiveProdCountStr").click();
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

					captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
					captureProdCountStr = captureProdCountStr.replace(")", "");
					captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
					captureProdCountStr = captureProdCountStr.replace(" �", "");

					ActiveProductsCount = Integer.parseInt(captureProdCountStr);
					ImageName = "LiveProductsPage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					for (int i = 1; i <= ActiveProductsCount; i++) {
						Status = "Pass";
						String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
						String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

						String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
						String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
						LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

						String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
						String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

						String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
						String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
						LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);


						if (CancelType.equalsIgnoreCase("100% Satisfaction")){
							if (getActiveProducts.contains("Site") ){
								cancel100PercentStsfnGoLiveD=liveProductGoLiveDate;
							}
						}

						String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
								+ liveProductGoLiveDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;

						goLiveDateDetails = goLiveDateDetails + "_" + liveProductGoLiveDate;
					}
					driver.navigate().back();

					activeProdDetails = productsCaptureHomePage;

				} else {
					captureProdCountStr = liveProductAllCount;
					ActiveProductsCount = Integer.parseInt(captureProdCountStr);

					ImageName = "LiveProductsPage";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

					for (int i = 1; i <= ActiveProductsCount; i++) {
						Status = "Pass";
						String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
								+ (i + 1) + "]/th/a";
						String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

						String subscriptionIDPath = "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
								+ i + "]/td[2]/a";
						String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
						LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

						String liveProductStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
								+ (i + 1) + "]/td[3]";
						String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

						String liveProductGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
								+ (i + 1) + "]/td[5]";
						String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
						LOGS.info(Thread.currentThread() +"Go live Date is :" + liveProductGoLiveDate);


						if (CancelType.equalsIgnoreCase("100% Satisfaction")){
							//Capturing Parent website go live date
							if (getActiveProducts.contains("Site") || getActiveProducts.contains("a1a0S000001nCMC")){
								cancel100PercentStsfnGoLiveD=liveProductGoLiveDate;
								
							}
						}
						
						String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
								+ liveProductGoLiveDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;

						goLiveDateDetails = goLiveDateDetails + "_" + liveProductGoLiveDate;
					}

					activeProdDetails = productsCaptureHomePage;
				}


				if (ActiveProductsCount == 0) {
					ActRes = "Products unavailable in Live Products";
				} else {
					
					if(activeProdDetails.contains("Active")){
						if(activeProdDetails.contains("Pending")){
							ActRes="Pending and Active status Products Available for this Account.";
						} else {
							ActRes="Active status Products Available for this Account.";
						}
						
					} else if(activeProdDetails.contains("Pending")){
						ActRes="Pending status Products Available for this Account.";
					}
					
					ActRes = ActiveProductsCount + " Products Available in Live Products. "+ ActRes;
					Status = "Pass";
				}

				ExpRes = "Products verification in Live Products for the Account-" + businessID;
				prodCount = ProductName.size();
				ExportResults
						.exportTestResult("Live Products Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				
				LOGS.info(Thread.currentThread() +","+ActiveProductsCount + " products available in Live Products");
				if (ActiveProductsCount > 0) {
					LOGS.info(Thread.currentThread() +"Products are:-\n" + productsCaptureHomePage);
				}
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
				Status = "Fail";
				ImageName = "GetLiveProduct";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Products verification in Live Products for the Account-" + businessID;
				ActRes = "Error in getLiveProductDetails method";
				ExportResults
						.exportTestResult("Live Products Status," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				count = count + 1;
			}
		}


	//Capture the product details (Product Name, Product Status, Go live Date) from live subscription page
	public  void getLiveSubscriptionsDetailsContractPage() throws Throwable {

		String captureSubScrptCountStr = "", LivSubCount = "";
		productsCaptureHomePage = "";
		getSubscriptionID.clear();
		ProductName.clear();

		try {
			LOGS.info(Thread.currentThread() +"Calling getLiveSubscriptionsDetailsContractPage method");
			LivSubCount = SLocator("LiveSubScriptionCount").getText();
			LivSubCount = LivSubCount.replace("[", "");
			LivSubCount = LivSubCount.replace("]", "");

			if (LivSubCount == "0") {
				ActRes = "Live Subscriptions does not have products";
				LOGS.info(Thread.currentThread() +"Live Subscription Products are not available");
				count = count + 1;

			} else {
				SLocator("LiveSubScriptionContract").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Available Live Subscription Products-->" + LivSubCount);
				// Status = "Pass";
				ActRes = "Live Subscriptions have products";
			}
			ImageName = "LiveSubscription";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Live Subscriptions should have products";
			ExportResults
			.exportTestResult("Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			if (count == 0) {
				LOGS.info(Thread.currentThread() +"Product details in Live Subscriptions  :");
				// Executes IF loop only the Live Subscription count is more
				// than 5
				if (LivSubCount.contains("+")) {

					captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
					LOGS.info(Thread.currentThread() +"Captured Text-" + captureSubScrptCountStr);
					captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
					captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
					captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
					captureSubScrptCountStr = captureSubScrptCountStr.replace(" �", "");

					SLocator("LiveSubScriptionGoToList").click();
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					LOGS.info(Thread.currentThread() +"Go To List will be performed in Live Subscription");
					ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
					LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products--->" + ActiveSubScrptCount);

					for (int i = 1; i <= ActiveSubScrptCount; i++) {

						String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
						String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
						LOGS.info(Thread.currentThread() +getSubProdName);

						String liveSubProdStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
						String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
						LOGS.info(Thread.currentThread() +liveSubProdStatus);

						String liveSubGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
						String liveSubGoLiveDate = driver.findElement(By.xpath(liveSubGoLiveDatePath)).getText();
						LOGS.info(Thread.currentThread() +liveSubGoLiveDate);

						String liveSubEndDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[6]";
						String liveSubEndDate = driver.findElement(By.xpath(liveSubEndDatePath)).getText();
						LOGS.info(Thread.currentThread() +liveSubEndDate);

						String prodDetails = getSubProdName + "_" + liveSubProdStatus + "_" + liveSubGoLiveDate + "_"
								+ liveSubEndDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = prodDetails + "-" + productsCaptureHomePage;

						prodDetails = getSubProdName + "_" + liveSubProdStatus + "_" + liveSubGoLiveDate + "_"
								+ liveSubEndDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = prodDetails + "-" + productsCaptureHomePage;
					}

					driver.navigate().back();

				} else {
					// LOGS.info(Thread.currentThread() +captureProdCountStr + " ->" + LivSubCount);
					ActiveSubScrptCount = Integer.parseInt(LivSubCount);
					LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products-->" + ActiveSubScrptCount);

					for (int i = 1; i <= ActiveSubScrptCount; i++) {
						String activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
								+ i + "]/td[2]";
						String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
						LOGS.info(Thread.currentThread() +getSubProdName);

						String liveSubProdStatusPath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
								+ i + "]/td[3]";
						String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
						LOGS.info(Thread.currentThread() +liveSubProdStatus);

						String liveSubGoLiveDatePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
								+ i + "]/td[5]";
						String liveSubGoLiveDate = driver.findElement(By.xpath(liveSubGoLiveDatePath)).getText();
						LOGS.info(Thread.currentThread() +liveSubGoLiveDate);

						String liveSubEndDatePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
								+ i + "]/td[6]";
						String liveSubEndDate = driver.findElement(By.xpath(liveSubEndDatePath)).getText();
						LOGS.info(Thread.currentThread() +liveSubEndDate);

						String prodDetails = getSubProdName + "_" + liveSubProdStatus + "_" + liveSubGoLiveDate + "_"
								+ liveSubEndDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = prodDetails + "-" + productsCaptureHomePage;
					}
				}

				ImageName = "SubscriptionProdDetails";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Capture the Product details from Live Subscription section for the Business ID- "
						+ businessID;
				prodCount = ProductName.size();
				LOGS.info(Thread.currentThread() +"Available Active Product: " + ActiveSubScrptCount + " & Products are -" + productsCaptureHomePage);

				ActRes = ActiveSubScrptCount + " Products Available in Live Subscription Page. \nProducts are ->"
						+ productsCaptureHomePage;

				Status = "Pass";
				ExportResults.exportTestResult(
						"Live Subscription Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
			Status = "Fail";
			ImageName = "GetLiveProduct";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture Product Name-Status-Go Live Date from Live Product Details";
			ActRes = "Error in Live Product Section method";
			ExportResults
			.exportTestResult("Live Product Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
			LOGS.info(Thread.currentThread() +"Exception Occured: "+e.getMessage());
		}
	}				
		
		
		// Capture the product details (Product Name, Product Status, Go live Date)
		// from live subscription page
		public  void getLiveSubscriptionsDetails() throws Throwable {

			LOGS.info(Thread.currentThread() +"Calling getLiveSubscriptionsDetailsContractPage method");
			String LivSubCount = "";
			Status = "Pass";
			productsCaptureHomePage = "";
			getSubscriptionID.clear();
			ProductName.clear();

			try {
				LivSubCount = SLocator("LiveSubScriptionCount").getText();
				LivSubCount = LivSubCount.replace("[", "");
				LivSubCount = LivSubCount.replace("]", "");

				if (LivSubCount.equalsIgnoreCase("0")) {
					ActRes = "Live Subscriptions does not have products";
					LOGS.info(Thread.currentThread() +"Products not available in Live Subscription");
					ActiveSubScrptCount=0;
					
				} else {
					SLocator("LiveSubScriptionContract").click();
					Thread.sleep(8000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(8000);
					LOGS.info(Thread.currentThread() +"Available Live Subscription Products-->" + LivSubCount);
					ActRes = "Products available in Live Subscriptions to process Amend Scenario";
				}

				ImageName = "LiveSubscription";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Live Subscriptions must have products to process Amend Scenario";
				ExportResults
						.exportTestResult("Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				
				if (!LivSubCount.equalsIgnoreCase("0")) {
					LOGS.info(Thread.currentThread() +"Products available in Live Subscriptions :"+LivSubCount);
					String captureSubScrptCountStr="";
					
					if (LivSubCount.contains("+")) {
						
						// Executes IF loop only the Live Subscription count is more
						// than 5
						
						captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
						LOGS.info(Thread.currentThread() +"Captured Text-" + captureSubScrptCountStr);
						captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
						captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
						captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
						captureSubScrptCountStr = captureSubScrptCountStr.replace(" �", "");

						SLocator("LiveSubScriptionGoToList").click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);
						LOGS.info(Thread.currentThread() +"Go To List will be performed in Live Subscription");
						ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
						LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products--->" + ActiveSubScrptCount);


						LOGS.info(Thread.currentThread() +"Live Subscription Product Details **********\n");
						for (int i = 1; i <= ActiveSubScrptCount; i++) {

							String activeSubNumPath = "//tr[@class='headerRow']//following::tr["+ i + "]/th[1]/a";
							String getSubNum = driver.findElement(By.xpath(activeSubNumPath)).getText();
							LOGS.info(Thread.currentThread() +getSubNum);
							
							String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
							String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
							LOGS.info(Thread.currentThread() +getSubProdName);

							String liveSubProdStatusPath = "//tr[@class='headerRow']//following::tr["+ i + "]/td[3]";
							String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
							LOGS.info(Thread.currentThread() +liveSubProdStatus);

							String monthlInvPricePath = "//tr[@class='headerRow']//following::tr["+ i + "]/td[4]";
							String monthlInvPrice = driver.findElement(By.xpath(monthlInvPricePath)).getText();
							LOGS.info(Thread.currentThread() +monthlInvPrice);
							
							String liveSubGoLiveDatePath = "//tr[@class='headerRow']//following::tr["+ i + "]/td[5]";
							String liveSubGoLiveDate = driver.findElement(By.xpath(liveSubGoLiveDatePath)).getText();
							LOGS.info(Thread.currentThread() +liveSubGoLiveDate);

							String liveSubEndDatePath = "//tr[@class='headerRow']//following::tr["+ i + "]/td[6]";
							String liveSubEndDate = driver.findElement(By.xpath(liveSubEndDatePath)).getText();
							LOGS.info(Thread.currentThread() +liveSubEndDate);

							String prodDetails = getSubNum + "_" + getSubProdName + "_" + liveSubProdStatus + "_" + monthlInvPrice + "_" + liveSubGoLiveDate + "_"
									+ liveSubEndDate;
							
							if (CancelType.equalsIgnoreCase("100% Satisfaction")){
								if (getSubProdName.contains("Website")){
									cancel100PercentStsfnGoLiveD=liveSubGoLiveDate;
								}
							}
							
							
							ProductName.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;						
							liveSubEndDetails=liveSubEndDetails + ":" + liveSubEndDate;
						}
						
						driver.navigate().back();
						liveSubScriptionDetails = productsCaptureHomePage;
						
					} else {

						// LOGS.info(Thread.currentThread() +captureProdCountStr + " ->" + LivSubCount);
						ActiveSubScrptCount = Integer.parseInt(LivSubCount);
						LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products-->" + ActiveSubScrptCount);
						ImageName = "SubscriptionProdDetails";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						
						LOGS.info(Thread.currentThread() +"Live Subscription Product Details **********\n");
						for (int i = 1; i <= ActiveSubScrptCount; i++) {
							String activeSubNumPath = "//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/th[1]/a";
							String getSubNum = driver.findElement(By.xpath(activeSubNumPath)).getText();
							LOGS.info(Thread.currentThread() +getSubNum);
							
							String activeSubProdNamePath = "(//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/td[2])[1]";
							String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
							LOGS.info(Thread.currentThread() +getSubProdName);

							String liveSubProdStatusPath = "(//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/td[3])[1]";
							String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
							LOGS.info(Thread.currentThread() +liveSubProdStatus);

							String monthlInvPricePath = "(//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/td[4])[1]";
							String monthlInvPrice = driver.findElement(By.xpath(monthlInvPricePath)).getText();
							LOGS.info(Thread.currentThread() +monthlInvPrice);
							
							String liveSubGoLiveDatePath = "(//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/td[5])[1]";
							String liveSubGoLiveDate = driver.findElement(By.xpath(liveSubGoLiveDatePath)).getText();
							LOGS.info(Thread.currentThread() +liveSubGoLiveDate);

							String liveSubEndDatePath = "(//div[@class='listHoverLinks']//following::tr[@class='headerRow']//following::tr["
									+ i + "]/td[6])[1]";
							String liveSubEndDate = driver.findElement(By.xpath(liveSubEndDatePath)).getText();
							LOGS.info(Thread.currentThread() +liveSubEndDate);

							String prodDetails = getSubNum + "_" + getSubProdName + "_" + liveSubProdStatus + "_" + monthlInvPrice + "_" + liveSubGoLiveDate + "_"
									+ liveSubEndDate;
							
							if (CancelType.equalsIgnoreCase("100% Satisfaction")){
								if (getSubProdName.contains("Website")){
									cancel100PercentStsfnGoLiveD=liveSubGoLiveDate;
								}
							}
							
							
							ProductName.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;						
							liveSubEndDetails=liveSubEndDetails + ":" + liveSubEndDate;
						}
						
						liveSubScriptionDetails = productsCaptureHomePage;
					
					}
					
					ExpRes = "Capture the Live Subscriptions Product Count for the Account- " + businessID;
					prodCount = ProductName.size();
					LOGS.info(Thread.currentThread() +"Active Live Subscription Products: " + ActiveSubScrptCount + ". Products are -"
							+ productsCaptureHomePage);


					ActRes = ActiveSubScrptCount + " Products Available in Live Subscriptions.";
					Status = "Pass";
					ExportResults
							.exportTestResult("Live Subscriptions Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				
				

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error in getLiveSubscriptionsDetails method");
				Status = "Fail";
				ImageName = "GetLiveProduct";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Capture Product details from Live Subscriptions";
				ActRes = "Error in Live Subscriptions method";
				ExportResults
						.exportTestResult("Live Subscriptions," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				count = count + 1;
			}
		}
		
		

	//Validation for Full Cancel
	public  void LiveProductAfterFullCancelVerification() throws Throwable {

		try {

			LOGS.info(Thread.currentThread() +"Calling LiveProductAfterFullCancelVerification method");


			//Live Product tab verification for full cancel
			String LiveProductAllCount = SLocator("LiveProductCount").getText();
			LiveProductAllCount = LiveProductAllCount.replace("[", "");
			LiveProductAllCount = LiveProductAllCount.replace("]", "");
			LiveProductAllCount = LiveProductAllCount.replace("+", "");
			LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + LiveProductAllCount);

			ActiveProductsCount = Integer.parseInt(LiveProductAllCount);

			ExpRes = "Product count in Live Products should be zero after Full Cancel";
			ImageName = "fullCancelVerification";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

			if (ActiveProductsCount == 0){
				ActRes = "Product Count in Live Product is ZERO as expected";
				Status="Pass";
			} else {
				ActRes = "Product Count in Live Account is "+ActiveProductsCount;
				Status="Fail";
			}
			ExportResults
			.exportTestResult("Full Cancel Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Product Count before cancel-"+activeProdCountBeforeCancel);


			//Product History Verification
			String ProductHistoryAllCount = SLocator("ProductHistoryCount").getText();
			ProductHistoryAllCount = ProductHistoryAllCount.replace("[", "");
			ProductHistoryAllCount = ProductHistoryAllCount.replace("]", "");
			ProductHistoryAllCount = ProductHistoryAllCount.replace("+", "");
			LOGS.info(Thread.currentThread() +"Product Count taking from Product History in top row links- " + ProductHistoryAllCount);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in fullCancelVerification method");
			Status = "Fail";
			ImageName = "fullCancelVerification";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "";
			ActRes = "Error in fullCancelVerification Section method";
			ExportResults
			.exportTestResult("Full Cancel Validation," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;

		}
	}


		// Capture the product details from Product History (Product Name, Product
		// Status, Go live Date)
		public  void getProductHistoryDetails() throws Throwable {

			LOGS.info(Thread.currentThread() +"Capturing details from Product History");
			String captureProdCountStr = "";
			productsCaptureHomePage = "";
			ProductName.clear();
			Status = "Pass";

			try {
				// Taking Live Product Count
				productHistoryAllCount = SLocator("ProductHistoryCount").getText();
				productHistoryAllCount = productHistoryAllCount.replace("[", "");
				productHistoryAllCount = productHistoryAllCount.replace("]", "");
				LOGS.info(Thread.currentThread() +"Taking Product details from Product History from top row links- " + productHistoryAllCount);

				SLocator("ProductHistoryLink").click();
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Clicked on Product History link");
				
				if (productHistoryAllCount.contains("0")) {
						LOGS.info(Thread.currentThread() +"Products are not available in Product History");
						productHistoryCount = 0;
						ImageName = "ProductHistorySection";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		
				} else if (productHistoryAllCount.contains("+")) {
						captureProdCountStr = SLocator("ProductHistoryCountStr").getText();
						LOGS.info(Thread.currentThread() +"Captured Text-" + captureProdCountStr);

				SLocator("ProductHistoryCountStr").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

				captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
				captureProdCountStr = captureProdCountStr.replace(")", "");
				captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
				captureProdCountStr = captureProdCountStr.replace(" �", "");

						productHistoryCount = Integer.parseInt(captureProdCountStr);
						ImageName = "ProductHistorySection";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						for (int i = 1; i <= productHistoryCount; i++) {
							String getProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
							String getProdName = driver.findElement(By.xpath(getProdNamePath)).getText();
							LOGS.info(Thread.currentThread() +"Product Name is :" + getProdName);

							String getSubIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
							String getSubID = driver.findElement(By.xpath(getSubIDPath)).getText();
							LOGS.info(Thread.currentThread() +"Product Status is :" + getSubID);

					String getProdStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + getProdStatusPath);
					String getProdStatus = driver.findElement(By.xpath(getProdStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + getProdStatus);

					String getGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + getGoLiveDatePath);
					String getGoLiveDate = driver.findElement(By.xpath(getGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Go Live Date is :" + getGoLiveDate);

							String getEndDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[6]";
							String getEndDate = driver.findElement(By.xpath(getEndDatePath)).getText();
							LOGS.info(Thread.currentThread() +"End Date is :" + getEndDate);

							String prodDetails = getProdName + "_" + getSubID + "_" + getProdStatus + "_" + getGoLiveDate
									+ "_" + getEndDate;
							ProductName.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;
						}
						driver.navigate().back();
						productHistoryDetails = productsCaptureHomePage;

					} else {
						captureProdCountStr = productHistoryAllCount;
						productHistoryCount = Integer.parseInt(captureProdCountStr);
						ImageName = "ProductHistorySection";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

				for (int i = 1; i <= productHistoryCount; i++) {

							String getProdNamePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1) + "]/th/a";
							String getProdName = driver.findElement(By.xpath(getProdNamePath)).getText();
							LOGS.info(Thread.currentThread() +"Product Name is :" + getProdName);

							String getSubIDPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1) + "]/td[2]";
							String getSubID = driver.findElement(By.xpath(getSubIDPath)).getText();
							LOGS.info(Thread.currentThread() +"Product Status is :" + getSubID);

					String getProdStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + getProdStatusPath);
					String getProdStatus = driver.findElement(By.xpath(getProdStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + getProdStatus);

					String getGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + getGoLiveDatePath);
					String getGoLiveDate = driver.findElement(By.xpath(getGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Golive Date is :" + getGoLiveDate);

					String getEndDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[6]";
					LOGS.info(Thread.currentThread() +"Path:" + getEndDatePath);
					String getEndDate = driver.findElement(By.xpath(getEndDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Go Live Date is :" + getEndDate);

							String prodDetails = getProdName + "_" + getSubID + "_" + getProdStatus + "_" + getGoLiveDate
									+ "_" + getEndDate;
							ProductName.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + "-" + prodDetails;
						}

			LOGS.info(Thread.currentThread() +"Number of product available:" + captureProdCountStr);
			LOGS.info(Thread.currentThread() +"Products :-" + productsCaptureHomePage);

			ActRes="";

			ImageName = "ProductHistorySection";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture the Product Count and Product Names available in Product History Section for the Account-"
					+ businessID;
			prodCount = ProductName.size();
			LOGS.info(Thread.currentThread() +"Total Products in Live Product Section is " + productHistoryCount);

			ActRes = productHistoryCount + " Products Available in Product History Section. \nProducts are ->"
					+ productsCaptureHomePage;
			Status = "Pass";
			ExportResults
			.exportTestResult("Product History Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in getProductHistoryDetails method");
			Status = "Fail";
			ImageName = "ProductHistoryDetails";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture Product Name-Status-Go Live Date-End Date from Product History Details";
			ActRes = "Error in Product History Section";
			ExportResults
			.exportTestResult("Product History Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}

	}

	public  String TermEndDateValidation(String buisnessID1, String ExistingProduct_1) {

		LOGS.info(Thread.currentThread() +"Calling TermEndDateValidation method-->\nBusiness ID ->" + buisnessID1 + "\n# Existing Product ->"
				+ ExistingProduct_1);
		String captureProdCountStr = "", LivSubCount = "", captureSubScrptCountStr = "";
		productsCaptureHomePage = "";
		int ActiveProductsCount = 0, ActiveSubScrptCount = 0;

		try {

			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(buisnessID1);
			driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicked on Search Button");

			driver.findElement(By.xpath("//td[text()='" + buisnessID1 + "']//parent::tr//th/a")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicking on Account Link");

			ExpRes = "Account Should be Available";
			ActRes = "Account Found";
			Status = "Pass";
			ImageName = "ExistingAccount";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Account Verification:" + "," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			if (count == 0) {
				// Capture Product details from Live Products
				try {
					getLiveProductDetails();
					activeProdCountBeforeCancel = ActiveProductsCount;
					LOGS.info(Thread.currentThread() +","+activeProdCountAfterCancel + " Products in Live Product");
				} catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					count = count + 1;
				}
			}

			if (count == 0) {
				// Contract Page
				try {
					SLocator("ContractsLink").click();
					LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
							SLocator("ContractNolink"));
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);

					ExpRes = "Capture Contract Number";
					ImageName = "ContractLink";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					// Capture Contract number
					contractNumber = SLocator("ContractNolink").getText();
					ActRes = "Contract Number:" + contractNumber;
					LOGS.info(Thread.currentThread() +ActRes);

					SLocator("ContractNolink").click();
					LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					Status = "Pass";
				} catch (Exception e) {
					ActRes = "Error in Contracts";
					LOGS.info(Thread.currentThread() +ActRes);
					Status = "Fail";
					count = count + 1;
				}
				ExportResults.exportTestResult(
						"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

			if (count == 0) {

				try {
					LivSubCount = SLocator("LiveSubScriptionCount").getText();
					LivSubCount = LivSubCount.replace("[", "");
					LivSubCount = LivSubCount.replace("]", "");

					if (LivSubCount == "0") {
						Status = "Fail";
						ActRes = "Live Subscriptions does not have products";
						LOGS.info(Thread.currentThread() +"Live Subscription Products are not available");
						count = count + 1;
					} else {
						SLocator("LiveSubScriptionContract").click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Available Live Subscription Products-->" + LivSubCount);
						Status = "Pass";
						ActRes = "Live Subscriptions have products";
					}
					ImageName = "LiveSubscription";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Live Subscriptions should have products";
					ExportResults.exportTestResult(
							"Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					if (count == 0) {
						// Executes IF loop only the Live Subscription count is more
						// than 5
						if (LivSubCount.contains("+")) {

							captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
							LOGS.info(Thread.currentThread() +"Captured Text-" + captureSubScrptCountStr);
							captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace(" �", "");

							SLocator("LiveSubScriptionGoToList").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Go To List will be performed in Live Subscription");
							ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
							LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products--->" + ActiveSubScrptCount);

							getSubscriptionID.clear();
							ProductName.clear();
							productsCaptureHomePage = "";

							LOGS.info(Thread.currentThread() +"Product Name in Live Subscription is :");
							for (int i = 1; i <= ActiveSubScrptCount; i++) {

								String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
								String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
								LOGS.info(Thread.currentThread() +getSubProdName);

								ProductName.add(getSubProdName);
								productsCaptureHomePage = getSubProdName + "-" + productsCaptureHomePage;
							}

							if (productsCaptureHomePage.contains("Social (a la carte)")) {
								LOGS.info(Thread.currentThread() +"Social A La Carte is available for this product");

								ExpRes = "Social Child Product Should be present";
								if (productsCaptureHomePage.contains("Social-")) {

									ActRes = "Child product is available";
									LOGS.info(Thread.currentThread() +ActRes);

									String CaptureSUBID = driver
											.findElement(
													By.xpath("//td[text()='Social']/preceding::td[1]/following::th[1]/a"))
											.getText();
									LOGS.info(Thread.currentThread() +"Live Subscription ID:" + CaptureSUBID);

									driver.findElement(
											By.xpath("//td[text()='Social']/preceding::td[1]/following::th[1]/a")).click();
									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);

									LOGS.info(Thread.currentThread() +"Reached SF Inspector page");
									driver.navigate().back();
								} else {
									ActRes = "Child product is missing";
									LOGS.info(Thread.currentThread() +ActRes);
								}

								ImageName = "SubscriptionAddOnSocialALaCarte";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								ExpRes = "Social A La Carte Process Status";
								ExportResults.exportTestResult("Subscriptions Cancellation Status:," + ExpRes + "," + ActRes
										+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
							}

							/* if(ExistingProduct_1.equalsIgnoreCase(getSubProdName)){
								 String activeSubIDPath =
								 "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
								 // LOGS.info(Thread.currentThread() +"Path:" + activeProdPath); getSubID =
								 driver.findElement(By.xpath(activeSubIDPath)).getText
								 (); LOGS.info(Thread.currentThread() +"Subscription ID is :" + getSubID);

								 driver.findElement(By.xpath(activeSubIDPath)).click();

								 if(ExistingProduct_1.equalsIgnoreCase("Online Foundation Solution")){

								  } if(ExistingProduct_1.
								  equalsIgnoreCase("Social (a la carte)")){ //
								  AmendBlockDateworkAround();
								  SalesforceTasks.SFInspectorPI("Term_End_Date");

								  LOGS.
								  info("SFInspectorPI method Entered the value-> Term_End_Date in filter"
								  ); Thread.sleep(4000); //
								  SLocator("editBtnSfInp").click();

								  driver.findElement(By.xpath("//button[text()='Edit']"
								  )).click();

								  LOGS.info(Thread.currentThread() +"clicked on edit btn in SF inspector");
								  Thread.sleep(2000);
								  driver.manage().timeouts().implicitlyWait(50,
								  TimeUnit.SECONDS); Thread.sleep(2000);

								  String termEndDate = driver .findElement(By.
								  xpath("//div[text()='Package Term End Date']/parent::td/following::td[2]/div"
								  )).getText();
								  LOGS.info(Thread.currentThread() +"Amend Block Date set by system: " +
								  termEndDate); DateTimeFormatter dtf =
								  DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
								  LocalDateTime now = LocalDateTime.now(); //
								  System.out.println(dtf.format(now)); String[] Date =
								  dtf.format(now).split(" ");
								  LOGS.info(Thread.currentThread() +"Amend Block Date: " + Date[0].replace("/",
								  "-")); driver.findElement(By.xpath(
								  "//tr[contains(@title,'Amend_Block_Date__c')]/td[4]/textarea"
								  )).clear(); driver.findElement(By.xpath(
								  "//tr[contains(@title,'Amend_Block_Date__c')]/td[4]/textarea"
								  )) .sendKeys(Date[0].replace("/", "-"));
								  Thread.sleep(5000);
								  driver.findElement(By.xpath("//button[text()='Save']"
								  )).click();
								  LOGS.info(Thread.currentThread() +"Save clicked in SF inspector");
								  LOGS.info(Thread.currentThread() +"Navigating back to Subcription Page");
								  driver.navigate().back(); Thread.sleep(5000);
								  driver.findElement(By.xpath(
								  "//span[text()='Contract']//following::div[1]/a")).
								  click(); LOGS.info(Thread.currentThread() +"Clicked on contract link");
								  Thread.sleep(10000);

								  Status = "Pass";

								  Thread.sleep(5000); }

								  } */
						} else {
							captureProdCountStr = LivSubCount;
							// LOGS.info(Thread.currentThread() +captureProdCountStr + " ->" + LivSubCount
							// );
							ActiveSubScrptCount = Integer.parseInt(captureProdCountStr);
							LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products-->" + ActiveSubScrptCount);

							getSubscriptionID.clear();
							ProductName.clear();
							productsCaptureHomePage = "";

							LOGS.info(Thread.currentThread() +"Product Name in Live Subscription is :");
							for (int i = 1; i <= ActiveSubScrptCount; i++) {
								// div[@class='listHoverLinks']//following::div[@class='listRelatedObject
								// customnotabBlock'][1]//tr[@class='headerRow']//following::tr[2]/th/a
								String activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ i + "]/td[2]";
								String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
								LOGS.info(Thread.currentThread() +getSubProdName);

								ProductName.add(getSubProdName);
								productsCaptureHomePage = getSubProdName + "-" + productsCaptureHomePage;
							}

							ImageName = "SubscriptionAddOnSocialALaCarte";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ExpRes = "Capture the Product Count - Active Products and Subscription ID for the Business ID- "
									+ businessID;
							prodCount = ProductName.size();
							LOGS.info(Thread.currentThread() +"Available Active Product: " + prodCount + " & Products are -"
									+ productsCaptureHomePage);

							ActRes = prodCount + " Live Product Available and \nAvailable Product ->"
									+ productsCaptureHomePage + "\nSubscription Products -> " + subScriptionIDCapture
									+ "\n";
							Status = "Pass";
							ExportResults.exportTestResult(
									"Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

							/*
							 * for (int i = 1; i <= ActiveProductsCount; i++) {
							 * String activeProdPath =
							 * "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
							 * + i + "]/th/a"; //LOGS.info(Thread.currentThread() +"Path:" +
							 * activeProdPath); String getActiveProducts =
							 * driver.findElement(By.xpath(activeProdPath)).getText(
							 * ); LOGS.info(Thread.currentThread() +"Product Name is :" +
							 * getActiveProducts);
							 * 
							 * String subscriptionIDPath =
							 * "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
							 * + i+"]/td[2]/a"; LOGS.info(Thread.currentThread() +"Path:" +
							 * subscriptionIDPath); String getSubID =
							 * driver.findElement(By.xpath(subscriptionIDPath)).
							 * getText(); LOGS.info(Thread.currentThread() +"SubScription ID is :" +
							 * getSubID);
							 * 
							 * ProductName.add(getActiveProducts);
							 * productsCaptureHomePage = productsCaptureHomePage +
							 * "-" + getActiveProducts;
							 * getSubscriptionID.add(getSubID) ;
							 * subScriptionIDCapture = subScriptionIDCapture + "-" +
							 * getActiveProducts; }
							 */

							/*if (subScriptionIDCapture.contains("Social (a la carte)")) {
									LOGS.info(Thread.currentThread() +"Active Social A La Carte is available for the Account");

									ExpRes = "Social Child Product Should be present";
									if (productsCaptureHomePage.contains("Social")) {

										ActRes = "Child product is available";
										LOGS.info(Thread.currentThread() +ActRes);

										String CaptureSUBID = driver
												.findElement(
														By.xpath("//td[text()='Social']/preceding::td[1]/following::th[1]/a"))
												.getText();
										LOGS.info(Thread.currentThread() +"Live Subscription ID:" + CaptureSUBID);

										driver.findElement(
												By.xpath("//td[text()='Social']/preceding::td[1]/following::th[1]/a")).click();
										Thread.sleep(2000);
										driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
										Thread.sleep(2000);

										LOGS.info(Thread.currentThread() +"Reached SF Inspector page");
										driver.navigate().back();
									} else {
										ActRes = "Child product is missing";
										LOGS.info(Thread.currentThread() +ActRes);
									}

									ImageName = "SubscriptionAddOnSocialALaCarte";
									ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
									ExpRes = "Social A La Carte Process Status";
									ExportResults.exportTestResult("Subscriptions Cancellation Status:," + ExpRes + "," + ActRes
											+ "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}*/
						}

					}

				} catch (Exception e) {
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Live Subscription is Not updated at this time");
				}
			}

			try {
				SubScriptionValidation(ExistingProduct_1, productsCaptureHomePage, ActiveSubScrptCount);
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"Error in SubScriptionValidation method");
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Status = "Fail";
		}

		return "Pass";
	}


	public String SubScriptionValidation(String existingProduct, String productsCaptured, int activeProdCount)
			throws Exception {

		String subScriptionStatus = "Pass", activeProdName = "", subProd = "";
		LOGS.info(Thread.currentThread() +"Product to be cancelled-->" + existingProduct);
		LOGS.info(Thread.currentThread() +"Product captured from the account -->" + productsCaptured);
		LOGS.info(Thread.currentThread() +"Active Products-->" + activeProdCount);

		try {
			String prod[] = existingProduct.split(",");
			int expProdCount = prod.length;
			LOGS.info(Thread.currentThread() +"Cancellation Product Count:" + expProdCount);

			// Properties prodAddonFile =
			// PreRequisites.loadPropertiesFiles("ProductAddOn");
			// String prodAddOns = "";

			for (int i = 0; i < expProdCount; i++) {

				LOGS.info(Thread.currentThread() +"Prod Name->" + prod[i]);

				if (productsCaptured.contains(prod[i])) {

					if (prod[i].equalsIgnoreCase("Social (a la carte)")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";
							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Social")) {
								LOGS.info(Thread.currentThread() +"Social product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);

								SFInspectorValidationTermDate(activeProdName);

								/*
								 * SalesforceTasks.SFInspectorPI("Term_End_Date"
								 * ); LOGS.
								 * info("SFInspectorPI method execution Started and Filtered with Term_End_Date"
								 * ); Thread.sleep(4000);
								 * 
								 * String termEndDate = driver .findElement(By
								 * .xpath(
								 * "//tr[contains(@title,'CPQ_Package_Term_End_Date__c')]/td[4]/div"
								 * )) .getText();
								 * LOGS.info(Thread.currentThread() +"Term End Date set by system: " +
								 * termEndDate);
								 * 
								 * dateComparisionInSF(termEndDate);
								 * 
								 * driver.navigate().back(); Thread.sleep(2000);
								 * driver.manage().timeouts().implicitlyWait(50,
								 * TimeUnit.SECONDS); Thread.sleep(2000);
								 */

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);
						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Social AddOn is missing for this account");
						}

					} else if (prod[i].equalsIgnoreCase("Search (a la carte)")) {
						// prodAddOns=prodAddonFile.getProperty("ListingsManagement");
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Managed Search")) {
								LOGS.info(Thread.currentThread() +"Search (a la carte) product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Managed Search AddOn is missing for this account");
						}

					} else if (prod[i].equalsIgnoreCase("Listings Management")) {
						// prodAddOns=prodAddonFile.getProperty("ListingsManagement");
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Listings Management")) {
								LOGS.info(Thread.currentThread() +"Listings Management product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Listings Management AddOn is missing for this account");
						}

							} else if (prod[i].equalsIgnoreCase("Reputation")) {
								// prodAddOns=prodAddonFile.getProperty("Reputation");
								LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
								int prodC = 0;

								for (int k = 1; k <= activeProdCount; k++) {
									String activeSubProdNamePath = "";
									String activeSubIDPath1 = "";

									if (activeProdCount > 5) {
										activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

									} else {
										activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
												+ k + "]/td[2]";
									}

									activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

									if (activeProdName.equalsIgnoreCase("Reputation")) {
										LOGS.info(Thread.currentThread() +"Reputation product available");
										prodC = prodC + 1;

										if (activeProdCount > 5) {
											activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
										} else {
											activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
													+ k + "]/th/a";
										}

										driver.findElement(By.xpath(activeSubIDPath1)).click();
										Thread.sleep(2000);
										driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
										Thread.sleep(2000);
										LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

										SFInspectorValidationTermDate(activeProdName);

										driver.navigate().back();
										Thread.sleep(2000);
										driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
										Thread.sleep(2000);
										LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

									} else
										LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

								}

								if (prodC == 0) {
									LOGS.info(Thread.currentThread() +"Reputation AddOn is missing for this account");
								}

							} else if (prod[i].equalsIgnoreCase("Reviews")) {
								// prodAddOns=prodAddonFile.getProperty("ListingsManagement");
								LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
								int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Reputation")) {
								LOGS.info(Thread.currentThread() +"Reputation product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Reputation AddOn is missing for this account");
						}

					} else if (prod[i].equalsIgnoreCase("Reviews")) {
						// prodAddOns=prodAddonFile.getProperty("ListingsManagement");
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Reviews")) {
								LOGS.info(Thread.currentThread() +"Reviews product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Reviews AddOn is missing for this account");
						}

					} else if (prod[i].equalsIgnoreCase("Display (a la carte)")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";
							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Display")) {
								LOGS.info(Thread.currentThread() +"Display product available");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC == 0) {
							LOGS.info(Thread.currentThread() +"Display AddOn is missing for this account");
						}

					} else if (prod[i].equalsIgnoreCase("Presence + Performance Sync")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if (activeProdName.equalsIgnoreCase("Site + Display")) {
								subProd = "Display";
							} else if (activeProdName.equalsIgnoreCase("Site + Social")) {
								subProd = "Social";
							} else if (activeProdName.equalsIgnoreCase("Site + Search")) {
								subProd = "Managed Search";
							} else
								subProd = "";

							if ((activeProdName.equalsIgnoreCase("Site + Display"))
									|| (activeProdName.equalsIgnoreCase("Site + Social"))
									|| (activeProdName.equalsIgnoreCase("Site + Search"))
									// ||
									// (activeProdName.equalsIgnoreCase("Display"))
									// ||
									// (activeProdName.equalsIgnoreCase("Social"))
									// ||
									// (activeProdName.equalsIgnoreCase("Search"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Standard"))
									// ||
									// (activeProdName.equalsIgnoreCase("Included
									// Domain w/ Website"))
									// || (activeProdName.equalsIgnoreCase("30
									// Sec. Photomotion Video"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))) {
								LOGS.info(Thread.currentThread() +"Presence + Performance Sync -> " + activeProdName + " - product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

							if (subProd.equalsIgnoreCase("Display") || subProd.equalsIgnoreCase("Managed Search")
									|| subProd.equalsIgnoreCase("Social")) {

								k = k + 1;

								activeSubProdNamePath = "";
								activeSubIDPath1 = "";

								if (activeProdCount > 5) {
									activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

								} else {
									activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/td[2]";
								}

								activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

								LOGS.info(Thread.currentThread() +"Presence + Performance Sync -> " + subProd + " - product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");
							}

						}

						if (prodC < 2) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Website (a la carte)")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Website (a la carte)"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Standard"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Pro"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Pro (Spread Billing)"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Standard (Spread Billing)"))
									// ||(activeProdName.equalsIgnoreCase("Included
									// Domain w/ Website"))
									// || (activeProdName.equalsIgnoreCase("30
									// Sec. Photomotion Video"))
									// ||
									// (activeProdName.equalsIgnoreCase("Appointment
									// Scheduling"))
									// || (activeProdName.equalsIgnoreCase("DIY
									// Shopping Cart- 10 Items"))
									|| (activeProdName.equalsIgnoreCase("Web Design Svc-12 payments"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))) {
								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Synchronized Marketing Solution")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Synchronized Marketing Solution"))
									|| (activeProdName.equalsIgnoreCase("Managed Search"))
									|| (activeProdName.equalsIgnoreCase("Display"))
									|| (activeProdName.equalsIgnoreCase("Social"))
									|| (activeProdName.equalsIgnoreCase("Online Foundation Solution"))
									|| (activeProdName.equalsIgnoreCase("Reputation"))
									|| (activeProdName.equalsIgnoreCase("Reviews"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))) {
								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Smart Synchronized Solution")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Smart Synchronized Solution"))
									|| (activeProdName.equalsIgnoreCase("Managed Search"))
									|| (activeProdName.equalsIgnoreCase("Display"))
									|| (activeProdName.equalsIgnoreCase("Social"))
									|| (activeProdName.equalsIgnoreCase("Smart Online Presence Solution"))
									|| (activeProdName.equalsIgnoreCase("Reputation"))
									|| (activeProdName.equalsIgnoreCase("Reviews"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))
									// ||
									// (activeProdName.equalsIgnoreCase("Smart
									// Site - Standard"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Pro"))
									// || (activeProdName.equalsIgnoreCase("Smart Site -
									// Pro (Spread Billing)"))
									// || (activeProdName.equalsIgnoreCase("Smart Site -
									// Standard (Spread Billing)"))
									// || (activeProdName.equalsIgnoreCase("Web Design
									// Svc-12 payments"))
									) {

								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Smart Online Presence Solution")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Smart Online Presence Solution"))
									|| (activeProdName.equalsIgnoreCase("Reputation"))
									|| (activeProdName.equalsIgnoreCase("Reviews"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))
									// ||
									// (activeProdName.equalsIgnoreCase("Smart
									// Site - Standard"))
									|| (activeProdName.equalsIgnoreCase("Smart Site - Pro"))
									// || (activeProdName.equalsIgnoreCase("Smart Site -
									// Pro (Spread Billing)"))
									// || (activeProdName.equalsIgnoreCase("Smart Site -
									// Standard (Spread Billing)"))
									// || (activeProdName.equalsIgnoreCase("Web Design
									// Svc-12 payments"))
									) {

								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Online Foundation Solution")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Online Foundation Solution"))
									|| (activeProdName.equalsIgnoreCase("Reputation"))
									|| (activeProdName.equalsIgnoreCase("Reviews"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))) {

								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					} else if (prod[i].equalsIgnoreCase("Enhanced Social Solution")) {
						LOGS.info(Thread.currentThread() +prod[i] + " needs to be cancelled");
						int prodC = 0;

						for (int k = 1; k <= activeProdCount; k++) {
							String activeSubProdNamePath = "";
							String activeSubIDPath1 = "";

							if (activeProdCount > 5) {
								activeSubProdNamePath = "//tr[@class='headerRow']//following::tr[" + k + "]/td[2]";

							} else {
								activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
										+ k + "]/td[2]";
							}

							activeProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();

							if ((activeProdName.equalsIgnoreCase("Enhanced Social Solution"))
									|| (activeProdName.equalsIgnoreCase("Social"))
									|| (activeProdName.equalsIgnoreCase("Display"))
									|| (activeProdName.equalsIgnoreCase("Online Foundation Solution"))
									|| (activeProdName.equalsIgnoreCase("Reputation"))
									|| (activeProdName.equalsIgnoreCase("Reviews"))
									|| (activeProdName.equalsIgnoreCase("Listings Management"))) {

								LOGS.info(Thread.currentThread() +activeProdName + " <- product available ");
								prodC = prodC + 1;

								if (activeProdCount > 5) {
									activeSubIDPath1 = "//tr[@class='headerRow']//following::tr[" + k + "]/th/a";
								} else {
									activeSubIDPath1 = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject customnotabBlock'][1]//tr[@class='headerRow']//following::tr["
											+ k + "]/th/a";
								}

								driver.findElement(By.xpath(activeSubIDPath1)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");

								SFInspectorValidationTermDate(activeProdName);

								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");

							} else
								LOGS.info(Thread.currentThread() +"Available product-->" + activeProdName);

						}

						if (prodC < 3) {
							LOGS.info(Thread.currentThread() +prod[i] + " AddOns are missing for the account");
						}

					}

				}

			}

		} catch (Exception e) {
			subScriptionStatus = "Fail";
		}
		return subScriptionStatus;

	}



	public void SFInspectorValidationTermDate(String productSelected) throws Exception {

		LOGS.info(Thread.currentThread() +"SFInspectorValidation is Started");

		try {

			SFInspectorPI("Term_End_Date");
			LOGS.info(Thread.currentThread() +"Filtered with Term_End_Date in SF inspector");
			Thread.sleep(2000);

			String termEndDate = driver
					.findElement(By.xpath("//tr[contains(@title,'CPQ_Package_Term_End_Date__c')]/td[4]/div")).getText();
			LOGS.info(Thread.currentThread() +"Term End Date set by system: " + termEndDate);

			String dateResult = dateComparisionInSF(termEndDate);

			if (dateResult.equalsIgnoreCase("Fail")) {
				ActRes = "Failed in Date Comparision";
				Status = "Fail";
			} else {
				ActRes = dateResult;
				Status = "Pass";
			}

			ImageName = "SFInspectorProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture the Term End Date for " + productSelected
					+ " - Verify and Update the proper date in Term End Date Field";

			ExportResults.exportTestResult("Term End Date Validation Using SFInspector for " + productSelected + ":,"
					+ ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			driver.navigate().back();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"Navigating back to Subcription Page");

			LOGS.info(Thread.currentThread() +"SFInspectorValidationTermDate completed ->" + productSelected);

		} catch (Exception e) {
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +","+e.getMessage());
		}
	}


	//Date Comparision 
	public String dateComparisionInSF(String termEndDate) throws Exception {

		LOGS.info(Thread.currentThread() +"Date Comparision In SF Started");
		ActRes = "Fail";
		try {
			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			LocalDateTime now = LocalDateTime.now();
			String[] Date = dtf.format(now).split(" ");
			LOGS.info(Thread.currentThread() +"Today's Date: " + Date[0]);

			if (termEndDate.compareTo(Date[0]) > 0) {
				LOGS.info(Thread.currentThread() +"End Term Date is greater than today's date");
				ActRes = "End Term Date is greater than today's date";
				/*
				 * driver.findElement(By.xpath("//button[text()='Edit']")).click
				 * (); Thread.sleep(2000);
				 * driver.manage().timeouts().implicitlyWait(50,
				 * TimeUnit.SECONDS); Thread.sleep(2000);
				 * LOGS.info(Thread.currentThread() +"clicked on edit btn in SF inspector");
				 * 
				 * driver.findElement(By.xpath(
				 * "//tr[contains(@title,'CPQ_Package_Term_End_Date__c')]/td[4]/textarea"
				 * )) .clear();
				 * LOGS.info(Thread.currentThread() +"Cleared the existing date in SF inspector");
				 * 
				 * driver.findElement(By.xpath(
				 * "//tr[contains(@title,'CPQ_Package_Term_End_Date__c')]/td[4]/textarea"
				 * )) .sendKeys(Date[0]);
				 * 
				 * Thread.sleep(2000);
				 * driver.findElement(By.xpath("//button[text()='Save']")).click
				 * (); Thread.sleep(2000);
				 * driver.manage().timeouts().implicitlyWait(50,
				 * TimeUnit.SECONDS); Thread.sleep(2000);
				 * LOGS.info(Thread.currentThread() +"Save clicked in SF inspector");
				 */

			} else if (termEndDate.compareTo(Date[0]) < 0) {
				LOGS.info(Thread.currentThread() +"End Term Date is less than today's date");
				ActRes = "End Term Date is less than today's date";
			} else if (termEndDate.compareTo(Date[0]) == 0) {
				LOGS.info(Thread.currentThread() +"End Term Date is equal to today's date");
				ActRes = "End Term Date is equal to today's date";
			}
		} catch (Exception e) {
			LOGS.info(Thread.currentThread() +","+e.getMessage());
			e.printStackTrace();
		}
		return ActRes;
	}


	//Capture the Billing Anniversary Day	
	public  void SFInspectorBillingAnniversaryDay() throws Exception {

		LOGS.info(Thread.currentThread() +"SFInspectorValidation is Started");

		try {

			SFInspectorPI("Billing_Anniversary_Day");
			LOGS.info(Thread.currentThread() +"Filtered with Billing_Anniversary_Day in SF inspector");
			Thread.sleep(5000);

			String billingAnnDay = driver
					.findElement(By.xpath("//tr[contains(@title,'Billing_Anniversary_Day__c')]/td[4]/div")).getText();
			LOGS.info(Thread.currentThread() +"Billing Anniversary Day set by system: " + billingAnnDay);

			billingAnnDayInt=Integer.parseInt(billingAnnDay);

			ImageName = "SFInspectorProd";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture the Billing Anniversary Day from SFInspector";
			ActRes = "Billing Anniversary Day for the Account is "+ billingAnnDay;
			Status="Pass";
			ExportResults.exportTestResult("Capture Billing Anniversary Day:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			driver.navigate().back();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);
			LOGS.info(Thread.currentThread() +"Navigating back to Contract Page");

		} catch (Exception e) {
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +","+e.getMessage());
			count=count+1;
		}
	}


	//Day3(Amend/Modify/upgrade)______________________________________________________________________________________________

	public  String Amend_Modify_Adding_an_product_to_CurrentCustomer(String SalesRepType) throws Exception {

		
			try{
				try{
					Properties OR = pr.loadPropertiesFiles("Order");
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}
					
				String New_or_Modifying_ProductName_1="";
				// to set path of excel (excel file path)
				SalesforceTasks
						.Xls_Reader(regardingfilesPath+"\\AmendProcess//Day3_PriceChange_Upgrade_Downgrade.xlsx");
				
				// to get row count (sheetName)
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
				LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
				String ExistingProduct_1=SalesforceTasks.getCellData("InputSheet", "Existing_Product",lineItemInt); // to get cell data ( Sheet Name, column Name, Rownumber)
				String processtoProceedwith_1=SalesforceTasks.getCellData("InputSheet","Process",lineItemInt);
				String changeInProduct_1=SalesforceTasks.getCellData("InputSheet","ChangeInProduct",lineItemInt);
				New_or_Modifying_ProductName_1=SalesforceTasks.getCellData("InputSheet","New_or_Modifying_ProductName",lineItemInt); 


				LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # " + changeInProduct_1 + " # "
						+ New_or_Modifying_ProductName_1);

				String Day3ProcessResult = Day3Process(businessID, ExistingProduct_1, processtoProceedwith_1,
						changeInProduct_1, New_or_Modifying_ProductName_1);

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "User should unable to add an product to CurrentCustomer";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "User should unable to add an product to CurrentCustomer";
				}
				ExpRes = "User should able to add an product to CurrentCustomer";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				String Summary = "Amend_AddinganProducttoExistingAccount";
				String Description = "for this Busniness Id: "+businessID+", We have added "+New_or_Modifying_ProductName_1+" this product to Current Customer";

			}
		} catch (Exception e) {
			ImageName = "Amend_AddinganProducttoExistingAccount";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			e.printStackTrace();
			Status = "Fail";
			ExpRes = "User should able to add an product to CurrentCustomer";
			e.printStackTrace();
			ActRes = "User should unable to add an product to CurrentCustomer";
			ExportResults
			.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			String Summary = "Amend: Adding an Product to Existing Account";
			String Description = "there is an issue with this Bussiness Id while adding an product to Current Customer";
			MoveOrCopyFile.copyFunction("C:\\Automation\\OutputFiles\\TestResult.xlsx",Resultsfolderpath+"\\TestResult.xlsx");
			//TestCaseNum=JiraClass.createTestCaseinJira(Summary,Description);
			count = count + 1;
		}
		return Status;

	}			
	public  String Amend_Modify_Downgrade_Display(String SalesRepType) throws Exception {


		//Fetching Data from Excel_____________________________________________________________________________________________________________________________________

		SalesforceTasks
		.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
		LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

		String flag=""; 

		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

			LOGS.info(Thread.currentThread() +"Searching for input data to downgrade Display (a la carte)->6 months Package Term to Display (a la carte)->12 Months Package Term" + lineItemInt);	
			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
			day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
			String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

			if (day3ProductName.trim().contains("Display (a la carte)")||acctStatus.trim().contains("Active")){

				String [] day3ProductNameSami=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name-"+day3ProductNameSami[0]+", Budget price:"+day3ProductNameSami[1]);
				int price= Integer.parseInt(day3ProductNameSami[1]);
				if (price>=249){

					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					flag="True";
					ActRes = "fetched the required data to downgrade Display (a la carte)->6 months Package Term to Display (a la carte)->12 Months Package Term: "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to downgrade Display (a la carte)->6 months Package Term to Display (a la carte)->12 Months Package Term";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);

					break;	
				}	
			}
			else{				
				flag="False";
				LOGS.info(Thread.currentThread() +"No data found");
			}
		}

		//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

		String [] day3ProductName_split=day3ProductName.split("->");
		LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
		LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

		String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
		if (TearmChange.equalsIgnoreCase("Fail")){
			LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
		}else{
			LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
		}

		//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
							
						try{
						if (flag.equalsIgnoreCase("True")){
							String path = regardingfilesPath+"\\Order.properties";
							Properties OR = pr.loadPropertiesFiles("Order");
							try{
							if (SalesRepType.equalsIgnoreCase("TSales")) {
								SalesRep = OR.getProperty("TSales");
								LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
								SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
							} else if ((SalesRepType.equalsIgnoreCase("Premise"))
									|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
								SalesRep = OR.getProperty("Premise");
								LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
								SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
							} else if (SalesRepType.equalsIgnoreCase("spe")) {
								SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
							}
							LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
						}
						catch(Exception e)
						{
							LOGS.info(Thread.currentThread() +"Some error in SF Login");
						}
							
					
					LOGS.info(Thread.currentThread() +businessID + " # " + "Display (a la carte)->6 months Package Term" + " # " + "Modify" + " # " + "Downgrade" + " # "
								+ "Display (a la carte)->12 Months Package Term");
				 
					 String Day3ProcessResult = Day3Process(businessID, "Display (a la carte)->6 months Package Term", "Modify",
								"Downgrade", "Display (a la carte)->12 Months Package Term");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

				} catch (IOException e) {
				e.printStackTrace();
				return Status;	
				} catch (Exception e) {
				e.printStackTrace();
				return Status;
				}
				return Status;
				}			


	public  String Amend_Modify_Downgrade_Search(String SalesRepType) {

		try{

			//Fetching Data from Excel_______________________________________________________________________________________________________________
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
				
				String flag=""; 
				
				for(int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					
					LOGS.info(Thread.currentThread() +"Searching for input data to downgrade Search (a la carte)->3 months Package Term to Search (a la carte)->6 Months Package Term" + lineItemInt);
					
					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
					day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
					String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
					
					if (day3ProductName.trim().contains("Search (a la carte)")||acctStatus.trim().contains("Active")){
						
						String [] day3ProductNameSami=day3ProductName.split("->");
						LOGS.info(Thread.currentThread() +"Product Name:"+day3ProductNameSami[0]+", Budget price:"+day3ProductNameSami[1]);
						int price= Integer.parseInt(day3ProductNameSami[1].trim());
						if (price<=2998){
						LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
						flag="True";
						ActRes = "fetched the required data to downgrade Search (a la carte)->3 months Package Term to Search (a la carte)->6 Months Package Term: "+businessID+"#"+day3ProductName+"#"+acctStatus;
						ExpRes = "User able to fetch the required data to downgrade Search (a la carte)->3 months Package Term to Search (a la carte)->6 Months Package Term";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						break;	
					}	
				}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
				}
			}
			//(Package Term and Amend Block) date change code_____________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			//LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start_____________________________________________________________________________________________________________________________________ 		
			if (flag.equalsIgnoreCase("True")){	
				try{

					Properties OR = pr.loadPropertiesFiles("Order");

					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e){
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}




				LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)->3 months Package Term" + " # " + "Modify" + " # " + "Downgrade" + " # "
						+ "Search (a la carte)->6 Months Package Term");

				String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)->3 months Package Term", "Modify",
						"Downgrade", "Search (a la carte)->6 Months Package Term");

						ImageName = "Day3ProcessResult";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
							Status = "Fail";
							LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
							ActRes = "Day 3 Process is failed";
							count = count + 1;
						} else {
							Status = "Pass";
							LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
							JiraStatus = "Passed";
							ActRes = "Day 3 Process is Passed";
						}
						ExpRes = "Day 3 Process should be verified & should be Pass ";
						ExportResults.exportTestResult(
								"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
					
				} catch (IOException e) {
					e.printStackTrace();
					return Status;	
				} catch (Exception e) {
					e.printStackTrace();
					return Status;
				}
			 return Status;
		}
	 
	 public  String Amend_Modify_Downgrade_Search_AlacartetoGarenteedClicks(String SalesRepType) throws Exception {
		 try{	
			 
//Fetching Data from Excel____________________________________________________________________________________________________________				
			 SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
			
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			String flag=""; 

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Search (a la carte)") && acctStatus.trim().contains("Active")){
					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					flag="True";
					ActRes = "fetched the required data to pricechange Search (ala carte): "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to pricechange Search (ala carte)";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					break;					
				}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No Data found");
				}
			}
			
			if (flag.equalsIgnoreCase("True")){	
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
				if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			/*String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}*/
				}
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
				if (count < 1) {
			try
			{	
				
				Properties OR = pr.loadPropertiesFiles("Order");
				
				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if ((SalesRepType.equalsIgnoreCase("Premise"))
						|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("spe")) {
					SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
				} else if ((SalesRepType.equalsIgnoreCase("OpsWizard"))) {
					SalesRep = OR.getProperty("OpsWizard");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				}
				LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
			}
			catch(Exception e)
			{
				LOGS.info(Thread.currentThread() +"Some error in SF Login");
			}
				
				LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)->Managed Search" + " # " + "Modify" + " # " + "Downgrade" + "#"
						+ "Search - Guaranteed Clicks->GuaranteedClicks_140");
				String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)->Managed Search", "Modify",
						"Downgrade", "Search - Guaranteed Clicks->GuaranteedClicks_140");

				ImageName = "Amend_Downgrade_Search_AlacartetoGarenteedClicks";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_Downgrade_Search_AlacartetoGarenteedClicks" + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
				}
			
				if (count < 1) {
			Thread.sleep(5000);
			
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(5000);
			 
			driver.navigate().refresh();
			
			LOGS.info(Thread.currentThread() +"1st refresh");
			Thread.sleep(10000);
			
			driver.navigate().refresh();
			LOGS.info(Thread.currentThread() +"2st refresh");
			 
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(3000);
			
			driver.navigate().refresh();
			LOGS.info(Thread.currentThread() +"3st refresh");
			 
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(5000);
			
			ExistingProduct_1="Search (a la carte)";
			New_or_Modifying_ProductName_1="Search - Guaranteed Clicks";
			
			
			LOGS.info(Thread.currentThread() +"***************************input to validations********************"+ExistingProduct_1+New_or_Modifying_ProductName_1);
			
			
		String Day3validations=Day3packagesvalidation(ExistingProduct_1,New_or_Modifying_ProductName_1);
		
		if (Day3validations.equalsIgnoreCase("Fail")) {
			Status = "Fail";
			LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
			ActRes = "Day3 Validations  is failed";
			count = count + 1;
		} else {
			Status = "Pass";
			LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
			JiraStatus = "Passed";
			ActRes = "Day3 validations is Passed";
		}
		ExpRes = "Day3 validations should be verified & should be Pass ";
		ExportResults.exportTestResult(
				"Amend_Downgrade_Search_AlacartetoGarenteedClicks:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
	
	}
		
	} catch (Exception e) {
		ImageName = "Amend_Downgrade_Search_AlacartetoGarenteedClicks";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		e.printStackTrace();
		Status = "Fail";
		ExpRes = "User should able to cancel ->  " + ExistingProduct_1 + ". and add -> "
				+ New_or_Modifying_ProductName_1;
		e.printStackTrace();
		ActRes = "User should unable to cancel ->  " + ExistingProduct_1 + ". and add -> "
				+ New_or_Modifying_ProductName_1;
		ExportResults
				.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

	}
	return Status;

}
	 public  String Amend_Modify_Downgrade_SmartPro_SmartStd (String SalesRepType) {
			
			try{
//Fetching Data from Excel______________________________________________________________________________________________________________________________________
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
			
				String flag=""; 
			
				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					
						LOGS.info(Thread.currentThread() +"Day 3 - Searching for input data to Downgrade Smart Site -Standard to  Smart Site pro -" + lineItemInt);
						
						businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
						day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
						String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
						
						LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
						
						if (day3ProductName.trim().contains("Smart Site") && acctStatus.trim().contains("Active")){
								flag="True";
								LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
									
								ActRes = "fetched the required data to downgrade "+day3ProductName.trim()+" to  Smart Site - Standard: "+businessID+"#"+day3ProductName+"#"+acctStatus;
								ExpRes = "User able to fetch the required data to Downgrade Smart Site - Pro to Smart Site - Standard";
								ExportResults.exportTestResult(
										"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);
									
								break;				
						}else{				
							flag="False";
							LOGS.info(Thread.currentThread() +"No Data found in input excel sheet for Downgrade Smart Site -Standard to  Smart Site pro");
						}
				}
				if (flag.equalsIgnoreCase("True")){			
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
                if ((SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {
				String [] day3ProductName_split=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
			
				/*String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")){
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				}else{
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                }
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
				
				try{
					
					String path = regardingfilesPath+"\\Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");
					SFInspectorPlugin="True";
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
						SalesRep = OR.getProperty("OpsWizard");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}
				
				
				New_websiteproduct="Website (a la carte)->Smart Site - Standard";
				
				LOGS.info(Thread.currentThread() +businessID + " # " + day3ProductName.trim() + " # " + "Modify" + " # " + "Upgrade" + " # "
						+ New_websiteproduct);
		 
				String Day3ProcessResult = Day3Process(businessID, day3ProductName.trim(), "Modify",
						"Downgrade", New_websiteproduct);

				ImageName = "Amend_Downgrade_SmartPro_SmartStd";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					Status = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_Downgrade_SmartPro_SmartStd:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
			
//Validations for website after day 3
				if (count < 1) {	
			driver.navigate().refresh();
			Thread.sleep(8000);
			LOGS.info(Thread.currentThread() +"2nd wait time");
			Thread.sleep(6000);
		
			String Day3validations=Day3ValidationsWebsite(day3ProductName);
			
			if (Day3validations.equalsIgnoreCase("Fail")) {
				Status = "Fail";
				LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
				ActRes = "Day3 Validations  is failed";
				count = count + 1;
			} else {
				Status = "Pass";
				LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
				JiraStatus = "Passed";
				ActRes = "Day3 validations is Passed";
			}
			ExpRes = "Day3 validations should be verified & should be Pass ";
			ExportResults.exportTestResult(
					"Amend_Downgrade_SmartPro_SmartStd validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				}
				}
				
		} catch (IOException e) {
			e.printStackTrace();
			return Status;	
		} catch (Exception e) {
			e.printStackTrace();
			return Status;
		}
		return Status;
	}
	 
	 public  String Amend_Modify_Downgrade_Social(String SalesRepType) {
			
			try{
				//Fetching Data from Excel______________________________________________________________________________________________________________________________________			
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
				
				String flag=""; 
				
				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					
					LOGS.info(Thread.currentThread() +"Searching for input data to downgrade Social (a la carte)->6 months Package Term to Social (a la carte)->12 Months Package Term" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Social (a la carte)")||acctStatus.trim().contains("Active")){

					String [] day3ProductNameSami=day3ProductName.split("->");
					LOGS.info(Thread.currentThread() +"Product Name-"+day3ProductNameSami[0]+", Budget price:"+day3ProductNameSami[1]);
					int price= Integer.parseInt(day3ProductNameSami[1]);
					if (price>=1499){
						LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
						flag="True";

						ActRes = "fetched the required data to downgrade Social (a la carte)->6 months Package Term to Social (a la carte)->12 Months Package Term: "+businessID+"#"+day3ProductName+"#"+acctStatus;
						ExpRes = "User able to fetch the required data to downgrade Social (a la carte)->6 months Package Term to Social (a la carte)->12 Months Package Term";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						break;
						}	
					}
						else{				
						flag="False";
						LOGS.info(Thread.currentThread() +"No data found");
						}
				}
				
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
			
				String [] day3ProductName_split=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
			
				String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")){
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				}else{
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}
				
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
					
				if (flag.equalsIgnoreCase("True")){	
				try{
					
					String path = regardingfilesPath+"\\Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");

					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
					}
					catch(Exception e)
					{
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}
					
						LOGS.info(Thread.currentThread() +businessID + " # " + "Social (a la carte)->6 months Package Term" + " # " + "Modify" + " # " + "Downgrade" + " # "
								+ "Social (a la carte)->6 Months Package Term");
				 
					 String Day3ProcessResult =Day3Process(businessID, "Social (a la carte)->6 months Package Term", "Modify",
								"Downgrade", "Social (a la carte)->12 Months Package Term");
			
						ImageName = "Day3ProcessResult";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
							Status = "Fail";
							LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
							ActRes = "Day 3 Process is failed";
							count = count + 1;
						} else {
							Status = "Pass";
							LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
							JiraStatus = "Passed";
							ActRes = "Day 3 Process is Passed";
						}
						ExpRes = "Day 3 Process should be verified & should be Pass ";
						ExportResults.exportTestResult(
								"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
			
			} catch (IOException e) {
				e.printStackTrace();
				return Status;	
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
		 return Status;
		} 
	 public  String Amend_PriceChange_Display_alacarte(String SalesRepType) {
			
			try{
//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________			
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
				
				String flag=""; 
				
				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					
					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Display (ala carte)" + lineItemInt);
					
					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
					String day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
					String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
					
					if (day3ProductName.trim().contains("Display (a la carte)")||acctStatus.trim().contains("Active")){

					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					flag="True";

					ActRes = "fetched the required data to pricechange Display (ala carte): "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to pricechange Display (ala carte)";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					break;

				}
				else{				
					flag="False";
				}
			}
			//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
			if (flag.equalsIgnoreCase("True")){			
				String path = regardingfilesPath+"\\Order.properties";
				Properties OR = pr.loadPropertiesFiles("Order");

				try{
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}


				LOGS.info(Thread.currentThread() +businessID + " # " + "Display (a la carte)" + " # " + "Modify" + " # " + "PriceChange" + " # "
						+ "NA");

				String Day3ProcessResult = Day3Process(businessID, "Display (a la carte)", "Modify",
						"PriceChange", "NA");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		} catch (IOException e) {
			e.printStackTrace();
			return Status;	
		} catch (Exception e) {
			e.printStackTrace();
			return Status;
		}
		return Status;
		}
	 
	 public  String Amend_PriceChange_Search_alacarte(String SalesRepType) {
			
			try{
//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________	
				
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			String flag=""; 

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Search (a la carte)")||acctStatus.trim().contains("Active")){
					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					flag="True";
					ActRes = "fetched the required data to pricechange Search (ala carte): "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to pricechange Search (ala carte)";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					break;					
				}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
				}
			}

			//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
			if (flag.equalsIgnoreCase("True")){
			
			String path = regardingfilesPath+"\\Order.properties";
			Properties OR = pr.loadPropertiesFiles("Order");
				try{
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}

				LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)" + " # " + "Modify" + " # " + "PriceChange" + " # "
						+ "NA");
				String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)", "Modify",
						"PriceChange", "NA");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

				} catch (IOException e) {
						e.printStackTrace();
						return Status;	
				} catch (Exception e) {
						e.printStackTrace();
						return Status;
				}
			return Status;
		}
	 public  String Amend_PriceChange_Search_Garenteedclick(String SalesRepType) {
			
			try{
				
//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________				
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
				
				String flag=""; 
				
				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					
					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);
					
					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
					day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
					String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
					
					if (day3ProductName.trim().contains("Search - Guaranteed Clicks")||acctStatus.trim().contains("Active")){
						LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
						flag="True";
						ActRes = "fetched the required data to pricechange Search - Guaranteed Clicks: "+businessID+"#"+day3ProductName+"#"+acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Search - Guaranteed Clicks";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
	
						break;					
					}
						else{				
						flag="False";
						LOGS.info(Thread.currentThread() +"No data found");
					}
				}
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
				
				String [] day3ProductName_split=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
			
				String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")){
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				}else{
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}
				
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
		
				try{
					String path = regardingfilesPath+"\\Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");
					
				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if ((SalesRepType.equalsIgnoreCase("Premise"))
						|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("spe")) {
					SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
				}
				LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
			}
			catch(Exception e)
			{
				LOGS.info(Thread.currentThread() +"Some error in SF Login");
			}
			if (flag.equalsIgnoreCase("True")){

				LOGS.info(Thread.currentThread() +businessID + " # " + "Search - Guaranteed Clicks->GuaranteedClicks_140" + " # " + "Modify" + " # " + "PriceChange" + "#"
						+ "Search - Guaranteed Clicks->GuaranteedClicks_185");
				String Day3ProcessResult = Day3Process(businessID, "Search - Guaranteed Clicks->GuaranteedClicks_140", "Modify",
						"PriceChange", "Search - Guaranteed Clicks->GuaranteedClicks_185");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

				} catch (IOException e) {
						e.printStackTrace();
						return Status;	
				} catch (Exception e) {
						e.printStackTrace();
						return Status;
				}
			return Status;
			}
	 
	 public  String Amend_PriceChange_Social_alacarte (String SalesRep) {
			
			try{
//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________				
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
		LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
		
		String flag=""; 
		
		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
			
			LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Social (ala carte)" + lineItemInt);
			
			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
			day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
			String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
			
			if (day3ProductName.trim().contains("Social (a la carte)")||acctStatus.trim().contains("Active")){
				LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
				flag="True";
				ActRes = "fetched the required data to pricechange Social (ala carte): "+businessID+"#"+day3ProductName+"#"+acctStatus;
				ExpRes = "User able to fetch the required data to pricechange Social (ala carte)";
				ExportResults.exportTestResult(
						"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					
				break;			
							
			}
				else{				
					flag="False";
				}

			}
			//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			

			String path = regardingfilesPath+"\\Order.properties";
			Properties OR = pr.loadPropertiesFiles("Order");

			try{
				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if ((SalesRepType.equalsIgnoreCase("Premise"))
						|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("spe")) {
					SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
				}
				LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
			}
			catch(Exception e)
			{
				LOGS.info(Thread.currentThread() +"Some error in SF Login");
			}


			if (flag.equalsIgnoreCase("True")){

				LOGS.info(Thread.currentThread() +businessID + " # " + "Social (a la carte)" + " # " + "Modify" + " # " + "PriceChange" + " # "
						+ "NA");
				String Day3ProcessResult = Day3Process(businessID, "Social (a la carte)", "Modify",
						"PriceChange", "NA");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}

		} catch (IOException e) {
			e.printStackTrace();
			return Status;	
		} catch (Exception e) {
			e.printStackTrace();
			return Status;
		}
		return Status;
	}
	 
	 public  String Amend_Modify_Upgrade_Display(String SalesRepType) {
			
			
			try{
//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
		LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));
		
		String flag=""; 
		
		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
			
			LOGS.info(Thread.currentThread() +"Searching for input data to Upgrade Display (a la carte)->12 months Package Term to Display (a la carte)->3 Months Package Term" + lineItemInt);
			
			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
			day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
			String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);
			
			if (day3ProductName.trim().contains("Display (a la carte)")||acctStatus.trim().contains("Active")){
				
				String [] day3ProductNameSami=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name-"+day3ProductNameSami[0]+", Budget price:"+day3ProductNameSami[1]);
				int price= Integer.parseInt(day3ProductNameSami[1]);
				if (price<=1499){
				LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
				flag="True";
				ActRes = "fetched the required data to Upgrade Display (a la carte)->12 months Package Term to Display (a la carte)->3 Months Package Term: "+businessID+"#"+day3ProductName+"#"+acctStatus;
				ExpRes = "User able to fetch the required data to Upgrade Display (a la carte)->12 months Package Term to Display (a la carte)->3 Months Package Term";
				ExportResults.exportTestResult(
						"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					
				break;
				}	
			}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
				}

			}
			//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			

			if (flag.equalsIgnoreCase("True")){	
				try{
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}

				LOGS.info(Thread.currentThread() +businessID + " # " + "Display (a la carte)->12 months Package Term" + " # " + "Modify" + " # " + "Upgrade" + " # "
						+ "Display (a la carte)->3 Months Package Term");

				String Day3ProcessResult = Day3Process(businessID, "Display (a la carte)->12 months Package Term", "Modify",
						"Upgrade", "Display (a la carte)->3 Months Package Term");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			//Validations to be add				

			Day3Validationsupgradesami(day3ProductName);
		} catch (IOException e) {
			e.printStackTrace();
			return Status;	
		} catch (Exception e) {
			e.printStackTrace();
			return Status;
		}
		return Status;
	}
	 
	public String Amend_Modify_Upgrade_Search(String SalesRepType) {

		try{

//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________				
				
				SalesforceTasks
				.Xls_Reader(regardingfilesPath+"\\CPQRR//InputSheetForDay2Day3.xlsx");
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			String flag=""; 

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				LOGS.info(Thread.currentThread() +"Searching for input data to upgrade Search (a la carte)->6 months Package Term to Search (a la carte)->3 Months Package Term" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Search (a la carte)")||acctStatus.trim().contains("Active")){

					String [] day3ProductNameSami=day3ProductName.split("->");
					LOGS.info(Thread.currentThread() +"Product Name-"+day3ProductNameSami[0]+", Budget price:"+day3ProductNameSami[1]);
					int price= Integer.parseInt(day3ProductNameSami[1]);
					if (price>=399&&price<=2998){
						LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
						flag="True";
						ActRes = "fetched the required data to upgrade Search (a la carte)->6 months Package Term to Search (a la carte)->3 Months Package Term: "+businessID+"#"+day3ProductName+"#"+acctStatus;
						ExpRes = "User able to fetch the required data to upgrade Search (a la carte)->6 months Package Term to Search (a la carte)->3 Months Package Term";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						break;	
					}	
				}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
				}
			}
			//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);

			String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
			if (TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
			}else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
			}

			//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
			if (flag.equalsIgnoreCase("True")){		
				try{
					String path = regardingfilesPath+"\\Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");

					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}
					LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
				}
				catch(Exception e)
				{
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}



				LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)->6 months Package Term" + " # " + "Modify" + " # " + "Upgrade" + " # "
						+ "Search (a la carte)->3 Months Package Term");

				String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)->6 months Package Term", "Modify",
						"Upgrade", "Search (a la carte)->3 Months Package Term");

				ImageName = "Day3ProcessResult";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
					ActRes = "Day 3 Process is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day 3 Process is Passed";
				}
				ExpRes = "Day 3 Process should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				//Validations to be add				

			Day3Validationsupgradesami(day3ProductName);

			}
		} catch (IOException e) {
			e.printStackTrace();
			return Status;	
		} catch (Exception e) {
			e.printStackTrace();
			return Status;
		}
		return Status;

	}

	public  String Amend_Modify_Upgrade_Search_GarenteedClickstoAlacarte(String SalesRep) throws Exception {
		try{	

			//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________				
			SalesforceTasks
			.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			String flag=""; 

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				LOGS.info(Thread.currentThread() +"Searching for input data to Upgrade_Search_GarenteedClickstoAlacarte" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Search - Guaranteed Clicks") && acctStatus.trim().contains("Active")){
					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					flag="True";
					ActRes = "fetched the required data to Upgrade_Search_GarenteedClickstoAlacarte: "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to Upgrade_Search_GarenteedClickstoAlacarte";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					break;					
				}
				else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
                    }
				}
				
				if (flag.equalsIgnoreCase("True")){
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
                    if ((SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {		
				String [] day3ProductName_split=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
			
				/*String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")){
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				}else{
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                    }
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
                	
            		if (count < 1) {
				 try
					{	
						SalesRepType=SalesRep;
						Properties OR = pr.loadPropertiesFiles("Order");
						
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}
						LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
					}
					catch(Exception e)
					{
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}
				
			
					
					LOGS.info(Thread.currentThread() +businessID + " # " + "Search - Guaranteed Clicks->GuaranteedClicks_140" + " # " + "Modify" + " # " + "Upgrade" + "#"
							+ "Search (a la carte)->Managed Search");
				 String Day3ProcessResult = Day3Process(businessID, "Search - Guaranteed Clicks->GuaranteedClicks_140", "Modify",
							"Upgrade", "Search (a la carte)->Managed Search");

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_Modify_Upgrade_Search_GarenteedClickstoAlacarte Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					
					Thread.sleep(5000);
					
            		}
            		
					if (count < 1) {			
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(5000);
					 
					driver.navigate().refresh();
					
					LOGS.info(Thread.currentThread() +"1st refresh");
					 
					
					Thread.sleep(10000);
					
					driver.navigate().refresh();
					LOGS.info(Thread.currentThread() +"2st refresh");
					
					 
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(3000);
					
					driver.navigate().refresh();
					LOGS.info(Thread.currentThread() +"3st refresh");
					 
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(5000);
					
					ExistingProduct_1="Search - Guaranteed Clicks";
					New_or_Modifying_ProductName_1="Search (a la carte)";
					
					
					LOGS.info(Thread.currentThread() +"***************************input to validations********************"+ExistingProduct_1+New_or_Modifying_ProductName_1);
					
					
				String Day3validations = Day3packagesvalidation(ExistingProduct_1,New_or_Modifying_ProductName_1);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Day3 Process - Amend-Upgrade/Downgrade Packages:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}
			
			}
				
			} catch (Exception e) {
				ImageName = "Day3 Process - Amend-Upgrade/Downgrade Packages:";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				e.printStackTrace();
				Status = "Fail";
				ExpRes = "User should able to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				e.printStackTrace();
				ActRes = "User should unable to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				ExportResults
						.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}
			return Status;
		}


	public  String Amend_Modify_Upgrade_SmartStd_SmartPro(String SalesRepType) {

		try{
			//Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________				
			SalesforceTasks
			.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			String flag=""; 

			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

				LOGS.info(Thread.currentThread() +"Searching for input data to upgrade Smart Site -Standard to  Smart Site pro -" + lineItemInt);

				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);		
				day3ProductName=SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget",lineItemInt);
				String acctStatus=SalesforceTasks.getCellData("InputSheet","Fulfillment",lineItemInt);

				if (day3ProductName.trim().contains("Smart Site - Standard")||acctStatus.trim().contains("Active")){
					flag="True";
					LOGS.info(Thread.currentThread() +businessID+"#"+day3ProductName+"#"+acctStatus);
					ActRes = "fetched the required data to upgrade Smart Site-Standard to  Smart Site-Pro: "+businessID+"#"+day3ProductName+"#"+acctStatus;
					ExpRes = "User able to fetch the required data to upgrade Smart Site-Standard to  Smart Site - Pro";
					ExportResults.exportTestResult(
							"Day3 Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);		
					break;				
				}else{				
					flag="False";
					LOGS.info(Thread.currentThread() +"No data found");
                    }
				}
				
		if (flag.equalsIgnoreCase("True")){	
//Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________ 	
           /* if ((SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise"))) {	
				
            	String [] day3ProductName_split=day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
			
				String TearmChange= AmendModify_Tearmchange(businessID,day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")){
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				}else{
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}
            }*/
//Day-3 code start____________________________________________________________________________________________________________________________________________________ 			
								
				try{
					
					SFInspectorPlugin="True";	
					Properties OR = pr.loadPropertiesFiles("Order");
					
				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if ((SalesRepType.equalsIgnoreCase("Premise"))
						|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("spe")) {
					SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
				}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
					SalesRep = OR.getProperty("OpsWizard");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				}
				LOGS.info(Thread.currentThread() +"Logged in as "+SalesRepType+" ,SF Login Sucessfull.");			
			}
			catch(Exception e)
			{
				LOGS.info(Thread.currentThread() +"Some error in SF Login");
			}
				
				New_websiteproduct="Website (a la carte)->Smart Site - Pro";
				
				LOGS.info(Thread.currentThread() +businessID + " # " + day3ProductName.trim() + " # " + "Modify" + " # " + "Upgrade" + " # "
									+ New_websiteproduct);
			 
				 String Day3ProcessResult = Day3Process(businessID, day3ProductName.trim(), "Modify",
							"Upgrade", New_websiteproduct);

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
									"Amend_Upgrade_SmartPro Status," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					
				
//Validations for website after day 3	
					if (count < 1) {	
		Thread.sleep(6000);
		driver.navigate().refresh();
		Thread.sleep(80000);
							String Day3validations=Day3ValidationsWebsite(day3ProductName);	
							
							
							if (Day3validations.equalsIgnoreCase("Fail")) {
								Status = "Fail";
								LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
								ActRes = "Day3 Validations  is failed";
								count = count + 1;
							} else {
								Status = "Pass";
								LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
								JiraStatus = "Passed";
								ActRes = "Day3 validations is Passed";
							}
							ExpRes = "Day3 validations should be verified & should be Pass ";
							ExportResults.exportTestResult(
									"Amend_Upgrade_SmartStd_SmartPro validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}
					}
			} catch (IOException e) {
				e.printStackTrace();
				return Status;	
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
		 return Status;
	 }
	 
 
//supporting_Methods_Day3____________________________________________________________________________________________________________________
	 public  String AmendModify_Tearmchange(String Business_ID,String ProductNameString){
			
			LOGS.info(Thread.currentThread() +"Executing Amend Term Change Method");
			
			if (ProductNameString.equalsIgnoreCase("iiiSearch - Guaranteed Clicks")) {
				LOGS.info(Thread.currentThread() +"Term End Date is not required for " + ProductNameString);
			} else {

			try {
				SFInspectorPlugin="True";
				Properties OR = pr.loadPropertiesFiles("Order");
				SalesRep = OR.getProperty("UserwithAmendBlockDatepermission");
				LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
				String SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);

				if (SFLoginResult.equalsIgnoreCase("Fail")) {
					count = count + 1;
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Failed in SF Login");
				} else
					LOGS.info(Thread.currentThread() +"SF Login is successfully done");

			} catch (Throwable e) {
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error in SF Login- " + e.getMessage());
				count = count + 1;
			}

			if (count == 0) {
				try {

					String TermsEndDateStatus = TermEndDateValidationDay3(businessID, ProductNameString);

					if (TermsEndDateStatus.equalsIgnoreCase("Pass")) {
						Description = "Term End Date Changed for the Account ID " + businessID + " and Product "
								+ ProductName;
						LOGS.info(Thread.currentThread() +Description);
					} else {
						Description = "Term End Date Unchanged for the Account ID->" + businessID + " for "
								+ ProductName;
						LOGS.info(Thread.currentThread() +Description);
					}

				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Error in Term End Date");
					Status = "Fail";
				}
			}
		}
		return 	Status;
	}

	public  String TermEndDateValidationDay3(String buisnessID1, String ExistingProduct_1) {

		LOGS.info(Thread.currentThread() +"Calling TermEndDateValidation method : Business ID ->" + buisnessID1 + " : Existing Product ->"
				+ ExistingProduct_1);
		
		String captureProdCountStr = "";
		String LivSubCount = "", captureSubScrptCountStr = "", productsCaptureHomePage = "";
		int ActiveProductsCount = 0, ActiveSubScrptCount = 0;

		try {

			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);

			driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(buisnessID1);
			driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);

			LOGS.info(Thread.currentThread() +"Clicked on Search Button");

			driver.findElement(By.xpath("//td[text()='" + buisnessID1 + "']//parent::tr//th/a")).click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicking on Account Link");

			ExpRes = "Account Should be Available";
			ActRes = "Account Found";
			Status = "Pass";
			ImageName = "ExistingAccount";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExportResults.exportTestResult(
					"Account Verification:" + "," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			// Contract Page
			if (count == 0) {

				try {
					SLocator("ContractsLink").click();
					LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
							SLocator("ContractNolink"));
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);

					ExpRes = "Capture Contract Number";
					ImageName = "ContractLink";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					// Capture Contract number
					contractNumber = SLocator("ContractNolink").getText();
					ActRes = "Contract Number:" + contractNumber;
					LOGS.info(Thread.currentThread() +ActRes);

					SLocator("ContractNolink").click();
					LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					Status = "Pass";
				} catch (Exception e) {
					e.printStackTrace();
					ActRes = "Error in Contracts";
					LOGS.info(Thread.currentThread() +ActRes);
					Status = "Fail";
					count = count + 1;
				}
				ExportResults.exportTestResult(
						"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
				String Billingdate = BillingdateValidation();
				
				if(Billingdate.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"issue with Billing Date Validation method");
					count=count+1;
				}else {
					LOGS.info(Thread.currentThread() +"Billing Date Validation method passed");
				}
			
			
			}

			if (count == 0) {

				try {
					LivSubCount = SLocator("LiveSubScriptionCount").getText();
					LivSubCount = LivSubCount.replace("[", "");
					LivSubCount = LivSubCount.replace("]", "");

					if (LivSubCount == "0") {
						Status = "Fail";
						ActRes = "Live Subscriptions does not have products";
						LOGS.info(Thread.currentThread() +"Live Subscription Products are not available");
						count = count + 1;
					} else {
						SLocator("LiveSubScriptionContract").click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Available Live Subscription Products-->" + LivSubCount);
						Status = "Pass";
						ActRes = "Live Subscriptions have products";
					}
					
					ImageName = "LiveSubscription";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Live Subscriptions should have products";
					ExportResults.exportTestResult(
							"Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					if (count == 0) {
						// Executes IF loop only the Live Subscription count is
						// more than 5

						if (LivSubCount.contains("+")) {

							captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
							LOGS.info(Thread.currentThread() +"Captured Text-" + captureSubScrptCountStr);
							captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
							captureSubScrptCountStr = captureSubScrptCountStr.replace(" �", "");

							SLocator("LiveSubScriptionGoToList").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Go To List will be performed in Live Subscription");
							ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
							LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products--->" + ActiveSubScrptCount);

							getSubscriptionID.clear();
							ProductName.clear();
							productsCaptureHomePage = "";
							String getSubProdName = null ;	

							LOGS.info(Thread.currentThread() +"Product Name in Live Subscription is :");
							for (int i = 1; i <= ActiveSubScrptCount; i++) {

								
							
								if (Day3_Downgrade.equalsIgnoreCase("True")){
									
									
									LOGS.info(Thread.currentThread() +"*********** + Day3_Downgrade");
									
								String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
								getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
									
									 LOGS.info(Thread.currentThread() +getSubProdName);
									
									
								String subnumberforContractpagepath="//tr[contains(@class,'dataRow')]["+i+"]/th[1]";
								String subnumberforContractpage = driver.findElement(By.xpath(subnumberforContractpagepath)).getText();
									
									driver.findElement(By.xpath(subnumberforContractpagepath)).click();
									Thread.sleep(2000);
									
									
									if (getSubProdName.equalsIgnoreCase("Search - Guaranteed Clicks")||getSubProdName.equalsIgnoreCase("Social")||getSubProdName.equalsIgnoreCase("Display")||getSubProdName.equalsIgnoreCase("Managed Search")){
											
										LOGS.info(Thread.currentThread() +"Changing 'Amend Block Date' for: "+getSubProdName+", Subscription ID:"+ subnumberforContractpage);
										
										//driver.findElement(By.xpath(subnumberforContractpagepath)).click();
										Thread.sleep(2000);
										driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
										Thread.sleep(2000);
										LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");
										AmendBlockDateworkAround();
										Thread.sleep(2000);
										driver.navigate().back();
										Thread.sleep(2000);
										driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
										Thread.sleep(2000);
									}
									
									SFInspectorValidationTermDate(getSubProdName);
									
									driver.navigate().back();

									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);
									
									LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");
								}
								
								else{
									
									
									String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
									getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
									LOGS.info(Thread.currentThread() +getSubProdName);
									
									
									if (getSubProdName.equalsIgnoreCase("Search - Guaranteed Clicks")||getSubProdName.equalsIgnoreCase("Social")||getSubProdName.equalsIgnoreCase("Display")||getSubProdName.equalsIgnoreCase("Managed Search")){
								
									String subnumberforContractpagepath="//tr[contains(@class,'dataRow')]["+i+"]/th[1]";
									String subnumberforContractpage = driver.findElement(By.xpath(subnumberforContractpagepath)).getText();
									
									LOGS.info(Thread.currentThread() +"Changing 'Amend Block Date' for: "+getSubProdName+", Subscription ID:"+ subnumberforContractpage);
									
									driver.findElement(By.xpath(subnumberforContractpagepath)).click();
									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);
									LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");
									AmendBlockDateworkAround();
									Thread.sleep(2000);
									driver.navigate().back();
									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);
								}
							}
								

								ProductName.add(getSubProdName);
								productsCaptureHomePage = getSubProdName + " : " + productsCaptureHomePage;
								
								
							}
								

								ProductName.add(getSubProdName);
								productsCaptureHomePage = getSubProdName + " : " + productsCaptureHomePage;
								
								
							
							
							LOGS.info(Thread.currentThread() +"**************"+ ProductName);
						
						} else {
							captureProdCountStr = LivSubCount;
							// LOGS.info(Thread.currentThread() +captureProdCountStr + " ->" +
							// LivSubCount
							// );
							ActiveSubScrptCount = Integer.parseInt(captureProdCountStr);
							LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products-->" + ActiveSubScrptCount);

							getSubscriptionID.clear();
							ProductName.clear();
							productsCaptureHomePage = "";

							LOGS.info(Thread.currentThread() +"Product Name in Live Subscription is :");
							for (int i = 1; i <= ActiveSubScrptCount; i++) {
								String getSubProdName ;
							
						
							if (Day3_Downgrade.equalsIgnoreCase("True")){
								
								
								LOGS.info(Thread.currentThread() +"*********** + Day3_Downgrade");
								
							String activeSubProdNamePath ="//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom51Block'][1]//tr[@class='headerRow']//following::tr["
									+ i + "]/td[2]";
							getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
								
								 LOGS.info(Thread.currentThread() +getSubProdName);
								
								
							String subnumberforContractpagepath="//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom51Block'][1]//tr[@class='headerRow']//following::tr["
										+ i + "]/th/a";
							String subnumberforContractpage = driver.findElement(By.xpath(subnumberforContractpagepath)).getText();
								
								driver.findElement(By.xpath(subnumberforContractpagepath)).click();
								Thread.sleep(2000);
								
								
								if (getSubProdName.equalsIgnoreCase("Search - Guaranteed Clicks")||getSubProdName.equalsIgnoreCase("Social")||getSubProdName.equalsIgnoreCase("Display")||getSubProdName.equalsIgnoreCase("Managed Search")){
										
									LOGS.info(Thread.currentThread() +"Changing 'Amend Block Date' for: "+getSubProdName+", Subscription ID:"+ subnumberforContractpage);
									
									//driver.findElement(By.xpath(subnumberforContractpagepath)).click();
									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);
									LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");
									AmendBlockDateworkAround();
									Thread.sleep(2000);
									driver.navigate().back();
									Thread.sleep(2000);
									driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
									Thread.sleep(2000);
								}
								
								SFInspectorValidationTermDate(getSubProdName);
								
								driver.navigate().back();

								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								
								LOGS.info(Thread.currentThread() +"Navigating back to Subcription Contract Page");
							}
							
							else{
								
								
								String activeSubProdNamePath ="//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom51Block'][1]//tr[@class='headerRow']//following::tr["
										+ i + "]/td[2]";
							getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
								
								 LOGS.info(Thread.currentThread() +getSubProdName);
								
								
								if (getSubProdName.equalsIgnoreCase("Search - Guaranteed Clicks")||getSubProdName.equalsIgnoreCase("Social")||getSubProdName.equalsIgnoreCase("Display")||getSubProdName.equalsIgnoreCase("Managed Search")){
							
								String subnumberforContractpagepath="//tr[contains(@class,'dataRow')]["+i+"]/th[1]";
								String subnumberforContractpage = driver.findElement(By.xpath(subnumberforContractpagepath)).getText();
								
								LOGS.info(Thread.currentThread() +"Changing 'Amend Block Date' for: "+getSubProdName+", Subscription ID:"+ subnumberforContractpage);
								
								driver.findElement(By.xpath(subnumberforContractpagepath)).click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Clicked on Subscription ID link");
								AmendBlockDateworkAround();
								Thread.sleep(2000);
								driver.navigate().back();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
							}
						}
							

							ProductName.add(getSubProdName);
							productsCaptureHomePage = getSubProdName + " : " + productsCaptureHomePage;
							}

						LOGS.info(Thread.currentThread() +"**************"+ ProductName);

						}
						
						ImageName = "SubscriptionAddOnSocialALaCarte";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Capture the Product Count - Active Products and Subscription ID for the Business ID- "
								+ businessID;
						prodCount = ProductName.size();
						LOGS.info(Thread.currentThread() +"Available Active Product: " + prodCount + " & Products are -"
								+ productsCaptureHomePage);

						ActRes = prodCount + " Live Product Available and Available Product ->"
								+ productsCaptureHomePage + ". Subscription Products -> " + subScriptionIDCapture;
						Status = "Pass";
						ExportResults.exportTestResult(
								"Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}

				} catch (Exception e) {
					e.printStackTrace();
					LOGS.info(Thread.currentThread() +"Live Subscription is Not updated at this time");
				}
			}

		

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Status = "Fail";
		}

		return "Pass";
	}
	
//Day3(Amend/Upgrade/downgrade/pricechange)_______________________________________________________________________________________
		//Day3 Sami upgrade validations
	public  String Day3Validationsupgradesami(String day3ProductName) throws Exception{


		try {
			LOGS.info(Thread.currentThread() +"Executing capture product details from Live Products");
			getLiveProductDetailsDayAfterDay3(day3ProductName);
		} catch (Throwable e) {
			e.printStackTrace();
			count = count + 1;
		}

		Thread.sleep(5000);
		Thread.sleep(3000);

		try {
			LOGS.info(Thread.currentThread() +"Executing capture product details from 'Product History'");
			productHistoryDetails_Day3(day3ProductName);
		} catch (Throwable e) {
			e.printStackTrace();
			count = count + 1;
		}



		if(day3ProductName.contains("Search (a la carte)")){

			LOGS.info(Thread.currentThread() +GoLiveDateforValidationSearch +":-:"+monthlyInvestment_LiveproductsSearch+":-:" +monthlyInvestment_productsHistoySearch);	
			monthlyInvestment_LiveproductsSearch=monthlyInvestment_LiveproductsSearch.replace("$", "");
			monthlyInvestment_LiveproductsSearch=monthlyInvestment_LiveproductsSearch.replace(".00","");
			monthlyInvestment_LiveproductsSearch=monthlyInvestment_LiveproductsSearch.replace(",", "");

			monthlyInvestment_productsHistoySearch=monthlyInvestment_productsHistoySearch.replace("$", "");
			monthlyInvestment_productsHistoySearch=monthlyInvestment_productsHistoySearch.replace(".00","");
			monthlyInvestment_productsHistoySearch=monthlyInvestment_productsHistoySearch.replace(",", "");

			LOGS.info(Thread.currentThread() +GoLiveDateforValidationSearch +":-:"+monthlyInvestment_LiveproductsSearch+":-:" +monthlyInvestment_productsHistoySearch);

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1] + BudgetToEnterDay3);

			if(monthlyInvestment_productsHistoySearch.equalsIgnoreCase(day3ProductName_split[1])&& monthlyInvestment_LiveproductsSearch.equalsIgnoreCase(BudgetToEnterDay3)){
				LOGS.info(Thread.currentThread() +"Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Search ");
				ImageName = "Search_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Search ";
				ActRes = "Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Search";
				ExportResults
				.exportTestResult("Validation on Search Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{
				LOGS.info(Thread.currentThread() +"Search Upgrade - Validation failed");
				ImageName = "Search_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Search";
				ActRes = "Search Upgrade - Validation failed";
				ExportResults
				.exportTestResult("Search_Upgrade_Validation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}

			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
			LocalDateTime now = LocalDateTime.now();
			String[] Date=dtf.format(now).split(" "); 
			LOGS.info(Thread.currentThread() +"Today's Date Local sytem"+Date[0]);


			if(GoLiveDateforValidationSearch.equalsIgnoreCase(Date[0])){

				LOGS.info(Thread.currentThread() +"Go live date is set to Today's date - for upgraded product in Live product");	
				ImageName = "Search_Upgrade_Golivedate_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Search product in Live product";
				ActRes = "Go live date is set to Today's date - for upgraded Search product in Live product";
				ExportResults
				.exportTestResult("Validation on Search upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{

				LOGS.info(Thread.currentThread() +"Go live date is not set to Today's date - for Upradeged product in Live product");	
				ImageName = "Search_Upgrade_Golivedate_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Search product in Live product";
				ActRes = "Go live date is not set to Today's date - for upgraded Search product in Live product";
				ExportResults
				.exportTestResult("Validation on Search Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}

		}else if (day3ProductName.contains("Display (a la carte)")){


			LOGS.info(Thread.currentThread() +GoLiveDateforValidationSearch +":-:"+monthlyInvestment_LiveproductsDisplay+":-:" +monthlyInvestment_productsHistoyDisplay);	
			monthlyInvestment_LiveproductsDisplay=monthlyInvestment_LiveproductsDisplay.replace("$", "");
			monthlyInvestment_LiveproductsDisplay=monthlyInvestment_LiveproductsDisplay.replace(".00","");
			monthlyInvestment_LiveproductsDisplay=monthlyInvestment_LiveproductsDisplay.replace(",", "");

			monthlyInvestment_productsHistoyDisplay=monthlyInvestment_productsHistoyDisplay.replace("$", "");
			monthlyInvestment_productsHistoyDisplay=monthlyInvestment_productsHistoyDisplay.replace(".00","");
			monthlyInvestment_productsHistoyDisplay=monthlyInvestment_productsHistoyDisplay.replace(",", "");

			LOGS.info(Thread.currentThread() +GoLiveDateforValidationDisplay +":-:"+monthlyInvestment_LiveproductsDisplay+":-:" +monthlyInvestment_productsHistoyDisplay);

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1] + BudgetToEnterDay3);

			if(monthlyInvestment_productsHistoyDisplay.equalsIgnoreCase(day3ProductName_split[1])&& monthlyInvestment_LiveproductsDisplay.equalsIgnoreCase(BudgetToEnterDay3)){
				LOGS.info(Thread.currentThread() +"Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Display ");
				ImageName = "Display_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Display ";
				ActRes = "Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Display";
				ExportResults
				.exportTestResult("Validation on Search Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{
				LOGS.info(Thread.currentThread() +"Display Upgrade - Validation failed");
				ImageName = "Display_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Display";
				ActRes = "Display Upgrade - Validation failed";
				ExportResults
				.exportTestResult("Display_Upgrade_Validation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}

			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
			LocalDateTime now = LocalDateTime.now();
			String[] Date=dtf.format(now).split(" "); 
			LOGS.info(Thread.currentThread() +"Today's Date Local sytem"+Date[0]);


			if(GoLiveDateforValidationDisplay.equalsIgnoreCase(Date[0])){
				LOGS.info(Thread.currentThread() +"Go live date is set to Today's date - for upgraded product in Live product");	
				ImageName = "Display_Upgrade_Golive date Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Display product in Live product";
				ActRes = "Go live date is set to Today's date - for upgraded Display product in Live product";
				ExportResults
				.exportTestResult("Validation on Display upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{

				LOGS.info(Thread.currentThread() +"Go live date is not set to Today's date - for Upradeged product in Live product");	
				ImageName = "Display_Upgrade_Golive date Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Display product in Live product";
				ActRes = "Go live date is not set to Today's date - for upgraded Display product in Live product";
				ExportResults
				.exportTestResult("Validation on Display Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}




		}else if(day3ProductName.contains("Social (a la carte)")){


			LOGS.info(Thread.currentThread() +GoLiveDateforValidationSocial +":-:"+monthlyInvestment_LiveproductsSearch+":-:" +monthlyInvestment_productsHistoySearch);	
			monthlyInvestment_LiveproductsSocial=monthlyInvestment_LiveproductsSocial.replace("$", "");
			monthlyInvestment_LiveproductsSocial=monthlyInvestment_LiveproductsSocial.replace(".00","");
			monthlyInvestment_LiveproductsSocial=monthlyInvestment_LiveproductsSocial.replace(",", "");

			monthlyInvestment_productsHistoySocial=monthlyInvestment_productsHistoySocial.replace("$", "");
			monthlyInvestment_productsHistoySocial=monthlyInvestment_productsHistoySocial.replace(".00","");
			monthlyInvestment_productsHistoySocial=monthlyInvestment_productsHistoySocial.replace(",", "");

			LOGS.info(Thread.currentThread() +GoLiveDateforValidationSocial +":-:"+monthlyInvestment_LiveproductsSocial+":-:" +monthlyInvestment_productsHistoySocial);

			String [] day3ProductName_split=day3ProductName.split("->");
			LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
			LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1] + BudgetToEnterDay3);

			if(monthlyInvestment_productsHistoySocial.equalsIgnoreCase(day3ProductName_split[1])&& monthlyInvestment_LiveproductsSocial.equalsIgnoreCase(BudgetToEnterDay3)){
				LOGS.info(Thread.currentThread() +"Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Social ");
				ImageName = "Display_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Social ";
				ActRes = "Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Social";
				ExportResults
				.exportTestResult("Validation on Social Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{
				LOGS.info(Thread.currentThread() +"Social Upgrade - Validation failed");
				ImageName = "Social_Upgrade_Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Social";
				ActRes = "Social Upgrade - Validation failed";
				ExportResults
				.exportTestResult("Social_Upgrade_Validation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}

			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
			LocalDateTime now = LocalDateTime.now();
			String[] Date=dtf.format(now).split(" "); 
			LOGS.info(Thread.currentThread() +"Today's Date Local sytem"+Date[0]);


			if(GoLiveDateforValidationSocial.equalsIgnoreCase(Date[0])){
				LOGS.info(Thread.currentThread() +"Go live date is set to Today's date - for upgraded product in Live product");	
				ImageName = "Social_Upgrade_Golive date Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Social product in Live product";
				ActRes = "Go live date is set to Today's date - for upgraded Social product in Live product";
				ExportResults
				.exportTestResult("Validation on Social upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	


			}else{

				LOGS.info(Thread.currentThread() +"Go live date is not set to Today's date - for Upradeged product in Live product");	
				ImageName = "Social_Upgrade_Golive date Validation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go live date should be set to Today's date - for upgraded Social product in Live product";
				ActRes = "Go live date is not set to Today's date - for upgraded Social product in Live product";
				ExportResults
				.exportTestResult("Validation on Social Upgrade:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}



		}

		return Status;
	}
	public  String getLiveProductDetailsDayAfterDay3(String day3ProductName) throws Exception {


		String captureProdCountStr = "";
		productsCaptureHomePage = "";

		try {
			LOGS.info(Thread.currentThread() +"Capturing Live Product Details");

			// Taking Live Product Count
			Thread.sleep(5000);
			Thread.sleep(3000);
			liveProductAllCount = SLocator("LiveProductCount").getText();
			liveProductAllCount = liveProductAllCount.replace("[", "");
			liveProductAllCount = liveProductAllCount.replace("]", "");
			LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + liveProductAllCount);

			SLocator("LiveProductLink").click();
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicked on Live Products link");

			String activeProdStatus="None";

			if (liveProductAllCount.contains("+")) {

				captureProdCountStr = SLocator("LiveProdCountStr").getText();
				LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

				SLocator("LiveProdCountStr").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

				captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
				captureProdCountStr = captureProdCountStr.replace(")", "");
				captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
				captureProdCountStr = captureProdCountStr.replace(" >>", "");

				ActiveProductsCount = Integer.parseInt(captureProdCountStr);

				for (int i = 1; i <= ActiveProductsCount; i++) {

					String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
					LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
					String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

					String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
					LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
					String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
					LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);					

					String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
					String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

					String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
					String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);



					if(day3ProductName.trim().contains("Website (a la carte)")){

						LOGS.info(Thread.currentThread() +day3ProductName);

						if(getActiveProducts.trim().equalsIgnoreCase("--Smart Site - Pro")||getActiveProducts.trim().equalsIgnoreCase("--Smart Site - Standard")){


							GoLiveDateforValidation=liveProductGoLiveDate;
							LOGS.info(Thread.currentThread() +"GoLiveDateforValidation : "+GoLiveDateforValidation);

						}

						if(getActiveProducts.trim().equalsIgnoreCase("----Listings Management")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							ListingsManagementAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Listings Management - Asset Number from live Product  after Day3: "+ListingsManagementAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}

						if(getActiveProducts.trim().equalsIgnoreCase("----Included Domain w/ Website")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Included Domain Website - Asset Number from live Product  after Day3: "+IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}

						if(getActiveProducts.trim().equalsIgnoreCase("----30 Sec. Photomotion Video")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							PhotomotionVideoAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"30 Photomotion Video - Asset Number from live Product  after Day3: "+ PhotomotionVideoAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}

					}else if(day3ProductName.trim().contains("Search (a la carte)")){

						if(getActiveProducts.trim().equalsIgnoreCase("--Managed Search")){


							GoLiveDateforValidationSearch=liveProductGoLiveDate; 
							String monthlyInvestment_LiveproductsSearchpath="//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSearchpath);
							monthlyInvestment_LiveproductsSearch =driver.findElement(By.xpath(monthlyInvestment_LiveproductsSearchpath)).getText();
							LOGS.info(Thread.currentThread() +"Product Monthly Investment is :" + liveProductsStatus);

						}

					}else if(day3ProductName.trim().contains("Display (a la carte)")){

						if(getActiveProducts.trim().equalsIgnoreCase("--Display")){


							GoLiveDateforValidationDisplay=liveProductGoLiveDate; 
							String monthlyInvestment_LiveproductsDisplaypath="//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsDisplaypath);
							monthlyInvestment_LiveproductsSearch =driver.findElement(By.xpath(monthlyInvestment_LiveproductsDisplaypath)).getText();
							LOGS.info(Thread.currentThread() +"Updraded Display Product Monthly Investment is :" + liveProductsStatus);

						}




					}else if(day3ProductName.trim().contains("Social (a la carte)")){

						if(getActiveProducts.trim().equalsIgnoreCase("--Social")){


							GoLiveDateforValidationSocial=liveProductGoLiveDate; 
							String monthlyInvestment_LiveproductsSocialpath="//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSocialpath);
							monthlyInvestment_LiveproductsSocial =driver.findElement(By.xpath(monthlyInvestment_LiveproductsSocialpath)).getText();
							LOGS.info(Thread.currentThread() +"Updraded Display Product Monthly Investment is :" + liveProductsStatus);

						}




					}

					if(liveProductsStatus.equalsIgnoreCase("Active") || liveProductsStatus.equalsIgnoreCase("Pending")){
						if (activeProdStatus.equalsIgnoreCase("None")){

							activeProdStatus=liveProductsStatus;
						}
					}

					if (!liveProductsStatus.equalsIgnoreCase("Active")){

						ExpRes="Capturing product status for the product-"+ getActiveProducts + " Before Day3";
						ActRes = "Product- "+getActiveProducts + " is in "+ liveProductsStatus+" Status";
						Status = "Pass";
						ExportResults
						.exportTestResult("Product Status Before Day3:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}

					String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
					ProductName.add(prodDetails);
					productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
				}
				driver.navigate().back();

			} 
			else
			{
				captureProdCountStr = liveProductAllCount;

				ActiveProductsCount = Integer.parseInt(captureProdCountStr);

				for (int i = 1; i <= ActiveProductsCount; i++) {

					String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/th/a";
					LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
					String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

					String subscriptionIDPath = "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
							+ i + "]/td[2]/a";
					LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
					String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
					LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

					String liveProductStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
					String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

					String liveProductGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
					String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);

					if(day3ProductName.trim().contains("Website (a la carte)")){

						LOGS.info(Thread.currentThread() +day3ProductName+"I am here");
						if(getActiveProducts.trim().equalsIgnoreCase("--Smart Site - Pro")||getActiveProducts.trim().equalsIgnoreCase("--Smart Site - Standard")){
							GoLiveDateforValidation=liveProductGoLiveDate;
						}								
						if(getActiveProducts.trim().equalsIgnoreCase("----Listings Management")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							ListingsManagementAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Listings Management - Asset Number from live Product  after Day3: "+ListingsManagementAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}
						if(getActiveProducts.trim().equalsIgnoreCase("----Included Domain w/ Website")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Included Domain Website - Asset Number from live Product  after Day3: "+IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}
						if(getActiveProducts.trim().equalsIgnoreCase("----30 Sec. Photomotion Video")){

							driver.findElement(By.xpath(subscriptionIDPath)).click();
							Thread.sleep(5000);

							PhotomotionVideoAssetNumberfromliveproductAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"30 Photomotion Video - Asset Number from live Product  after Day3: "+ PhotomotionVideoAssetNumberfromliveproductAfterDay3);

							driver.navigate().back();
							Thread.sleep(5000);
						}

					}else if(day3ProductName.trim().contains("Search (a la carte)")){

						if(getActiveProducts.trim().equalsIgnoreCase("--Managed Search")){


							GoLiveDateforValidationSearch=liveProductGoLiveDate; 
							LOGS.info(Thread.currentThread() +"Go Live Date for Upgraded search product is" + liveProductsStatus);

							String monthlyInvestment_LiveproductsSearchpath="//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//td[4]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSearchpath);
							monthlyInvestment_LiveproductsSearch =driver.findElement(By.xpath(monthlyInvestment_LiveproductsSearchpath)).getText();
							LOGS.info(Thread.currentThread() +"Monthly Investment of Upgraded search product is :" + liveProductsStatus);

						}

					}

					if(liveProductsStatus.equalsIgnoreCase("Active") || liveProductsStatus.equalsIgnoreCase("Pending")){
						if (activeProdStatus.equalsIgnoreCase("None")){
							activeProdStatus=liveProductsStatus;
						}
					}

					if (!liveProductsStatus.equalsIgnoreCase("Active")){
						ExpRes="Capturing product status for the product-"+getActiveProducts + " Before Day3";
						ActRes = "Product- "+getActiveProducts + " is in "+liveProductsStatus+" Status";
						Status = "Pass";
						ExportResults
						.exportTestResult("Product Status Before Day3:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
					}
					//String prodDetails = getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
					String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
					ProductName.add(prodDetails);
					productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
				}

			}

			LOGS.info(Thread.currentThread() +"Number of product available:" + captureProdCountStr);
			LOGS.info(Thread.currentThread() +"Products :-" + productsCaptureHomePage);

			ActRes="";
			if(activeProdStatus.equalsIgnoreCase("None")){
				LOGS.info(Thread.currentThread() +"Products are Not Active Nor Pending");
				ActRes="Products are Not Active Nor Pending to cancel";
				count=count+1;
			}

			ImageName = "LiveProductSection";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture the Product Count and Product Names available in Live Products Section for the Account-"
					+ businessID;
			prodCount = ProductName.size();
			LOGS.info(Thread.currentThread() +"Total Products in Live Product Section is " + prodCount);

			ActRes = prodCount + "Products Available in Live Product Section. Products are ->"
					+ productsCaptureHomePage;
			Status = "Pass";
			ExportResults
			.exportTestResult("Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

		} catch (Exception e) {
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
			Status = "Fail";
			ImageName = "GetLiveProduct";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture Product Name-Status-Go Live Date from Live Product Details";
			ActRes = "Error in Live Product Section method";
			ExportResults
			.exportTestResult("Live Product Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}
		return Status;


	}	
	public  void productHistoryDetails_Day3(String day3ProductName) throws Throwable {
		String captureProdCountStr = "";
		productsCaptureHomePage = "";

		try {
			LOGS.info(Thread.currentThread() +"Capturing Product History Details");
			
			// Taking Live Product Count
			Thread.sleep(5000);
			Thread.sleep(3000);
			String ProductHistoryAllCount = SLocator("ProductHistoryCount").getText();
			ProductHistoryAllCount = ProductHistoryAllCount.replace("[", "");
			ProductHistoryAllCount = ProductHistoryAllCount.replace("]", "");
			ProductHistoryAllCount = ProductHistoryAllCount.replace("+", "");
			LOGS.info(Thread.currentThread() +"Product Count taking from Product History in top row links- " + ProductHistoryAllCount);
						
			SLocator("ProductHistoryLink").click();
			Thread.sleep(3000);
			LOGS.info(Thread.currentThread() +"Clicked on Product History link");
			
			String activeProdStatus="None";
			
			if (ProductHistoryAllCount.contains("+")) {
				
				captureProdCountStr = SLocator("ProductHistoryCountStr").getText();
				LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

				SLocator("ProductHistoryCountStr").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

				captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
				captureProdCountStr = captureProdCountStr.replace(")", "");
				captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
				captureProdCountStr = captureProdCountStr.replace(" �", "");

				ActiveProductsCount = Integer.parseInt(captureProdCountStr);
				
				for (int i = 1; i <= ActiveProductsCount; i++) {
					
					String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
					LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
					String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

					String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
					LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
					String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
					LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);
					
					String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
					String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

					String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
					String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);
					
					
					
					String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
					ProductName.add(prodDetails);
					productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
				}
				driver.navigate().back();

			} 
			else
			{
				captureProdCountStr = ProductHistoryAllCount;
				
				ActiveProductsCount = Integer.parseInt(captureProdCountStr);

				for (int i = 1; i <= ActiveProductsCount; i++) {

					
					
					String ProductHistoryactiveProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/th/a";
					LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryactiveProdPath);
					String getActiveProducts = driver.findElement(By.xpath(ProductHistoryactiveProdPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

					String ProductHistorysubscriptionIDPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//following::tbody[1]//tr["
							+ (i + 1) + "]//td[2]/a";
					LOGS.info(Thread.currentThread() +"Path:" + ProductHistorysubscriptionIDPath);
					String getSubID = driver.findElement(By.xpath(ProductHistorysubscriptionIDPath)).getText();
					LOGS.info(Thread.currentThread() +"Product History SubScription ID is :" + getSubID);
					
					String ProductHistoryStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[3]";
					LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryStatusPath);
					String ProductHistoryStatus = driver.findElement(By.xpath(ProductHistoryStatusPath)).getText();
					LOGS.info(Thread.currentThread() +"Product Status is :" + ProductHistoryStatus);
				

					String ProductHistoryGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[5]";
					LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryGoLiveDatePath);
					String ProductHistoryGoLiveDate = driver.findElement(By.xpath(ProductHistoryGoLiveDatePath)).getText();
					LOGS.info(Thread.currentThread() +"Golive Date is :" + ProductHistoryGoLiveDate);
					
					String ProductHistoryEndDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
							+ (i + 1) + "]/td[6]";
					LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryEndDatePath);
					String ProductHistoryEndDate1 = driver.findElement(By.xpath(ProductHistoryEndDatePath)).getText();
					LOGS.info(Thread.currentThread() +"End Date is :" + ProductHistoryEndDate1);
					
					
					
					if(day3ProductName.trim().contains("Website (a la carte)")){
						
						
						LOGS.info(Thread.currentThread() +day3ProductName);
						
						String[] day3ProductName_split = day3ProductName.split("->");
						LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
						LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);
						
						if(day3ProductName_split[1].equalsIgnoreCase(getActiveProducts.replace("--",""))){
							
							
							oldwebsiteproductavaliableunderliveproducts="True"; 
							ProductHistoryEndDateforvalidation=ProductHistoryEndDate1;
							LOGS.info(Thread.currentThread() +"ProductHistoryEndDateforvalidation : "+ProductHistoryEndDateforvalidation);
							
						}
						
						
						
						if(getActiveProducts.trim().equalsIgnoreCase("----Listings Management")){
							
							driver.findElement(By.xpath(ProductHistorysubscriptionIDPath)).click();
							Thread.sleep(5000);
							
							ListingsManagementAssetNumberfromproductHistoryAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Listings Management - Asset Number from Product History after Day3: "+ListingsManagementAssetNumberfromproductHistoryAfterDay3);
							
							driver.navigate().back();
							Thread.sleep(5000);
						}
						
						if(getActiveProducts.trim().equalsIgnoreCase("----Included Domain w/ Website")){
							
							driver.findElement(By.xpath(ProductHistorysubscriptionIDPath)).click();
							Thread.sleep(5000);
							
							IncludedDomainWebsiteAssetNumberfromproductHistoryAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"Included Domain Website - Asset Number from Product History after Day3: "+IncludedDomainWebsiteAssetNumberfromproductHistoryAfterDay3);
							
							driver.navigate().back();
							Thread.sleep(5000);
						}
						
						if(getActiveProducts.trim().equalsIgnoreCase("----30 Sec. Photomotion Video")){
							
							driver.findElement(By.xpath(ProductHistorysubscriptionIDPath)).click();
							Thread.sleep(5000);
							
							PhotomotionVideoAssetNumberfromproductHistoryAfterDay3=driver.findElement(By.xpath("//img[@name='System Information']//following::div[1]//tbody//tr[2]/td[2]/div")).getText();
							LOGS.info(Thread.currentThread() +"30 Photomotion Video - Asset Number from Product History after Day3: "+ PhotomotionVideoAssetNumberfromproductHistoryAfterDay3);
							
							driver.navigate().back();
							Thread.sleep(5000);
						}
						
					}
					else if(day3ProductName.trim().contains("Search (a la carte)")){
						
						if(getActiveProducts.trim().equalsIgnoreCase("--Managed Search")||ProductHistoryStatus.equalsIgnoreCase("Expired")){
							
							
							
							enddateforvalidationSearchupsami=ProductHistoryEndDate1; 
							String monthlyInvestment_productsHistoySearchpath="//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//td[4]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_productsHistoySearchpath);
							monthlyInvestment_productsHistoySearch =driver.findElement(By.xpath(monthlyInvestment_productsHistoySearchpath)).getText();
							LOGS.info(Thread.currentThread() +"Monthly Investment of search product in product history :" + monthlyInvestment_productsHistoySearch);
							
						}
						
					}else if(day3ProductName.trim().contains("Display (a la carte)")){
						
						if(getActiveProducts.trim().equalsIgnoreCase("--Display")||ProductHistoryStatus.equalsIgnoreCase("Expired")){
							
							
							
							enddateforvalidationDisplayupsami=ProductHistoryEndDate1; 
							String monthlyInvestment_productsHistoyDisplaypath="//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//td[4]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_productsHistoyDisplaypath);
							monthlyInvestment_productsHistoyDisplay =driver.findElement(By.xpath(monthlyInvestment_productsHistoyDisplaypath)).getText();
							LOGS.info(Thread.currentThread() +"Monthly Investment of Display product in product history :" + monthlyInvestment_productsHistoySearch);
							
						}
						
					}else if(day3ProductName.trim().contains("Social (a la carte)")){
						
						if(getActiveProducts.trim().equalsIgnoreCase("--Social")||ProductHistoryStatus.equalsIgnoreCase("Expired")){
							
							
							
							enddateforvalidationSocialupsami=ProductHistoryEndDate1; 
							String monthlyInvestment_productsHistoySocialpath="//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//td[4]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_productsHistoySocialpath);
							monthlyInvestment_productsHistoySocial =driver.findElement(By.xpath(monthlyInvestment_productsHistoySocialpath)).getText();
							LOGS.info(Thread.currentThread() +"Monthly Investment of Social product in product history :" + monthlyInvestment_productsHistoySearch);
							
						}
						
					}else if(day3ProductName.trim().contains("Search - Guaranteed Clicks")){
						
						if(getActiveProducts.trim().equalsIgnoreCase("Search - Guaranteed Clicks")||ProductHistoryStatus.equalsIgnoreCase("Expired")){
							
							Day3guaranteedclickvalidationproductsHistory="True";
							endDateforValidationSearchclicks=ProductHistoryEndDate1; 
							String monthlyInvestment_LiveproductsSearchclickspath="//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//td[4]";
							LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSearchclickspath);
							monthlyInvestment_LiveproductsSearchclicks =driver.findElement(By.xpath(monthlyInvestment_LiveproductsSearchclickspath)).getText();
							LOGS.info(Thread.currentThread() +"Updraded Search - Guaranteed Clicks Product Monthly Investment is :" + monthlyInvestment_LiveproductsSearchclicks);
							
						}else {
							Day3guaranteedclickvalidationproductsHistory="False";
						}
					
					}
					String prodDetails = getSubID+"_"+getActiveProducts + "_" + ProductHistoryStatus + "_" + ProductHistoryGoLiveDate +"_"+ ProductHistoryEndDate1 +"->";
					ProductName.add(prodDetails);
					productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
				}

			}
			
			LOGS.info(Thread.currentThread() +"Number of product available:" + captureProdCountStr);
			LOGS.info(Thread.currentThread() +"Products :-" + productsCaptureHomePage);
			
			

		} catch (Exception e) {
			e.printStackTrace();
			LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
			Status = "Fail";
			ImageName = "GetLiveProduct";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			ExpRes = "Capture Product Name-Status-Go Live Date from Live Product Details";
			ActRes = "Error in Live Product Section method";
			ExportResults
					.exportTestResult("Live Product Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			count = count + 1;
		}
	
			
		}
		public  String Day3ValidationsWebsite(String day3ProductName) throws Exception{

			
			try {
				LOGS.info(Thread.currentThread() +"Executing capture product details from Live Products");
				
			
		getLiveProductDetailsDayAfterDay3(New_websiteproduct);
			} catch (Throwable e) {
				e.printStackTrace();
				count = count + 1;
			}
			
			Thread.sleep(5000);
			Thread.sleep(3000);
			
			try {
				LOGS.info(Thread.currentThread() +"Executing capture product details from 'Product History'");
				productHistoryDetails_Day3(day3ProductName);
			} catch (Throwable e) {
				e.printStackTrace();
				count = count + 1;
			}
			
			LOGS.info(Thread.currentThread() +newwebsiteproductavaliableunderliveproducts+"******************" +oldwebsiteproductavaliableunderliveproducts);
			LOGS.info(Thread.currentThread() +"**************************************************************************************************");	
			LOGS.info(Thread.currentThread() +"Asset ID of Addons for old Website(a la carte)Product :"+ListingsManagementAssetNumberfromproductHistoryAfterDay3 +":-:" + IncludedDomainWebsiteAssetNumberfromproductHistoryAfterDay3+":-:" +PhotomotionVideoAssetNumberfromproductHistoryAfterDay3);
			LOGS.info(Thread.currentThread() +"**************************************************************************************************");
			LOGS.info(Thread.currentThread() +"Asset ID of Addons for New Website(a la carte)Product :"+ListingsManagementAssetNumberfromliveproductAfterDay3 +":-:" + IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3+":-:" +PhotomotionVideoAssetNumberfromliveproductAfterDay3);
			LOGS.info(Thread.currentThread() +"**************************************************************************************************");
			LOGS.info(Thread.currentThread() +GoLiveDateforValidation+":-:"+ProductHistoryEndDateforvalidation);
			
			
			
			
			if(newwebsiteproductavaliableunderliveproducts.equalsIgnoreCase(oldwebsiteproductavaliableunderliveproducts)) {

				LOGS.info(Thread.currentThread() +"Existing product old website moved sucessfully to product history and Upgraded product new website  appred on Live products");
				ImageName = "ValidationonDay3packages";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ActRes = "Existing product old website moved sucessfully to product history and Upgraded product new website  appred on Live products";
				ExpRes = "Existing product moved sucessfully to product history and Upgraded product appred on Live products ";
				Status="Pass";
				ExportResults
						.exportTestResult("Validation on Day 3 website:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	

				
			}else{
				LOGS.info(Thread.currentThread() +"issue while validating old website moved sucessfully to product history and Upgraded product new website  appredon Live products");
				ImageName = "ValidationonDay3packages";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Existing product old website moved sucessfully to product history and Upgraded product new website  appred on Live products";
				ActRes = "issue while validating old website moved sucessfully to product history and Upgraded product new website  appredon Live products";
				Status="Fail";
				ExportResults
						.exportTestResult("Validation on Day 3 website:," + ExpRes + "," + ActRes + "," + Status+ "," + ImgName,pr.Resultsfolderpath);	
			}
			
			
			
			if (ListingsManagementAssetNumberfromliveproductAfterDay3.equalsIgnoreCase(ListingsManagementAssetNumberfromproductHistoryAfterDay3)||
					IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3.equalsIgnoreCase(IncludedDomainWebsiteAssetNumberfromproductHistoryAfterDay3)||
					PhotomotionVideoAssetNumberfromliveproductAfterDay3.equalsIgnoreCase(PhotomotionVideoAssetNumberfromproductHistoryAfterDay3))
			{					
				LOGS.info(Thread.currentThread() +"Asset Swing Matched between products");
				ImageName = "GetLiveProductAfterDay3";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Asset swing should be happen from old website (a la carte) to New website (a la carte) ";
				ActRes = "Validation on Asset swing - Passed: Asset ID of Addons for New Website(a la carte) Product :"+ListingsManagementAssetNumberfromliveproductAfterDay3 +":-:" + IncludedDomainWebsiteAssetNumberfromliveproductAfterDay3+":-:" +PhotomotionVideoAssetNumberfromliveproductAfterDay3;
				ExportResults
						.exportTestResult("Validation on Asset swing:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
			}else{
				
				LOGS.info(Thread.currentThread() +"Asset Swing unmatched between products");
				ImageName = "GetLiveProductAfterDay3";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Asset swing should be happen from old website (a la carte) to New website (a la carte)";
				ActRes = "Validation on Asset swing - Failed";
				ExportResults
						.exportTestResult("Validation on Asset swing:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			
			
			if (GoLiveDateforValidation.equalsIgnoreCase(ProductHistoryEndDateforvalidation))
			{
			  LOGS.info(Thread.currentThread() +"Go-live date of New Website(a la carte) product: "+ GoLiveDateforValidation+", Same as End Date of old Website(a la carte) product: "+ProductHistoryEndDateforvalidation);
			  ImageName = "Go-live date & End date Valiation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go-live date of New Website(a la carte) product should be same as End Date of old Website(a la carte) product";
				ActRes = "Go-live date of New Website(a la carte) product: "+ GoLiveDateforValidation+". Same as End Date of old Website(a la carte) product: "+ProductHistoryEndDateforvalidation;
				ExportResults
						.exportTestResult("Go-live date & End date Valiation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			  
			  
			  
			}else{
				
				LOGS.info(Thread.currentThread() +"Go-live date of New Website(a la carte) product is not same as End Date of old Website(a la carte) product: "+ProductHistoryEndDateforvalidation);
				ImageName = "Go-live date & End date Valiation";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExpRes = "Go-live date of New Website(a la carte) product is not be same as End Date of old Website(a la carte) product";
				ActRes = "Go-live date of New Website(a la carte) product: "+ GoLiveDateforValidation+". Same as End Date of old Website(a la carte) product: "+ProductHistoryEndDateforvalidation;
				ExportResults
							.exportTestResult("Go-live date & End date Valiation:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			}
			
			return Status;
			
		
		}						
					

public  String Amend_Upgrade_Packages(String SalesRepType) throws Exception {
			
			try {
				String flag;
				// to set path of excel (excel file path)
				SalesforceTasks.Xls_Reader(regardingfilesPath+"\\AmendProcess//Day3_PriceChange_Upgrade_Downgrade.xlsx");

				// to get row count (sheetName)
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");

				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
					LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					ExistingProduct_1 = SalesforceTasks.getCellData("InputSheet", "Existing_Product", lineItemInt); // to
																								// Rownumber)
					processtoProceedwith_1 = SalesforceTasks.getCellData("InputSheet", "Process", lineItemInt);
					changeInProduct_1 = SalesforceTasks.getCellData("InputSheet", "ChangeInProduct", lineItemInt);
					New_or_Modifying_ProductName_1 = SalesforceTasks.getCellData("InputSheet",
							"New_or_Modifying_ProductName", lineItemInt);

					LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
							+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);

					if (businessID.equalsIgnoreCase("") || ExistingProduct_1.equalsIgnoreCase("")
							|| processtoProceedwith_1.equalsIgnoreCase("") || changeInProduct_1.equalsIgnoreCase("")
							|| New_or_Modifying_ProductName_1.equalsIgnoreCase("")) {

						flag = "False";
						LOGS.info(Thread.currentThread() +"No data found");
					} else {
						LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
								+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);
						flag = "True";
						ActRes = "fetched the required data to Amend-Upgrade/Downgrade Packages: " + businessID + " # "
								+ ExistingProduct_1 + " # " + processtoProceedwith_1 + " # " + changeInProduct_1 + " # "
								+ New_or_Modifying_ProductName_1;
						ExpRes = "User able to fetch the required data to Amend-Upgrade/Downgrade Packages";
						ExportResults.exportTestResult("Day3 Process - Amend-Upgrade/Downgrade Packages:," + ExpRes + ","
								+ ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);
						// break;
					}

					// Logincode_____________________________________________________________________________________________________________________________________________________
					try {

						Properties OR = pr.loadPropertiesFiles("Order");
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}
						LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}

					LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
							+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);

					String Day3ProcessResult = Day3Process(businessID, ExistingProduct_1,
							processtoProceedwith_1, changeInProduct_1, New_or_Modifying_ProductName_1);

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "User should unable to cancel -> " + ExistingProduct_1 + ". and add -> "
								+ New_or_Modifying_ProductName_1;
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "User should able to cancel -> " + ExistingProduct_1 + ". and add -> "
								+ New_or_Modifying_ProductName_1;
					}
					ExpRes = "User should able  to cancel -> " + ExistingProduct_1 + ". and add -> "
							+ New_or_Modifying_ProductName_1;
					ExportResults.exportTestResult(
							"Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				}
			} catch (Exception e) {
				ImageName = "Amend_Upgrade_Packages";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				e.printStackTrace();
				Status = "Fail";
				ExpRes = "User should able to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				e.printStackTrace();
				ActRes = "User should unable to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				ExportResults
						.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}
			return Status;

		}

public  String Upgrade_Downgrade_Packages(String ExistingProduct_1, String new_or_Modifying_ProductName_1)
		throws Exception {
	try {
	LOGS.info(Thread.currentThread() +"Inside Upgrade_Downgrade_Packages: " + ExistingProduct_1 + "->" + new_or_Modifying_ProductName_1);

	Properties uDP = pr.loadPropertiesFiles("Plan");
	newProducttobeadded = uDP.getProperty(new_or_Modifying_ProductName_1);

	LOGS.info(Thread.currentThread() +"Inside Upgrade_Downgrade_Packages: Existing Product ->" + ExistingProduct_1 + ":-: New Product ->"
			+ newProducttobeadded);

	LOGS.info(Thread.currentThread() +"Product Name: " + ExistingProduct_1);
	wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));

	String existingProduct_split_QLE = " " + ExistingProduct_1;

	/*driver.findElement(By
			.xpath("//div[text()='" + existingProduct_split_QLE + "']//following::div[@index='7'][1]//div/div[1]"))
			.click();*/
	LOGS.info("going to click checkbox");
	
	Thread.sleep(5000);
	

	
	
	
	WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
	SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
	
	WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
	SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
	
	WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#groupLayout"));
	SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
	
	WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#Group_"));
	SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
	
	WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("#standardLines"));
	SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
	
	WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)"));
	SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
	Thread.sleep(1000);
	WebElement chkbox = last5.findElement(By.cssSelector("div[class='checkboxcontainer']"));
	Actions action = new Actions(driver);
	action.moveToElement(chkbox);
	action.click();
	action.build().perform();
	
	LOGS.info(Thread.currentThread() +"Selected" + existingProduct_split_QLE + "cancel Checkbox");
	
	
	
	//insufficient alert message handle as an rep while cancelandreplace start
	//adding new method for alert handling
		/*List<WebElement> AlertError = driver.findElements(By.xpath("//*[@id='error_0']"));
		LOGS.info(Thread.currentThread() +"List: " + AlertError);
		if (!AlertError.isEmpty()) {

			// if(!SLocator("ErrorAlert").getText().isEmpty()) {
			//wait2.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='error_0']/div/h2[1]")));
			AlertMsg = driver.findElement(By.xpath("//*[@id='error_0']/div/h2[1]")).getText();
			LOGS.info(Thread.currentThread() +"Alert Message: " + AlertMsg);
			ImageName1 = "AlertMsg";
			ImgName1 = ScreenshotPrinter.screenShot(ImageName1, driver,pr.Resultsfolderpath);
			LOGS.info(Thread.currentThread() +"Captured Alert message");
			driver.findElement(By.xpath("//*[@id='error_0']/button/i")).click();
			LOGS.info(Thread.currentThread() +"Clicked Cross on Alert dialog");
		}//code ended here
*/	
	if(SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise"))
	{
	WebElement shadowDomHostElement6 = driver.findElement(By.cssSelector("#sbPageContainer"));
	SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
	//Thread.sleep(1000);
	WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
	SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
	//Thread.sleep(1000);
	WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("sb-toast[type='error']"));
	SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
	Thread.sleep(1000);
	last8.findElement(By.cssSelector(".slds-button__icon.sf-icon-close")).click();
	}

	

	/*if (!(SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise"))) {
		
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		 WebElement CancelTypeArea=SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTDynamic2");
		 CancelTypeArea.click();
		// Thread.sleep(2000);
		 CancelTypeArea.click();
		 WebElement CancelTypeArea = last5.findElement(By.cssSelector("div:nth-child(7) > div:nth-child(1) > div:nth-child(12) > div:nth-child(1)"));
		// excutor.executeScript("arguments[0].scrollIntoView(True)", CancelTypeArea);
		 action.moveToElement(CancelTypeArea);
		 action.click();
		 Thread.sleep(2000);
		 action.click();
		 action.build().perform();
		 
		 LOGS.info("double clicked the cancel type");
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		 Select CancelTypeSelection=new Select(SLocatorDynamic("CancelLineItemCTDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCTSelectDynamic2"));
		 CancelTypeSelection.selectByVisibleText("Customer");
		 LOGS.info(Thread.currentThread() +"Selected cancel type"); 
		 //Thread.sleep(3000);
		 LOGS.info(Thread.currentThread() +"Waiting for 3 seconds");
		 Robot robot=new Robot();
		 robot.keyPress(KeyEvent.VK_ENTER);
		 robot.keyRelease(KeyEvent.VK_ENTER);
		 driver.findElement(By.xpath("//div[text()='Monthly Investment Total']")).click();
		 //Thread.sleep(4000);
		 LOGS.info(Thread.currentThread() +"Clicked on Monthly Investment Total Button!!"); 
		 
		 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		 WebElement CancelReasonArea=SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRDynamic2");
		 //Thread.sleep(2000);
		 CancelReasonArea.click();
		 //Thread.sleep(2000);
		 CancelReasonArea.click();
		 driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// Thread.sleep(3000); 
		 //Select CancelReasonSelection=new Select(SLocatorDynamic("CancelLineItemCRDynamic1_"+existingProduct_split_QLE+"_CancelLineItemCRSelectDynamic2"));
		 Select CancelReasonSelection=new Select(driver.findElement(By.xpath("//Select[@class='myselect style-scope sb-select --desktop style-scope sf-le-table-row']")));
		 CancelReasonSelection.selectByVisibleText("New Management");
		 LOGS.info(Thread.currentThread() +"Selected cancel Reason");
		
		 robot.keyPress(KeyEvent.VK_ENTER);
		 robot.keyRelease(KeyEvent.VK_ENTER);
		 //Thread.sleep(2000);
		 LOGS.info(Thread.currentThread() +"Pressed enter"); 
		// Thread.sleep(3000);
		SLocator("QuickSavebtn").click();
		LOGS.info(Thread.currentThread() +"Clicked on Quick Save button");
		
		ExpRes = "cancelreason caceltype should given before cancel product";
		ActRes = "cancelreason caceltype  selected before cancel product ";
		ImageName = "EditquoteForCancel";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		ExportResults.exportTestResult(
				"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
		//Thread.sleep(5000);

		ExpRes = "cancelreason caceltype should given before cancel product ";
		ActRes = "cancelreason caceltype  selected before cancel product ";
		ImageName = "EditquoteForCancel";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		ExportResults.exportTestResult(
				"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

	}*/
	if (!(SalesRepType.equalsIgnoreCase("TSales") || SalesRepType.equalsIgnoreCase("Premise"))) {
		
		//shadow dom code to select Cancel type------------
		
		//Thread.sleep(1000);
		SearchContext shadow0 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow1 = shadow0.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow2 = shadow1.findElement(By.cssSelector("#groupLayout")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow3 = shadow2.findElement(By.cssSelector("#Group_")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow4 = shadow3.findElement(By.cssSelector("#standardLines")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow5 = shadow4.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)")).getShadowRoot();
		Thread.sleep(5000);
		WebElement cancelType = shadow5.findElement(By.cssSelector(" div:nth-child(7) > div:nth-child(1) > div:nth-child(12)"));
		action.moveToElement(cancelType);
		action.doubleClick();
		Thread.sleep(5000);
		
		action.build().perform();
		
		
		action.doubleClick();
		Thread.sleep(5000);
		action.build().perform();
		
		
		LOGS.info("now the select box will be available");
		SearchContext shadow6 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow7 = shadow6.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow8 = shadow7.findElement(By.cssSelector("#groupLayout")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow9 = shadow8.findElement(By.cssSelector("#Group_")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow10 = shadow9.findElement(By.cssSelector("#standardLines")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow11 = shadow10.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow12 = shadow11.findElement(By.cssSelector("#picklist")).getShadowRoot();
		Thread.sleep(3000);
		shadow12.findElement(By.cssSelector("#myselect")).click();
		WebElement cType = shadow12.findElement(By.cssSelector("#myselect"));
		/*action.moveToElement(cType);
		action.click();
		action.build().perform();*/
		 
		Select cancel = new Select(cType);
		cancel.selectByVisibleText("Customer"); // Credit , Customer
		
		 Robot robot=new Robot();
		 robot.keyPress(KeyEvent.VK_ENTER);
		 robot.keyRelease(KeyEvent.VK_ENTER);
		 
		 
		 SearchContext shadow26 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
		
		 SearchContext shadow27 = shadow26.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
		 
		 SearchContext shadow28 = shadow27.findElement(By.cssSelector("sb-field-set-table[num-columns='3']")).getShadowRoot();
		 
		 SearchContext shadow29 = shadow28.findElement(By.cssSelector("#thirdColumn")).getShadowRoot();
		
		 SearchContext shadow30 = shadow29.findElement(By.cssSelector("sb-field-set-table-item[class='--desktop'][item='CPQ_Monthly_Investment_Total__c']")).getShadowRoot();
		 Thread.sleep(3000);
		 shadow30.findElement(By.cssSelector("#item")).click();
		 
		 LOGS.info("clicked on monthly total investment");
		
		LOGS.info("going to select the cancel reason");
		
		
		Thread.sleep(1000);
		SearchContext shadow13 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow14 = shadow13.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow15 = shadow14.findElement(By.cssSelector("#groupLayout")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow16 = shadow15.findElement(By.cssSelector("#Group_")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow17 = shadow16.findElement(By.cssSelector("#standardLines")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow18 = shadow17.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)")).getShadowRoot();
		Thread.sleep(5000);
		
		WebElement reason = shadow18.findElement(By.cssSelector(" div:nth-child(7) > div:nth-child(1) > div:nth-child(13)"));
		action.moveToElement(reason);
		action.doubleClick();
		Thread.sleep(5000);
		action.build().perform();
		
		action.doubleClick();
		Thread.sleep(5000);
		action.build().perform();
		
		LOGS.info("now cancel reason will be enabled");
		
		Thread.sleep(1000);
		SearchContext shadow19 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow20 = shadow19.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow21 = shadow20.findElement(By.cssSelector("#groupLayout")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow22 = shadow21.findElement(By.cssSelector("#Group_")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow23 = shadow22.findElement(By.cssSelector("#standardLines")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow24 = shadow23.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)")).getShadowRoot();
		//Thread.sleep(1000);
		SearchContext shadow25 = shadow24.findElement(By.cssSelector("#picklist")).getShadowRoot();
		Thread.sleep(3000);
		shadow25.findElement(By.cssSelector("#myselect")).click();
		WebElement cReason = shadow25.findElement(By.cssSelector("#myselect"));
		Select cancelReason = new Select(cReason);
		cancelReason.selectByVisibleText("New Management");
		
		robot.keyPress(KeyEvent.VK_ENTER);
		 robot.keyRelease(KeyEvent.VK_ENTER);
	}
	

		String[] Prods = new String[1];
		
		if(new_or_Modifying_ProductName_1.trim().contains("Foundation"))
		{
			Prods[0] = "Online Foundation Solutions";
		}else if(new_or_Modifying_ProductName_1.trim().contains("Smart Presence"))
		{
			Prods[0] = "Smart Presence Solutions";
		}else if(new_or_Modifying_ProductName_1.trim().contains("Smart Sync"))
		{
		  Prods[0] = "Smart Synchronized Solutions";
		}else if(new_or_Modifying_ProductName_1.trim().contains("Synchronized Marketing"))
		{
			Prods[0] = "Synchronized Marketing Solutions";
		}
		else if(new_or_Modifying_ProductName_1.trim().contains("Smart Site"))
		{
			Prods[0] = "Website (a la carte)";
		}
		else if(new_or_Modifying_ProductName_1.trim().contains("(a la carte)"))
		{
			Prods[0] = new_or_Modifying_ProductName_1;
		}
		else if(new_or_Modifying_ProductName_1.trim().contains("Search - Guaranteed Clicks")||new_or_Modifying_ProductName_1.trim().contains("Reviews")
				||new_or_Modifying_ProductName_1.trim().contains("Listings"))
		{
			Prods[0] = new_or_Modifying_ProductName_1;
		}
		
		
		
		/*ProductIdentifierName = new_or_Modifying_ProductName_1;
		String inputdata = PreRequisites.FetchProductplan(ProductIdentifierName);
		LOGS.info(Thread.currentThread() +"display all fetched product and plan name" + inputdata);
		String[] allProdsplans = inputdata.split("#");
		String allProds = allProdsplans[0];
		LOGS.info(Thread.currentThread() +"display all fetched product names" + allProds);
		String[] Prods = allProds.split(",");
		String allpalns = allProdsplans[1];
		LOGS.info(Thread.currentThread() +"display all fetched plan names" + allpalns);*/
		LOGS.info(Thread.currentThread() +"display all fetched product names: " + Prods);
		String[] Plans = new_or_Modifying_ProductName_1.split(",");
		LOGS.info(Thread.currentThread() +"display all fetched plan names: " + Plans);
		
		LOGS.info(Thread.currentThread() +"####################################################################");
		LOGS.info(Thread.currentThread() +"                                                                    ");
		LOGS.info(Thread.currentThread() +"Adding Product Started");
		LOGS.info(Thread.currentThread() +"                                                                    ");
		LOGS.info(Thread.currentThread() +"####################################################################");
		
		AddingProduct(Prods, Plans);
		
		LOGS.info(Thread.currentThread() +"####################################################################");
		LOGS.info(Thread.currentThread() +"                                                                    ");
		LOGS.info(Thread.currentThread() +"Adding Product Completed");
		LOGS.info(Thread.currentThread() +"                                                                    ");
		LOGS.info(Thread.currentThread() +"####################################################################");
		Status = "Pass";

	} catch (Exception e) {
		LOGS.error("Error while cancelling the replacing the product : Quote Page : "+ Thread.currentThread() +" : " +e);
		ExceptionMsg = "Error while cancelling the replacing the product : Quote Page";
		LOGS.info(Thread.currentThread() + "," +"Error while cancelling the replacing the product : Quote Page - " + e.getMessage());
		Status = "Fail";
		count = count + 1;
		
		return Status;
	}

	return Status;
}

public  String Amend_Packages(String BusinessId,String UiExistingProduct,String UiNewProduct,String UiAction, String Resultsfolderpath) throws Exception {
	
	try {
		String flag;
		Day3 = "true";
		changeInProduct_1 = "";
		//Select SalesRepType -> TSales OR Premise OR SPE  
		
		LRSelection = "WithoutLRBudgetEstimate";
		EntrBdgtSave = "";
		AssistantSelection= "WithoutAssistant";
		
		pr.Resultsfolderpath = Resultsfolderpath;
		LOGS.info("REsults Folder Path in Main: "+Resultsfolderpath);
		LOGS.info("REsults Folder Path in Main: "+pr.Resultsfolderpath);
		
		LOGS.info(Thread.currentThread() +"Action in Modify: "+changeInProduct_1);
		
		
        if(UiAction.trim().equalsIgnoreCase("CancelandReplace")) {
        	
        	if(UiNewProduct.trim().contains("Ast"))
            {
        		UiNewProduct = UiNewProduct.replace(" + Ast", "");
                   AssistantSelection = "WithAssistant";

                   EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package

                   LOGS.info(Thread.currentThread() +"User selected Product plan name: "+UiNewProduct);

                   LOGS.info(Thread.currentThread() +"Product should go with Assistant addon");

            }
        	
        	changeInProduct_1 = "Packages";
        	SalesRepType="TSales";//TSales, OpsWizard, Premise
        	
        	if(UiExistingProduct.trim().contains("LR"))
        	{
        	//LRSelection = "WithLRBudgetEstimate";
        	LOGS.info(Thread.currentThread() +"Since the existing product is having LR the product goes to the Amend without setting up Budget for LR.");
        	}
        	else if(!UiExistingProduct.trim().contains("LR") && UiNewProduct.trim().contains("LR"))
        	{
        		UiNewProduct = UiNewProduct.replace(" + LR", "");
        		LRSelection = "WithLRBudgetEstimate";
        		EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
        		LOGS.info(Thread.currentThread() +"User selected Product after removing the LR from the plan name: "+UiExistingProduct);
        		LOGS.info(Thread.currentThread() +"Product should go with LR Budget Estimate");
        		
        	}else
        		LOGS.info(Thread.currentThread() +"Request is to replace the Non-LR product to Non-LR product.");
        	
        	if (UiNewProduct.contains("Foundation")
    				||UiNewProduct.contains("Smart Sync")
    				||UiNewProduct.contains("Synchronized Marketing")
    				||UiNewProduct.contains("Smart Presence"))

    		{
    			EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
    		}
        	
        }
        else if(UiAction.trim().equalsIgnoreCase("AmendandAdd")) {
        	
        	if(UiNewProduct.trim().contains("Ast"))
            {
                   AssistantSelection = "WithAssistant";

                   EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package

                   LOGS.info(Thread.currentThread() +"User selected Product plan name: "+UiNewProduct);

                   LOGS.info(Thread.currentThread() +"Product should go with Assistant addon");

            }
        	
        	changeInProduct_1 = "AddProduct";
        	SalesRepType="TSales";
        	if(UiNewProduct.trim().contains("LR"))
        	{
        		LRSelection = "WithLRBudgetEstimate";
        		EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
        		LOGS.info(Thread.currentThread() +"User selected Product after removing the LR from the plan name: "+UiNewProduct);
        		LOGS.info(Thread.currentThread() +"Product should go with LR Budget Estimate");
        		
        	}
        	
        	if (UiNewProduct.contains("Foundation")
    				||UiNewProduct.contains("Smart Sync")
    				||UiNewProduct.contains("Synchronized Marketing")
    				||UiNewProduct.contains("Smart Presence"))

    		{
    			
    			EntrBdgtSave = "True";//To skip the clicking save after budget entered to the each line in package
    		}
    		
        	
        	UiNewProduct = UiNewProduct.replace(" + LR", "");
        	
        }
		
		
        
        
        businessID = BusinessId;
		ExistingProduct_1 = UiExistingProduct;
		processtoProceedwith_1 = "Modify";
		New_or_Modifying_ProductName_1 = UiNewProduct;
        
		LOGS.info(Thread.currentThread() +"Existing product Name: "+ExistingProduct_1);
		LOGS.info(Thread.currentThread() +"New product Name: "+New_or_Modifying_ProductName_1);
		
		// to set path of excel (excel file path)
		//SalesforceTasks.Xls_Reader(regardingfilesPath+ "//InputFiles//CPQRR//InpuSheetDay3Packages.xlsx");
		
		/*SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InpuSheetDay3Packages.xlsx");

		// to get row count (sheetName)
		int excelRowCount = SalesforceTasks.getRowCount("InputSheet");*/

		/*LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

		for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
			LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

			businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
			ExistingProduct_1 = SalesforceTasks.getCellData("InputSheet", "Existing_Product", lineItemInt); 
			processtoProceedwith_1 = SalesforceTasks.getCellData("InputSheet", "Process", lineItemInt);
			changeInProduct_1 = SalesforceTasks.getCellData("InputSheet", "ChangeInProduct", lineItemInt);
			New_or_Modifying_ProductName_1 = SalesforceTasks.getCellData("InputSheet",
					"New_or_Modifying_ProductName", lineItemInt);*/

			LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
					+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);

			if (businessID.equalsIgnoreCase("") || ExistingProduct_1.equalsIgnoreCase("")
					|| processtoProceedwith_1.equalsIgnoreCase("") || changeInProduct_1.equalsIgnoreCase("")
					|| New_or_Modifying_ProductName_1.equalsIgnoreCase("")) {

				flag = "False";
				LOGS.info(Thread.currentThread() +"No data found");
			} else {
				String New_or_Modifying_ProductName_12 = New_or_Modifying_ProductName_1.replace(",", "");
				LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
						+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_12);
				flag = "True";
				ActRes = "fetched the required data to Amend-Upgrade/Downgrade Packages: " + businessID + " # "
						+ ExistingProduct_1 + " # " + processtoProceedwith_1 + " # " + changeInProduct_1 + " # "
						+ New_or_Modifying_ProductName_12;
				ExpRes = "User able to fetch the required data to Amend-Upgrade/Downgrade Packages";
				ExportResults.exportTestResult("Day3 Process - Amend-Upgrade/Downgrade Packages:," + ExpRes + ","
						+ ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);
				// break;
			}
			
			LOGS.info(Thread.currentThread() +"Flag Value is: "+ flag);
	if(flag.equalsIgnoreCase("True")) {	
		LOGS.info(Thread.currentThread() +"Count Value is: "+ count);
		count=0;
//AmendBlockdate code________________________________________________________________________________________________________________________________________
			
			
       /* if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {	
			Properties uDP = PreRequisites.loadPropertiesFiles("Plan");
			ExistingProduct_1 = uDP.getProperty(ExistingProduct_1);
			
			
			
			 String TearmChange= AmendModify_Tearmchange(businessID,ExistingProduct_1);
			 if(TearmChange.equalsIgnoreCase("Fail")){
				LOGS.info(Thread.currentThread() +"Tearm Date Change - failed"); }
			else{
				LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass"); }
        }*/
// Logincode_____________________________________________________________________________________________________________________________________________________
    	
		if (count < 1) {		
        try {

				Properties OR = pr.loadPropertiesFiles("Order");
				if (SalesRepType.equalsIgnoreCase("TSales")) {
					SalesRep = OR.getProperty("TSales");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					//SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					SFLoginResult = SalesforceLogin("janelle.whinery@hibu.com.full01", "Summer01");
				} else if ((SalesRepType.equalsIgnoreCase("Premise"))
						|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
					SalesRep = OR.getProperty("Premise");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				} else if (SalesRepType.equalsIgnoreCase("spe")) {
					SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
				}  else if ((SalesRepType.equalsIgnoreCase("OpsWizard"))) {
					SalesRep = OR.getProperty("OpsWizard");
					LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
					SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
				}
				LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
			} catch (Exception e) {
				LOGS.info(Thread.currentThread() +"Some error in SF Login");
			}

			LOGS.info(Thread.currentThread() +businessID + " # " + ExistingProduct_1 + " # " + processtoProceedwith_1 + " # "
					+ changeInProduct_1 + " # " + New_or_Modifying_ProductName_1);

			
			String Day3ProcessResult = Day3Process(businessID, ExistingProduct_1,
					processtoProceedwith_1, changeInProduct_1, New_or_Modifying_ProductName_1);

			
			ImageName = "Day3 Process - Amend-Upgrade/Downgrade Packages";
			ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
			if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
				Status = "Fail";
				String New_or_Modifying_ProductName_12 = New_or_Modifying_ProductName_1.replace(",", "");
				LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
				ActRes = "User should unable to cancel -> " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_12;
				count = count + 1;
			} else {
				Status = "Pass";
				String New_or_Modifying_ProductName_12 = New_or_Modifying_ProductName_1.replace(",", "");
				LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
				JiraStatus = "Passed";
				ActRes = "User should able to cancel -> " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_12;
			}
			String New_or_Modifying_ProductName_12 = New_or_Modifying_ProductName_1.replace(",", "");
			ExpRes = "User should able  to cancel -> " + ExistingProduct_1 + ". and add -> "
					+ New_or_Modifying_ProductName_12;
			ExportResults.exportTestResult(
					"Day3 Process - Amend-Upgrade/Downgrade Packages:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
		}
		
		/*if (count < 1) {
			Thread.sleep(5000);
			
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(5000);
			 
			driver.navigate().refresh();
			
			LOGS.info(Thread.currentThread() +"1st refresh");
			 
			
			Thread.sleep(10000);
			
			driver.navigate().refresh();
			LOGS.info(Thread.currentThread() +"2st refresh");
			
			 
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(3000);
			
			driver.navigate().refresh();
			LOGS.info(Thread.currentThread() +"3st refresh");
			 
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			Thread.sleep(5000);
			
			LOGS.info(Thread.currentThread() +"***************************input to validations********************"+ExistingProduct_1 + newProducttobeadded);
			
			
		String Day3validations= SalesforceTasks.Day3packagesvalidation(ExistingProduct_1,newProducttobeadded);
		
		if (Day3validations.equalsIgnoreCase("Fail")) {
			Status = "Fail";
			LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
			ActRes = "Day3 Validations  is failed";
			count = count + 1;
		} else {
			Status = "Pass";
			LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
			JiraStatus = "Passed";
			ActRes = "Day3 validations is Passed";
		}
		ExpRes = "Day3 validations should be verified & should be Pass ";
		ExportResults.exportTestResult(
				"Day3 Process - Amend-Upgrade/Downgrade Packages:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
		}*/
	
	}
		
	} catch (Exception e) {
		LOGS.error("Error in Amend Packages. : "+ Thread.currentThread() +" : " +e);
		ExceptionMsg = "Error in Amend Packages.";
		LOGS.info(Thread.currentThread() + "," +"Error in Amend Packages - " + e.getMessage());
		
		ImageName = "Day3 Process - Amend-Upgrade/Downgrade Packages:";
		ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
		
		Status = "Fail";
		ExpRes = "User should able to cancel ->  " + ExistingProduct_1 + ". and add -> "
				+ New_or_Modifying_ProductName_1;
		
		ActRes = "User should unable to cancel ->  " + ExistingProduct_1 + ". and add -> "
				+ New_or_Modifying_ProductName_1;
		ExportResults
				.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
		return Status;
	}
	return Status;

}
		public  String priceChangeIncrease(String existingProduct_1, String new_or_Modifying_ProductName_1) {
			


			try {

				LOGS.info(Thread.currentThread() +"Inside Price Change Increase Method: " + existingProduct_1 + " " + new_or_Modifying_ProductName_1);
				String[] productCPQ1 = {};
				String[] NewproductCPQ1 = {};

				if (existingProduct_1.contains("Search - Guaranteed Clicks")) {

					productCPQ1 = existingProduct_1.split("->");
					LOGS.info(Thread.currentThread() +"ProductName" + productCPQ1[0]);
					LOGS.info(Thread.currentThread() +"PlanName" + productCPQ1[1]);

					NewproductCPQ1 = new_or_Modifying_ProductName_1.split("->");
					LOGS.info(Thread.currentThread() +"NewpriceProductName" + NewproductCPQ1[0]);
					LOGS.info(Thread.currentThread() +"NewpricePlanName" + NewproductCPQ1[1]);

					driver.findElement(By.xpath("//div[text()=' Search - Guaranteed Clicks']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
					LOGS.info(Thread.currentThread() +"Reconfigure Line");

					if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_185")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("60 Clicks - $185");
						LOGS.info(Thread.currentThread() +"Selected : 60 Clicks - $185");
					} else if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_270")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("90 Clicks - $270");
						LOGS.info(Thread.currentThread() +"Selected : 90 Clicks - $270");
					} else if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_140")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("45 Clicks - $140");
						LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
					}
				} else if (existingProduct_1.equalsIgnoreCase("Social (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Display (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Search (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Mobile Boost")) {

					driver.findElement(By.xpath("//div[text()=' " + existingProduct_1
							+ "']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
					LOGS.info(Thread.currentThread() +"Reconfigure Line");

					String[] insideQLEproduct = existingProduct_1.split(" ");

					if (insideQLEproduct[0].equalsIgnoreCase("Search")) {

						insideQLEproduct[0] = "Managed Search";
					}

					String userDefindBudgetavilableonQLE = SLocatorDynamic(
							"BudgetTADynamic1_" + insideQLEproduct[0] + "_BudgetTADynamic2").getText();
					LOGS.info(Thread.currentThread() +"Price present in Monthy Investment" + userDefindBudgetavilableonQLE);

					
					if(userDefinedBudget.equalsIgnoreCase("True")){
						Properties uDB = pr.loadPropertiesFiles("Budget");
						BudgetToEnter = Float.parseFloat(uDB.getProperty("userDefinedBudgetforDowngradeDay3"));		
					}
					else{
					
					String userDefindBudget1 = userDefindBudgetavilableonQLE.replace("$","");
					userDefindBudget1=userDefindBudget1.replace(".00","");
					userDefindBudget1=userDefindBudget1.replace(",", "");
					
					float convertMinBudg = Float.parseFloat(userDefindBudget1);
					 BudgetToEnter = convertMinBudg + 10;
					}
					
					LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
					
					BudgetToEnterDay3=String.valueOf(BudgetToEnter);
					Actions actions = new Actions(driver);
					actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + insideQLEproduct[0] + "_BudgetTADynamic2"));
					actions.click();
					LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
					actions.sendKeys(String.valueOf(BudgetToEnter));
					actions.build().perform();
					LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");

				}

				driver.findElement(
						By.xpath("//h1[text()='Configure Products']//following::paper-button/sb-i18n[text()='Save']"))
						.click();
				LOGS.info(Thread.currentThread() +"Clicked on Save Button");
				Thread.sleep(5000);

				SLocator("SaveBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");

				Status = "Pass";

			} catch (InterruptedException e) {
				// TODO Auto-generated catch block

				Status = "Fail";
				e.printStackTrace();
				LOGS.info(Thread.currentThread() +"Error in giving budgets to the products");
			}

			return Status;
			
		}
		
		public  String priceChangeDecrease(String existingProduct_1, String new_or_Modifying_ProductName_1) {

			try {

				LOGS.info(Thread.currentThread() +"Inside Price Change Decrease Method: " + existingProduct_1 + " " + new_or_Modifying_ProductName_1);
				String[] productCPQ1 = {};
				String[] NewproductCPQ1 = {};

				if (existingProduct_1.contains("Search - Guaranteed Clicks")) {

					productCPQ1 = existingProduct_1.split("->");
					LOGS.info(Thread.currentThread() +"ProductName" + productCPQ1[0]);
					LOGS.info(Thread.currentThread() +"PlanName" + productCPQ1[1]);

					NewproductCPQ1 = new_or_Modifying_ProductName_1.split("->");
					LOGS.info(Thread.currentThread() +"NewpriceProductName" + NewproductCPQ1[0]);
					LOGS.info(Thread.currentThread() +"NewpricePlanName" + NewproductCPQ1[1]);

					driver.findElement(By.xpath("//div[text()=' " + productCPQ1[0]
							+ "']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
					LOGS.info(Thread.currentThread() +"Reconfigure Line");

					if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_185")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("60 Clicks - $185");
						LOGS.info(Thread.currentThread() +"Selected : 60 Clicks - $185");
					} else if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_270")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("90 Clicks - $270");
						LOGS.info(Thread.currentThread() +"Selected : 90 Clicks - $270");
					} else if (NewproductCPQ1[1].trim().equalsIgnoreCase("GuaranteedClicks_140")) {
						Select guaranteedClicks = new Select(
								driver.findElement(By.xpath("//div[text()='Number of Clicks']//following::select")));
						guaranteedClicks.selectByVisibleText("45 Clicks - $140");
						LOGS.info(Thread.currentThread() +"Selected : 45 Clicks - $140");
					}
				} else if (existingProduct_1.equalsIgnoreCase("Social (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Display (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Search (a la carte)")
						|| existingProduct_1.equalsIgnoreCase("Mobile Boost")) {

					driver.findElement(By.xpath("//div[text()=' " + existingProduct_1
							+ "']//parent::div[1]/preceding-sibling::div[3]//button[@name='Reconfigure Line']")).click();
					LOGS.info(Thread.currentThread() +"Reconfigure Line");

					String[] insideQLEproduct = existingProduct_1.split(" ");

					if (insideQLEproduct[0].equalsIgnoreCase("Search")) {

						insideQLEproduct[0] = "Managed Search";
					}

					String userDefindBudgetavilableonQLE = SLocatorDynamic(
							"BudgetTADynamic1_" + insideQLEproduct[0] + "_BudgetTADynamic2").getText();
					LOGS.info(Thread.currentThread() +"Price present in Monthy Investment" + userDefindBudgetavilableonQLE);

					if(userDefinedBudget.equalsIgnoreCase("True")){
						Properties uDB = pr.loadPropertiesFiles("Budget");
						BudgetToEnter = Float.parseFloat(uDB.getProperty("userDefinedBudgetforDowngradeDay3"));		
					}
					else{
					
					String userDefindBudget1 = userDefindBudgetavilableonQLE.replace("$","");
					userDefindBudget1=userDefindBudget1.replace(".00","");
					userDefindBudget1=userDefindBudget1.replace(",", "");
					
					float convertMinBudg = Float.parseFloat(userDefindBudget1);
					 BudgetToEnter = convertMinBudg - 10;
					}

					LOGS.info(Thread.currentThread() +"Budget amt to be entered: " + BudgetToEnter);
					
					BudgetToEnterDay3=String.valueOf(BudgetToEnter);
					BudgetToEnterDay3=BudgetToEnterDay3.replace(".00","");
					BudgetToEnterDay3=BudgetToEnterDay3.replace(".0","");
					BudgetToEnterDay3=BudgetToEnterDay3.replace("$","");
					BudgetToEnterDay3=BudgetToEnterDay3.replace(",","");
					
					Actions actions = new Actions(driver);
					actions.moveToElement(SLocatorDynamic("BudgetTADynamic1_" + insideQLEproduct[0] + "_BudgetTADynamic2"));
					actions.click();
					LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
					actions.sendKeys(String.valueOf(BudgetToEnter));
					actions.build().perform();
					LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");

				}

				driver.findElement(
						By.xpath("//h1[text()='Configure Products']//following::paper-button/sb-i18n[text()='Save']"))
						.click();
				LOGS.info(Thread.currentThread() +"Clicked on Save Button");
				Thread.sleep(5000);

				SLocator("SaveBtn").click();
				LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");

				Status = "Pass";

			} catch (InterruptedException e) {
				// TODO Auto-generated catch block

				Status = "Fail";
				LOGS.info(Thread.currentThread() +"Error in giving budgets to the products");
				e.printStackTrace();
			}

			return Status;

		}
		
		
		
		public  String Amend_PriceChange_Decreased_Display_alacarte(String salesRepType) {


			try {
	// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Display (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					 day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Display (a la carte)") && acctStatus.trim().contains("Active")) {

						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";

						ActRes = "fetched the required data to pricechange Display (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Display (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;

					} else {
						flag = "False";
					}
				}
				
				if (flag.equalsIgnoreCase("True")) {
	// Package Term and Amend Block date code_______________________________________________________________________________________________________________________________________________
                    if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                    }
	// Day-3 code
	// start____________________________________________________________________________________________________________________________________________________
				
                    if (count < 1) {
					String path = regardingfilesPath + "//InputFiles//Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");

					try {
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							SalesRep = OR.getProperty("OpsWizard");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						}
						LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}

					LOGS.info(Thread.currentThread() +businessID + " # " + "Display (a la carte)" + " # " + "Modify" + " # " + "priceChangeDecrease" + " # "
							+ "NA");

					String Day3ProcessResult = Day3Process(businessID, "Display (a la carte)", "Modify",
							"priceChangeDecrease", "NA");

					ImageName = "Amend_PriceChange_Decreased_Display_alacarte";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Decreased_Display_alacarte:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
	// Validations for Day3 
                    }
                    if (count < 1) {
				Thread.sleep(3000);
							driver.navigate().refresh();
							Thread.sleep(6000);
							LOGS.info(Thread.currentThread() +"extra time Started");
							Thread.sleep(7000);

				String Day3validations=Day3ValidationsDowngradesami(day3ProductName);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Decreased_Display_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			
                    }
                    }


			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		
		}

		public  String Amend_PriceChange_Decrease_Search_alacarte(String salesRepType) {

			try {
				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________

				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Search (a la carte)") && acctStatus.trim().contains("Active")) {
						
						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";
						
						ActRes = "fetched the required data to pricechange Search (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Search (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;
					} else {
						flag = "False";
						LOGS.info(Thread.currentThread() +"No data found");
					}
				}
				if (flag.equalsIgnoreCase("True")) {
	// Package Term and Amend Block date
	// code_______________________________________________________________________________________________________________________________________________
                    if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                    }
	// Day-3 code
	// start____________________________________________________________________________________________________________________________________________________
				
                    if (count < 1) {
					String path = regardingfilesPath + "//InputFiles//Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");
					try {
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							SalesRep = OR.getProperty("OpsWizard");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						}
						
						else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}
						LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}

					LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)" + " # " + "Modify" + " # " + "priceChangeDecrease" + " # "
							+ "NA");
					String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)", "Modify",
							"priceChangeDecrease", "NA");

					ImageName = "Amend_PriceChange_Decrease_Search_alacarte";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Decrease_Search_alacarte:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				
                    }
	// Validations for Day3 
                    if (count < 1) {
							Thread.sleep(3000);
							driver.navigate().refresh();
							Thread.sleep(6000);
							LOGS.info(Thread.currentThread() +"extra time Started");
							Thread.sleep(7000);

				String Day3validations=Day3ValidationsDowngradesami(day3ProductName);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Decrease_Search_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
                    }
				
			}		

			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		}

		public  String Amend_PriceChange_Decrease_Social_alacarte(String salesRepType) {

			try {
				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Social (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Social (a la carte)") && acctStatus.trim().contains("Active")) {
						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";
						ActRes = "fetched the required data to pricechange Social (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Social (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;

					} else {
						flag = "False";
					}

				}
				
				if (flag.equalsIgnoreCase("True")) {
				// Package Term and Amend Block date
				// code_______________________________________________________________________________________________________________________________________________
                    if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                    }
				// Day-3 code
				// start____________________________________________________________________________________________________________________________________________________
                    if (count < 1) {
				String path = regardingfilesPath + "//InputFiles//Order.properties";
				Properties OR = pr.loadPropertiesFiles("Order");

				try {
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
						SalesRep = OR.getProperty("OpsWizard");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}
					LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}

			

					LOGS.info(Thread.currentThread() +businessID + " # " + "Social (a la carte)" + " # " + "Modify" + " # " + "priceChangeDecrease" + " # "
							+ "NA");
					String Day3ProcessResult = Day3Process(businessID, "Social (a la carte)", "Modify",
							"priceChangeDecrease", "NA");

					ImageName = "Amend_PriceChange_Decrease_Social_alacarte";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Decrease_Social_alacarte:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
                    }
				// Validations for Day3 
                    if (count < 1) {
				Thread.sleep(3000);
							driver.navigate().refresh();
							Thread.sleep(6000);
							LOGS.info(Thread.currentThread() +"extra time Started");
							Thread.sleep(7000);

				
				
String Day3validations=Day3ValidationsDowngradesami(day3ProductName);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Decrease_Social_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
			
                    }
				
				}	
				
			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		}
		
		public  String Amend_PriceChange_Increase_Display_alacarte(String SalesRepType) {

			try {
				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Display (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					 day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Display (a la carte)") && acctStatus.trim().contains("Active")) {

						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";

						ActRes = "fetched the required data to pricechange Display (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Display (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;

					} else {
						flag = "False";
					}
				}
				
		if (flag.equalsIgnoreCase("True")) {			
				// Package Term and Amend Block date
	// code_______________________________________________________________________________________________________________________________________________
            if ((SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard"))) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
            }
				// Day-3 code
	// start____________________________________________________________________________________________________________________________________________________
				
            if (count < 1) {
					String path = regardingfilesPath + "//InputFiles//Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");

					try {
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							SalesRep = OR.getProperty("OpsWizard");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						}
						LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}

					LOGS.info(Thread.currentThread() +businessID + " # " + "Display (a la carte)" + " # " + "Modify" + " # " + "priceChangeIncrease" + " # "
							+ "NA");

					String Day3ProcessResult = Day3Process(businessID, "Display (a la carte)", "Modify",
							"priceChangeIncrease", "NA");

					ImageName = "Amend_PriceChange_Display_alacarte";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Display_alacarte:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
            }
	// Validations for Day3 
            if (count < 1) {
				Thread.sleep(3000);
				driver.navigate().refresh();
				Thread.sleep(6000);
				LOGS.info(Thread.currentThread() +"extra time Started");
				Thread.sleep(7000);
				String Day3validations =Day3Validationsupgradesami(day3ProductName);
			if(	Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Display_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);		
				
            }
            }
			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		}

		public  String Amend_PriceChange_Increase_Search_alacarte(String SalesRepType) {

			try {
				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________

				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Search (a la carte)") && acctStatus.trim().contains("Active")) {
						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";
						ActRes = "fetched the required data to pricechange Search (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Search (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;
					} else {
						flag = "False";
						LOGS.info(Thread.currentThread() +"No data found");
					}
				}
				if (flag.equalsIgnoreCase("True")) {
				// Package Term and Amend Block date
				// code_______________________________________________________________________________________________________________________________________________
                    if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
                    }
				// Day-3 code
				// start____________________________________________________________________________________________________________________________________________________
			
                    if (count < 1) {
					String path = regardingfilesPath + "//InputFiles//Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");
					try {
						if (SalesRepType.equalsIgnoreCase("TSales")) {
							SalesRep = OR.getProperty("TSales");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if ((SalesRepType.equalsIgnoreCase("Premise"))
								|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
							SalesRep = OR.getProperty("Premise");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						} else if (SalesRepType.equalsIgnoreCase("spe")) {
							SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
						}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							SalesRep = OR.getProperty("OpsWizard");
							LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
							SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
						}
						LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
					} catch (Exception e) {
						LOGS.info(Thread.currentThread() +"Some error in SF Login");
					}

					LOGS.info(Thread.currentThread() +businessID + " # " + "Search (a la carte)" + " # " + "Modify" + " # " + "priceChangeIncrease" + " # "
							+ "NA");
					String Day3ProcessResult = Day3Process(businessID, "Search (a la carte)", "Modify",
							"priceChangeIncrease", "NA");

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Increase_Search_alacarte Status:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
                    }

	// Validations for Day3 
                    if (count < 1) {
							Thread.sleep(3000);
							driver.navigate().refresh();
							Thread.sleep(6000);
							LOGS.info(Thread.currentThread() +"extra time Started");
							Thread.sleep(7000);
							String Day3validations = Day3Validationsupgradesami(day3ProductName);
							if(	Day3validations.equalsIgnoreCase("Fail")) {
									Status = "Fail";
									LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
									ActRes = "Day3 Validations  is failed";
									count = count + 1;
								} else {
									Status = "Pass";
									LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
									JiraStatus = "Passed";
									ActRes = "Day3 validations is Passed";
								}
								ExpRes = "Day3 validations should be verified & should be Pass ";
								ExportResults.exportTestResult(
										"Amend_PriceChange_Increase_Search_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);		
											
                    }
                }		

			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		}

		public  String Amend_PriceChange_Increase_Search_Garenteedclick(String SalesRepType) throws Exception {

			try {

				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Search (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Search - Guaranteed Clicks")
							&& acctStatus.trim().contains("Active")) {
						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";
						ActRes = "fetched the required data to pricechange Search - Guaranteed Clicks: " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Search - Guaranteed Clicks";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;
					} else {
						flag = "False";
						LOGS.info(Thread.currentThread() +"No data found");
					}
				}
				
				if (flag.equalsIgnoreCase("True")) {
				// Package Term and Amend Block date
				// code_______________________________________________________________________________________________________________________________________________

                if ((SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard"))) {
				  String [] day3ProductName_split=day3ProductName.split("->");
				  LOGS.info(Thread.currentThread() +"Product Name: "+day3ProductName_split[0]);
				  LOGS.info(Thread.currentThread() +"Plan Name: "+day3ProductName_split[1]);
				  
				 /* String TearmChange = AmendModify_Tearmchange(businessID,day3ProductName_split[0]); 
				  if
				  (TearmChange.equalsIgnoreCase("Fail")){
					  
				  LOGS.info(Thread.currentThread() +"Tearm Date Change - failed"); 
				  }
				  else{
				  LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass"); 
				  }*/
                }

				// Day-3 code
				// start____________________________________________________________________________________________________________________________________________________
           if (count < 1) {
				try {
					String path = regardingfilesPath + "//InputFiles//Order.properties";
					Properties OR = pr.loadPropertiesFiles("Order");

					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise")) 
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
						SalesRep = OR.getProperty("OpsWizard");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}
					LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}
			

					LOGS.info(Thread.currentThread() +businessID + " # " + "Search - Guaranteed Clicks->GuaranteedClicks_140" + " # " + "Modify"
							+ " # " + "priceChangeIncrease" + "#" + "Search - Guaranteed Clicks->GuaranteedClicks_270");
					String Day3ProcessResult = Day3Process(businessID,
							"Search - Guaranteed Clicks->GuaranteedClicks_140", "Modify", "priceChangeIncrease",
							"Search - Guaranteed Clicks->GuaranteedClicks_270");

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Increase_Search_Garenteedclick Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
           }
           if (count < 1) {
					Thread.sleep(5000);
					
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(5000);
					 
					driver.navigate().refresh();
					
					LOGS.info(Thread.currentThread() +"1st refresh");
					 
					
					Thread.sleep(10000);
					
					driver.navigate().refresh();
					LOGS.info(Thread.currentThread() +"2st refresh");
					
					 
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(3000);
					
					driver.navigate().refresh();
					LOGS.info(Thread.currentThread() +"3st refresh");
					 
					driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
					driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
					Thread.sleep(5000);
					
					
					
				String Day3validations= Day3Validationsupgradesami(day3ProductName);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Increase_Search_Garenteedclick:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
           }
			
			}
				
			} catch (Exception e) {
				ImageName = "Day3 Process - Amend-Upgrade/Downgrade Packages:";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				e.printStackTrace();
				Status = "Fail";
				ExpRes = "User should able to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				e.printStackTrace();
				ActRes = "User should unable to cancel ->  " + ExistingProduct_1 + ". and add -> "
						+ New_or_Modifying_ProductName_1;
				ExportResults
						.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

			}
			return Status;

		}

		public  String Amend_PriceChange_Increase_Social_alacarte(String SalesRep) {

			try {
				// Fetching_Data_from_Excel______________________________________________________________________________________________________________________________________
				/*SalesforceTasks
						.Xls_Reader(regardingfilesPath + "//InputFiles//CPQRR//InputSheetForDay2Day3.xlsx");*/
				
				SalesforceTasks.Xls_Reader(regardingfilesPath+"//CPQRR//InputSheetForDay2Day3.xlsx");
				
				int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
				LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

				String flag = "";

				for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {

					LOGS.info(Thread.currentThread() +"Searching for input data to pricechange Social (ala carte)" + lineItemInt);

					businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
					day3ProductName = SalesforceTasks.getCellData("InputSheet", "Day3InputPlanBudget", lineItemInt);
					String acctStatus = SalesforceTasks.getCellData("InputSheet", "Fulfillment", lineItemInt);

					if (day3ProductName.trim().contains("Social (a la carte)")  &&acctStatus.trim().contains("Active")) {
						LOGS.info(Thread.currentThread() +businessID + "#" + day3ProductName + "#" + acctStatus);
						flag = "True";
						ActRes = "fetched the required data to pricechange Social (ala carte): " + businessID + "#"
								+ day3ProductName + "#" + acctStatus;
						ExpRes = "User able to fetch the required data to pricechange Social (ala carte)";
						ExportResults.exportTestResult(
								"Day3 Process:," + ExpRes + "," + ActRes + "," + "Pass" + "," + "No Image",pr.Resultsfolderpath);

						break;

					} else {
						flag = "False";
						LOGS.info(Thread.currentThread() +"No data found");
					}

				}
				
				if (flag.equalsIgnoreCase("True")) {
				// Package Term and Amend Block date
				// code_______________________________________________________________________________________________________________________________________________
                    if (SalesRepType.equalsIgnoreCase("TSales")||SalesRepType.equalsIgnoreCase("Premise")||SalesRepType.equalsIgnoreCase("OpsWizard")) {
				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1]);

				/*String TearmChange = AmendModify_Tearmchange(businessID, day3ProductName_split[0]);
				if (TearmChange.equalsIgnoreCase("Fail")) {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - failed");
				} else {
					LOGS.info(Thread.currentThread() +"Tearm Date Change - Pass");
				}*/
				}
				// Day-3 code
				// start____________________________________________________________________________________________________________________________________________________
                    if (count < 1) {
				String path = regardingfilesPath + "//InputFiles//Order.properties";
				Properties OR = pr.loadPropertiesFiles("Order");

				try {
					if (SalesRepType.equalsIgnoreCase("TSales")) {
						SalesRep = OR.getProperty("TSales");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if ((SalesRepType.equalsIgnoreCase("Premise"))
							|| (SalesRepType.equalsIgnoreCase("PremiseRepVoiceVerify"))) {
						SalesRep = OR.getProperty("Premise");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					} else if (SalesRepType.equalsIgnoreCase("spe")) {
						SFLoginResult = SalesforceLogin("sfAdminUserNameSPE", "sfAdminPswd");
					}else if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
						SalesRep = OR.getProperty("OpsWizard");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
					}
					LOGS.info(Thread.currentThread() +"Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
				} catch (Exception e) {
					LOGS.info(Thread.currentThread() +"Some error in SF Login");
				}

				

					LOGS.info(Thread.currentThread() +businessID + " # " + "Social (a la carte)" + " # " + "Modify" + " # " + "PriceChangeIncrease" + " # "
							+ "NA");
					String Day3ProcessResult = Day3Process(businessID, "Social (a la carte)", "Modify",
							"PriceChangeIncrease", "NA");

					ImageName = "Day3ProcessResult";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
						Status = "Fail";
						LOGS.info(Thread.currentThread() +"Day3 Process - Method Failed");
						ActRes = "Day 3 Process is failed";
						count = count + 1;
					} else {
						Status = "Pass";
						LOGS.info(Thread.currentThread() +"Day3Process - Method Passed");
						JiraStatus = "Passed";
						ActRes = "Day 3 Process is Passed";
					}
					ExpRes = "Day 3 Process should be verified & should be Pass ";
					ExportResults.exportTestResult(
							"Amend_PriceChange_Increase_Social_alacarte  Status:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
                    }	
                    
				// Validations for Day3 
                    if (count < 1) {
				Thread.sleep(3000);
				driver.navigate().refresh();
				Thread.sleep(6000);
				LOGS.info(Thread.currentThread() +"extra time Started");
				Thread.sleep(7000);
				String Day3validations = Day3Validationsupgradesami(day3ProductName);
				
				if (Day3validations.equalsIgnoreCase("Fail")) {
					Status = "Fail";
					LOGS.info(Thread.currentThread() +"Day3 Validations - Method Failed");
					ActRes = "Day3 Validations  is failed";
					count = count + 1;
				} else {
					Status = "Pass";
					LOGS.info(Thread.currentThread() +"Day3validations - Method Passed");
					JiraStatus = "Passed";
					ActRes = "Day3 validations is Passed";
				}
				ExpRes = "Day3 validations should be verified & should be Pass ";
				ExportResults.exportTestResult(
						"Amend_PriceChange_Increase_Social_alacarte validations:," + ExpRes + "," + ActRes + "," + Status + "," + "No Image",pr.Resultsfolderpath);
				
                    }
                    }
			} catch (IOException e) {
				e.printStackTrace();
				return Status;
			} catch (Exception e) {
				e.printStackTrace();
				return Status;
			}
			return Status;
		}
		
		
		public  String Day3ValidationsDowngradesami(String day3ProductName) throws Exception {

			String captureProdCountStr = "";
			productsCaptureHomePage = "";
			String GoLiveDateofExistingproductDowngradeSami="";
			String GoLiveDateofnewlyaddedproductDowngradeSami="";

			try {
				LOGS.info(Thread.currentThread() +"Capturing Live Product Details");

				// Taking Live Product Count
				Thread.sleep(5000);
				Thread.sleep(3000);
				liveProductAllCount = SLocator("LiveProductCount").getText();
				liveProductAllCount = liveProductAllCount.replace("[", "");
				liveProductAllCount = liveProductAllCount.replace("]", "");
				LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + liveProductAllCount);

				SLocator("LiveProductLink").click();
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Clicked on Live Products link");

				String activeProdStatus = "None";

				String[] day3ProductName_split = day3ProductName.split("->");
				LOGS.info(Thread.currentThread() +"Product Name: " + day3ProductName_split[0]);
				LOGS.info(Thread.currentThread() +"Plan Name: " + day3ProductName_split[1] + BudgetToEnterDay3);

				if (liveProductAllCount.contains("+")) {

					captureProdCountStr = SLocator("LiveProdCountStr").getText();
					LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

					SLocator("LiveProdCountStr").click();
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(2000);
					LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

					captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
					captureProdCountStr = captureProdCountStr.replace(")", "");
					captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
					captureProdCountStr = captureProdCountStr.replace(" �", "");

					ActiveProductsCount = Integer.parseInt(captureProdCountStr);

					for (int i = 1; i <= ActiveProductsCount; i++) {

						String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
						LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
						String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

						String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
						LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
						String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
						LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

						String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
						LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
						String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
						LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

						String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
						LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
						String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
						LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);

						String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
								+ liveProductGoLiveDate;
						ProductName.add(prodDetails);
						productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
					}
					driver.navigate().back();

				} else {
					
					captureProdCountStr = liveProductAllCount;
					ActiveProductsCount = Integer.parseInt(captureProdCountStr);

					for (int i = 1; i <= ActiveProductsCount; i++) {

							String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1) + "]/th/a";
							//LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
							String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
							LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);
							
							String getSubID="";
							if(!SalesRepType.equalsIgnoreCase("OpsWizard")) {
							String subscriptionIDPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1)  + "]/td[2]/a";
						//	LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
							 getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
							LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);
							}

							String liveProductStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1) + "]/td[2]";
						//	LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
							String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
							LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

							String liveProductGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
									+ (i + 1) + "]/td[4]";
						//	LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
							String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
							LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);

	// In downgrad newly set budget will show pending status
	if (day3ProductName.trim().contains("Search (a la carte)")&& getActiveProducts.trim().equalsIgnoreCase("--Managed Search")) {

								String monthlyInvestment_LiveproductsSearchpath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
								//LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSearchpath);

								monthlyInvestment_LiveproductsSearch = driver.findElement(By.xpath(monthlyInvestment_LiveproductsSearchpath)).getText();
								LOGS.info(Thread.currentThread() +"Monthly Investment of New search product is :" + monthlyInvestment_LiveproductsSearch);

								GoLiveDateforValidationSearchDowngraded = liveProductGoLiveDate;
								
								LOGS.info(Thread.currentThread() +"Go Live Date & Status for New search product and Status:"+ GoLiveDateforValidationSearchDowngraded + ".Product Status:" +liveProductsStatus);

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationSearchDowngraded + ":-:" + monthlyInvestment_LiveproductsSearch
										+ ":-:");
					
								monthlyInvestment_LiveproductsSearch = monthlyInvestment_LiveproductsSearch.replace("$", "");
								monthlyInvestment_LiveproductsSearch = monthlyInvestment_LiveproductsSearch.replace(".00", "");
								monthlyInvestment_LiveproductsSearch = monthlyInvestment_LiveproductsSearch.replace(",", "");

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationSearchDowngraded + ":-:" + monthlyInvestment_LiveproductsSearch
										+ ":-:"+BudgetToEnterDay3);
				
								if (monthlyInvestment_LiveproductsSearch.equalsIgnoreCase(BudgetToEnterDay3)) {
									
									LOGS.info(Thread.currentThread() +"*************************************************10!***********************************************");
						

									if (liveProductsStatus.trim().equalsIgnoreCase("Pending")) {
										LOGS.info(Thread.currentThread() +"*************************************************12!***********************************************");
										GoLiveDateofnewlyaddedproductDowngradeSami = liveProductGoLiveDate;
										Day3downgradepending = "True";

									} else {
										LOGS.info(Thread.currentThread() +"*************************************************11!***********************************************");
		
										Day3downgradepending = "False";
									}

								}

							} else if (day3ProductName.trim().contains("Display (a la carte)")
									&& getActiveProducts.trim().equalsIgnoreCase("--Display")) {

								String monthlyInvestment_LiveproductsDisplaypath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
							//	LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsDisplaypath);
								monthlyInvestment_LiveproductsDisplay = driver
										.findElement(By.xpath(monthlyInvestment_LiveproductsDisplaypath)).getText();
				LOGS.info(Thread.currentThread() +"Monthly Investment of New Display product is :" + monthlyInvestment_LiveproductsDisplay);

					GoLiveDateforValidationDisplayDowngraded = liveProductGoLiveDate;
				

			LOGS.info(Thread.currentThread() +"Go Live Date for New Display product is" + GoLiveDateforValidationDisplayDowngraded+"Product Status: "
										+ liveProductsStatus);

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationDisplayDowngraded + ":-:"
										+ monthlyInvestment_LiveproductsDisplay + ":-:");

								monthlyInvestment_LiveproductsDisplay = monthlyInvestment_LiveproductsDisplay.replace("$", "");
								monthlyInvestment_LiveproductsDisplay = monthlyInvestment_LiveproductsDisplay.replace(".00",
										"");
								monthlyInvestment_LiveproductsDisplay = monthlyInvestment_LiveproductsDisplay.replace(",", "");

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationDisplayDowngraded + ":-:"
										+ monthlyInvestment_LiveproductsDisplay + ":-:"+BudgetToEnterDay3);

								if (monthlyInvestment_LiveproductsDisplay.equalsIgnoreCase(BudgetToEnterDay3)) {
									
			LOGS.info(Thread.currentThread() +"*************************************************10!***********************************************");
									if (liveProductsStatus.trim().equalsIgnoreCase("Pending")) {
										
			LOGS.info(Thread.currentThread() +"*************************************************12!***********************************************");
									GoLiveDateofnewlyaddedproductDowngradeSami=GoLiveDateforValidationDisplayDowngraded;							
										Day3downgradepending = "True";
									} else {
			LOGS.info(Thread.currentThread() +"*************************************************11!***********************************************");
										Day3downgradepending = "False";
									}

								}

							} else if (day3ProductName.trim().contains("Social (a la carte)")
									&& getActiveProducts.trim().equalsIgnoreCase("--Social")) {

								String monthlyInvestment_LiveproductsSocialpath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
							//	LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSocialpath);
								monthlyInvestment_LiveproductsSocial = driver
										.findElement(By.xpath(monthlyInvestment_LiveproductsSocialpath)).getText();
								LOGS.info(Thread.currentThread() +
										"Monthly Investment of New Social product is :" + monthlyInvestment_LiveproductsSocial);

								GoLiveDateforValidationSocialDowngraded = liveProductGoLiveDate;
							
								LOGS.info(Thread.currentThread() +"Go Live Date for New Social product is" + GoLiveDateforValidationSocialDowngraded+"Product Status: "
										+ liveProductsStatus);

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationSocialDowngraded + ":-:" + monthlyInvestment_LiveproductsSocial
										+ ":-:");

								monthlyInvestment_LiveproductsSocial = monthlyInvestment_LiveproductsSocial.replace("$", "");
								monthlyInvestment_LiveproductsSocial = monthlyInvestment_LiveproductsSocial.replace(".00", "");
								monthlyInvestment_LiveproductsSocial = monthlyInvestment_LiveproductsSocial.replace(",", "");

								LOGS.info(Thread.currentThread() +GoLiveDateforValidationSocialDowngraded + ":-:" + monthlyInvestment_LiveproductsSocial
										+ ":-:"+BudgetToEnterDay3);

								if (monthlyInvestment_LiveproductsSocial.equalsIgnoreCase(BudgetToEnterDay3)) {
									
			LOGS.info(Thread.currentThread() +"*************************************************10!***********************************************");
						

									if (liveProductsStatus.trim().equalsIgnoreCase("Pending")) {
										LOGS.info(Thread.currentThread() +"*************************************************12!***********************************************");
										GoLiveDateofnewlyaddedproductDowngradeSami=GoLiveDateforValidationSocialDowngraded;
										Day3downgradepending = "True";

									} else {
										LOGS.info(Thread.currentThread() +"*************************************************11!***********************************************");
		
										Day3downgradepending = "False";
									}

								}
							}

	// In downgrade old set budget will show Active status

							if (day3ProductName.trim().contains("Search (a la carte)")
									&& getActiveProducts.trim().equalsIgnoreCase("--Managed Search")) {
								
								String monthlyInvestment_LiveproductsSearchpath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
								//LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSearchpath);
								monthlyInvestment_LiveproductsSearchActiveDWN = driver
										.findElement(By.xpath(monthlyInvestment_LiveproductsSearchpath)).getText();
								LOGS.info(Thread.currentThread() +"Monthly Investment of Existing search product is :"
										+ monthlyInvestment_LiveproductsSearchActiveDWN);

								monthlyInvestment_LiveproductsSearchActiveDWN = monthlyInvestment_LiveproductsSearchActiveDWN
										.replace("$", "");
								monthlyInvestment_LiveproductsSearchActiveDWN = monthlyInvestment_LiveproductsSearchActiveDWN
										.replace(".00", "");
								monthlyInvestment_LiveproductsSearchActiveDWN = monthlyInvestment_LiveproductsSearchActiveDWN
										.replace(",", "");
			LOGS.info(Thread.currentThread() +"*************************************************10***********************************************");
								GoLiveDateforValidationSearchDowngradedold = liveProductGoLiveDate;
								
								LOGS.info(Thread.currentThread() +"Go Live Date for Existing search product and Status:"
										+ GoLiveDateforValidationSearchDowngradedold + liveProductGoLiveDate);

								if (monthlyInvestment_LiveproductsSearchActiveDWN.equalsIgnoreCase(day3ProductName_split[1])) {
				LOGS.info(Thread.currentThread() +"*************************************************12***********************************************");

									if (liveProductsStatus.trim().equalsIgnoreCase("Active")) {
					LOGS.info(Thread.currentThread() +"*************************************************11***********************************************");
										GoLiveDateofExistingproductDowngradeSami=GoLiveDateforValidationSearchDowngradedold;
										Day3downgradeActive = "True";
									} else {
										Day3downgradeActive = "False";
									}

								}

							}
							if (day3ProductName.trim().contains("Display (a la carte)")
									&& getActiveProducts.trim().equalsIgnoreCase("--Display")) {

								GoLiveDateforValidationDisplayDowngradedold = liveProductGoLiveDate;
							
								LOGS.info(Thread.currentThread() +"Go Live Date for Existing Display product and Status:"
										+ GoLiveDateforValidationDisplayDowngradedold + liveProductGoLiveDate);

								String monthlyInvestment_LiveproductsDisplaypath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
							
								//LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsDisplaypath);
								monthlyInvestment_LiveproductsDisplayActiveDWN = driver
										.findElement(By.xpath(monthlyInvestment_LiveproductsDisplaypath)).getText();
							
								LOGS.info(Thread.currentThread() +"Monthly Investment of Existing search product is :"
										+ monthlyInvestment_LiveproductsDisplayActiveDWN);

								monthlyInvestment_LiveproductsDisplayActiveDWN = monthlyInvestment_LiveproductsDisplayActiveDWN
										.replace("$", "");
								monthlyInvestment_LiveproductsDisplayActiveDWN = monthlyInvestment_LiveproductsDisplayActiveDWN
										.replace(".00", "");
								monthlyInvestment_LiveproductsDisplayActiveDWN = monthlyInvestment_LiveproductsDisplayActiveDWN
										.replace(",", "");

								LOGS.info(Thread.currentThread() +"Monthly Investment of Existing search product is :"
										+ monthlyInvestment_LiveproductsDisplayActiveDWN +"##################"+ day3ProductName_split[1]);

								if (monthlyInvestment_LiveproductsDisplayActiveDWN.equalsIgnoreCase(day3ProductName_split[1])) {
				LOGS.info(Thread.currentThread() +"*************************************************12***********************************************");

									if (liveProductsStatus.trim().equalsIgnoreCase("Active")) {
					LOGS.info(Thread.currentThread() +"*************************************************11***********************************************");
										GoLiveDateofExistingproductDowngradeSami=GoLiveDateforValidationDisplayDowngradedold;
					
										Day3downgradeActive = "True";
									} else {
										Day3downgradeActive = "False";
									}

								}

							}
							if (day3ProductName.trim().contains("Social (a la carte)")
									&& getActiveProducts.trim().equalsIgnoreCase("--Social")) {

								GoLiveDateforValidationSocialDowngradedold = liveProductGoLiveDate;
							
								LOGS.info(Thread.currentThread() +"Go Live Date for Existing Social product and Status:"
										+ GoLiveDateforValidationSocialDowngradedold + liveProductGoLiveDate);

								String monthlyInvestment_LiveproductsSocialpath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
						//		LOGS.info(Thread.currentThread() +"Path:" + monthlyInvestment_LiveproductsSocialpath);
								monthlyInvestment_LiveproductsSocialActiveDWN = driver
										.findElement(By.xpath(monthlyInvestment_LiveproductsSocialpath)).getText();
								LOGS.info(Thread.currentThread() +"Monthly Investment of Existing search product is :"
										+ monthlyInvestment_LiveproductsSocialActiveDWN);

								monthlyInvestment_LiveproductsSocialActiveDWN = monthlyInvestment_LiveproductsSocialActiveDWN
										.replace("$", "");
								monthlyInvestment_LiveproductsSocialActiveDWN = monthlyInvestment_LiveproductsSocialActiveDWN
										.replace(".00", "");
								monthlyInvestment_LiveproductsSocialActiveDWN = monthlyInvestment_LiveproductsSocialActiveDWN
										.replace(",", "");

								LOGS.info(Thread.currentThread() +"Monthly Investment of Existing search product is :"
										+ monthlyInvestment_LiveproductsSocialActiveDWN + day3ProductName_split[1]);

								if (monthlyInvestment_LiveproductsSocialActiveDWN.equalsIgnoreCase(day3ProductName_split[1])) {
				LOGS.info(Thread.currentThread() +"*************************************************12***********************************************");

									if (liveProductsStatus.trim().equalsIgnoreCase("Active")) {
					LOGS.info(Thread.currentThread() +"*************************************************11***********************************************");
					GoLiveDateofExistingproductDowngradeSami=GoLiveDateforValidationSocialDowngradedold;
										Day3downgradeActive = "True";
									} else {
										Day3downgradeActive = "False";
									}

								}

							}

							String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
									+ liveProductGoLiveDate;
							ProductName.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
						}

					

				}

			
				
				LOGS.info(Thread.currentThread() +Day3downgradepending+"6666666666666666666666"+Day3downgradeActive);
				
				if (Day3downgradepending.equalsIgnoreCase(Day3downgradeActive)) {
				
				
					LOGS.info(Thread.currentThread() +GoLiveDateofExistingproductDowngradeSami+"6666666666666666666666"+GoLiveDateofnewlyaddedproductDowngradeSami);
	
					
				String inputdate=GoLiveDateofExistingproductDowngradeSami;
				int days=-1;
				String newdate=dateUtilsAddSubtractDays(inputdate,days);
				LOGS.info(Thread.currentThread() +newdate);
				
				if(GoLiveDateofnewlyaddedproductDowngradeSami.equalsIgnoreCase(newdate)) {
					
					LOGS.info(Thread.currentThread() +"Go live date is set to next month -1 day of blling cycle:"+ GoLiveDateofnewlyaddedproductDowngradeSami);	
					ImageName = "Validationongolivedateonupgradedproduct";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Go live date should be set to next month -1 day of blling cycle";
					ActRes = "Go live date is set to next month -1 day of billing cycle:"+GoLiveDateofnewlyaddedproductDowngradeSami;
					Status="Pass";
					ExportResults
							.exportTestResult("Validation on go live date on upgraded product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
					
					
				}else{
					
					LOGS.info(Thread.currentThread() +"Go live date is not set to next month -1 day of billing cycle");	
					ImageName = "Validationongolivedateonupgradedproduct";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Go live date is not set to next month -1 day of billing cycle";
					ActRes = "Go live date is not set to next month -1 day of billing cycle";
					Status="Fail";
					ExportResults
							.exportTestResult("Validation on go live date on upgraded product:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}
				
				
				
				
				}
				

				if (Day3downgradepending.equalsIgnoreCase(Day3downgradeActive)) {

					LOGS.info(Thread.currentThread() +
							"Downgrade process completed, Existing product is still in Live product with Active Status and New product is displayed in Live products with Pending Status ");
					ImageName = "Downgrade_Validation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Downgrade process completed. Existing product should be in Live product with Active Status and New product should be displayed in Live products with Pending Status";
					ActRes = "Downgrade process completed. Existing product is still in Live product with Active Status and New product is displayed in Live products with Pending Status.";
					ExportResults.exportTestResult(
							"Validation on  Downgrade SAMI:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				} else {
					LOGS.info(Thread.currentThread() +"issue in downgrading budget price");
					ImageName = "Downgrade_Validation";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					ExpRes = "Downgrade process completed. Existing product should be in Live product with Active Status and New product should be displayed in Live products with Pending Status - Search";
					ActRes = "issue in downgrading budget price";
					ExportResults.exportTestResult(
							"Validation on Downgrade SAMI:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

				// validations DWN

			} catch (Exception e) {
				e.printStackTrace();
				
			}  
			return Status;
		}
		
		//Verifying and updating Term End Date for the products
		public  String UpdateTermEndDate(String inputFileLocation) throws Throwable {
			SFInspectorPlugin = "True";
			LOGS.info(Thread.currentThread() +"Started Term End Date Validation and Updation");

			// Taking Input from Excel sheet
			SalesforceTasks.Xls_Reader(regardingfilesPath + inputFileLocation);
			int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
			LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

			
			for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
				count = 0;
				LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

				String folderName = TestCaseName + "_Data" + (lineItemInt - 1);
				Resultsfolderpath = pr.createFolder(folderName);
				pr.preparingOutputSheets();

				// to get cell data ( Sheet Name, column Name, Row number)
				businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
				//ProductNameString = getCellData("InputSheet", "Product to be cancelled", lineItemInt);
				//LOGS.info(Thread.currentThread() +" # " + businessID + " # " + ProductNameString + " # ");

				/*if (ProductNameString.equalsIgnoreCase("Search - Guaranteed Clicks")) {
					LOGS.info(Thread.currentThread() +"Term End Date is not required for " + ProductNameString);
					
				} else {*/
					try {
						Properties OR = pr.loadPropertiesFiles("Order");
						
						SalesRep = OR.getProperty("UserwithAmendBlockDatepermission");
						LOGS.info(Thread.currentThread() +"Login Sales Rep -> " + SalesRep);
						String SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);

						if (SFLoginResult.equalsIgnoreCase("Fail")) {
							count = count + 1;
							Status = "Fail";
							LOGS.info(Thread.currentThread() +"Failed in SF Login");
						} else
							LOGS.info(Thread.currentThread() +"SF Login is successfully done");

					} catch (Throwable e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in SF Login- " + e.getMessage());
						count = count + 1;
					}

					
					if (count == 0) {
						try {
							//String TermsEndDateStatus = TermEndDateValidation(businessID, ProductNameString);
							String TermsEndDateStatus = TermEndDateValidation(businessID);

							if (TermsEndDateStatus.equalsIgnoreCase("Pass")) {
								Description = "Term End Date Changed for the Account ID " + businessID + " and Product "
										+ ProductName;
							} else {
								Description = "Term End Date Unchanged for the Account ID->" + businessID + " for "
										+ ProductName;
							}
							LOGS.info(Thread.currentThread() +"Term End Date Status : "+Description);


						} catch (Exception e) {
							LOGS.info(Thread.currentThread() +"Error in Term End Date");
							Status = "Fail";
							count=count+1;
						}
					}
					
				//}

			}
			return Status;

		}
		
		
		//public static String TermEndDateValidation(String businessID1, String ExistingProduct_1) {
		public  String TermEndDateValidation(String businessID1) throws Throwable {
			
			//LOGS.info(Thread.currentThread() +"Calling TermEndDateValidation method-->\nBusiness ID ->" + businessID1 + "\n# Existing Product ->"
				//	+ ExistingProduct_1);
			LOGS.info(Thread.currentThread() +"Calling TermEndDateValidation method-->\nBusiness ID ->" + businessID1);
			
			String captureProdCountStr = "", LivSubCount = "", captureSubScrptCountStr = "";
			productsCaptureHomePage = "";

			try {

				//driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID1);
				SLocator("searchInputField").sendKeys(businessID1);
				//driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
				SLocator("searchInputField").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Clicked on Search Button");

				driver.findElement(By.xpath("//td[text()='" + businessID1 + "']//parent::tr//th/a")).click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(3000);
				LOGS.info(Thread.currentThread() +"Clicking on Account Link");

				ExpRes = "Account Should be Available";
				ActRes = "Account Found";
				Status = "Pass";
				ImageName = "ExistingAccount";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
				ExportResults.exportTestResult(
						"Account Verification:" + "," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

				
				if (count == 0) {
					// Capture Product details from Live Products
					try {
						getLiveProductDetails();
						LOGS.info(Thread.currentThread() +","+ActiveProductsCount + " Products available in Live Products");
						
						if(ActiveProductsCount==0){
							count=count+1;
							Status="Fail";
							ImageName = "LiveProductPage";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ActRes="No Live products for the current account to proceed Term_End_Date process";
							LOGS.info(Thread.currentThread() +ActRes);
							ExpRes = "Live Products required for Term End Date Verification and Updation";
							
							ExportResults.exportTestResult(
									"Live Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
						
					} catch (Throwable e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						count = count + 1;
					}
				}

				
				if (count == 0) {
					// Contract Page Validation
					try {
						SLocator("ContractsLink").click();
						LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("ContractNolink"));
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						ExpRes = "Capture Contract Number";
						ImageName = "ContractLink";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						// Capture Contract number
						contractNumber = SLocator("ContractNolink").getText();
						ActRes = "Contract Number:" + contractNumber;
						LOGS.info(Thread.currentThread() +ActRes);

						SLocator("ContractNolink").click();
						LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);
						
					} catch (Exception e) {
						ActRes = "Error in Contracts";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Fail";
						count = count + 1;
					}
					ExportResults.exportTestResult(
							"Capture Contract Number: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

				
				if (count == 0) {
					
					try {
						getLiveSubscriptionsDetails();
						LOGS.info(Thread.currentThread() +"Number of products in live Subscriptions :"+ActiveSubScrptCount);
						
						if(ActiveSubScrptCount==0){
							count=count+1;
							Status="Fail";
							ImageName = "LiveSubscriptionPage";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ActRes="No Live Subscription Products for the current account to proceed Term_End_Date process";
							LOGS.info(Thread.currentThread() +ActRes);
							ExpRes = "Live Subscription Products required for Term End Date Verification and Updation";
							
							ExportResults.exportTestResult(
									"Live Subscription Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}
						
					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Live Subscription is Not updated at this time");
					}
				}


			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Status = "Fail";
			}

			return "Pass";
		}
		
		
		//Verifying and updating Amend Block Date for the products
				public  String AmendBlockDate(String inputFileLocation) throws Throwable {
					SFInspectorPlugin = "True";
					
					LOGS.info(Thread.currentThread() +"Started Amend Block Date Validation and Updation");

					// Taking Input from Excel sheet
					SalesforceTasks.Xls_Reader(regardingfilesPath + inputFileLocation);
					int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
					LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

					
						for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
							count = 0;
							LOGS.info(Thread.currentThread() +"Taking Value from Cancel Input Sheet Row-" + lineItemInt);

							String folderName = TestCaseName + "_Data" + (lineItemInt - 1);
							Resultsfolderpath = pr.createFolder(folderName);
							pr.preparingOutputSheets();

							// to get cell data ( Sheet Name, column Name, Row number)
							businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
							
							ProductNameString = getCellData("InputSheet", "Product to be cancelled", lineItemInt);
							LOGS.info(Thread.currentThread() +" # " + businessID + " # " + ProductNameString + " # ");

							/*if (ProductNameString.equalsIgnoreCase("Search - Guaranteed Clicks")) {
								LOGS.info(Thread.currentThread() +"Term End Date is not required for " + ProductNameString);
								
							} else {*/
								try {
									Properties OR = pr.loadPropertiesFiles("Order");
									
									SalesRep = OR.getProperty("UserwithAmendBlockDatepermission");
									LOGS.info(Thread.currentThread() +SalesRep + " used for Amend Block Date Change/Remove");
									String SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);

									if (SFLoginResult.equalsIgnoreCase("Fail")) {
										count = count + 1;
										Status = "Fail";
										LOGS.info(Thread.currentThread() +"Failed in SF Login");
									} else
										LOGS.info(Thread.currentThread() +"SF Login is successfully done");

								} catch (Throwable e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
									LOGS.info(Thread.currentThread() +"Error in SF Login- " + e.getMessage());
									count = count + 1;
								}

								
								if (count == 0) {
									try {
										String AmendBlockDateStatus = AmendBlockDateProcess(businessID, ProductNameString);

										if (AmendBlockDateStatus.equalsIgnoreCase("Pass")) {
											Description = "Amend Block Date changed for the Account ID " + businessID + " and Product "
													+ ProductName;
										} else {
											Description = "Amend Block Date Unchanged for the Account ID->" + businessID + " for "
													+ ProductName;
										}
										LOGS.info(Thread.currentThread() +"Amend Block Date Status : "+Description);


									} catch (Exception e) {
										LOGS.info(Thread.currentThread() +"Error in Amend Block Date");
										Status = "Fail";
										count=count+1;
									}
								}
								
							//}

						}
						return Status;

					}
				
				
				public  String AmendBlockDateProcess(String businessID1, String existingProduct) throws Throwable {
					
					//LOGS.info(Thread.currentThread() +"Calling TermEndDateValidation method-->\nBusiness ID ->" + businessID1 + "\n# Existing Product ->"
						//	+ ExistingProduct_1);
					LOGS.info(Thread.currentThread() +"Calling AmendBlockDateProcess method-->\nBusiness ID ->" + businessID1 + "\n# Existing Product ->"
						+ existingProduct);
					
					String captureProdCountStr = "", LivSubCount = "", captureSubScrptCountStr = "";
					productsCaptureHomePage = "";

					try {

						//driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID1);
						SLocator("searchInputField").sendKeys(businessID1);
						//driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
						SLocator("searchInputField").click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Search Button");

						driver.findElement(By.xpath("//td[text()='" + businessID1 + "']//parent::tr//th/a")).click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicking on Account Link");

						ExpRes = "Account Should be Available";
						ActRes = "Account Found";
						Status = "Pass";
						ImageName = "ExistingAccount";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExportResults.exportTestResult(
								"Account Verification:" + "," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

						
						if (count == 0) {
							// Capture Product details from Live Products
							try {
								getLiveProductDetails();
								LOGS.info(Thread.currentThread() +","+ActiveProductsCount + " Products available in Live Products");
								
								if(ActiveProductsCount==0){
									count=count+1;
									Status="Fail";
									ImageName = "LiveProductPage";
									ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
									ActRes="No Live products for the current account to proceed Term_End_Date process";
									LOGS.info(Thread.currentThread() +ActRes);
									ExpRes = "Live Products required for Term End Date Verification and Updation";
									
									ExportResults.exportTestResult(
											"Live Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}
								
							} catch (Throwable e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								count = count + 1;
							}
						}

						
						if (count == 0) {
							// Contract Page Validation
							try {
								SLocator("ContractsLink").click();
								LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
								((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
										SLocator("ContractNolink"));
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);

								ExpRes = "Capture Contract Number";
								ImageName = "ContractLink";
								ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
								// Capture Contract number
								contractNumber = SLocator("ContractNolink").getText();
								ActRes = "Contract Number:" + contractNumber;
								LOGS.info(Thread.currentThread() +ActRes);

								SLocator("ContractNolink").click();
								LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								
							} catch (Exception e) {
								ActRes = "Error in Contracts";
								LOGS.info(Thread.currentThread() +ActRes);
								Status = "Fail";
								count = count + 1;
							}
							ExportResults.exportTestResult(
									"Capture Contract Number: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						}

						
						if (count == 0) {
							
							try {
								getLiveSubscriptionsDetails();
								LOGS.info(Thread.currentThread() +"Number of products in live Subscriptions :"+ActiveSubScrptCount);
								
								if(ActiveSubScrptCount==0){
									count=count+1;
									Status="Fail";
									ImageName = "LiveSubscriptionPage";
									ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
									ActRes="No Live Subscription Products for the current account to proceed Term_End_Date process";
									LOGS.info(Thread.currentThread() +ActRes);
									ExpRes = "Live Subscription Products required for Term End Date Verification and Updation";
									
									ExportResults.exportTestResult(
											"Live Subscription Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
								}
								
							} catch (Exception e) {
								e.printStackTrace();
								LOGS.info(Thread.currentThread() +"Live Subscription is Not updated at this time");
							}
						}


					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						Status = "Fail";
					}

					return "Pass";
				}
				
				
				public  String LineItemCancelUsingInputSheet() throws Exception {
					TestCaseName = "CPQLineItemCancel";
					cancelProcessType = "Cancel";
					SFInspectorPlugin = "True";

					try {
						LOGS.info(Thread.currentThread() +"Line Item Cancel Method Started");

						// to set path of excel (excel file path)
						SalesforceTasks
								.Xls_Reader(regardingfilesPath + "//InputFiles//AmendProcess//FullCancelInput.xlsx");
						
						// to get row count (sheetName)
						int excelRowCount = SalesforceTasks.getRowCount("InputSheet");
						LOGS.info(Thread.currentThread() +"Number of Business Orders Available in the Input Sheet: " + (excelRowCount - 1));

						// data fetching from input sheet from second row to last line
						for (int lineItemInt = 2; lineItemInt <= excelRowCount; lineItemInt++) {
							count = 0;
							LOGS.info(Thread.currentThread() +"Taking input from Full Cancel Spread Sheet Row# ->" + lineItemInt);

							// to get cell data (First Value Sheet Name, Second Value Column
							// Name, Third Value Row number)
							SalesRepType = SalesforceTasks.getCellData("InputSheet", "Sales Rep Type", lineItemInt);
							businessID = SalesforceTasks.getCellData("InputSheet", "Business ID", lineItemInt);
							businessID = businessID.replace(" ", "");
							ProdsAdded= SalesforceTasks.getCellData("InputSheet", "Product to be cancelled", lineItemInt);
							CancelReason = SalesforceTasks.getCellData("InputSheet", "Cancel Reason", lineItemInt);
							CancelType = SalesforceTasks.getCellData("InputSheet", "Cancel Type", lineItemInt);
							CancelOutcome = SalesforceTasks.getCellData("InputSheet", "Cancellation Outcome", lineItemInt);
							ProductIdentifierName = SalesforceTasks.getCellData("InputSheet", "New Product ID", lineItemInt);

							//Cancel Type should be valid Type
							if (!CancelType.equalsIgnoreCase("None")) {
								
								//Cancel Reason should be valid Reason
								if (!CancelReason.equalsIgnoreCase("None")) {
									
									LOGS.info(Thread.currentThread() +SalesRepType + " # " + businessID + " # " + ProdsAdded + " # " + CancelReason + " # " + CancelType + " # "
											+ CancelOutcome + " # " + ProductIdentifierName);
									String cancelDetails = CancelType + "-" + CancelReason + "-" + CancelOutcome;

									String folderName = TestCaseName + "_Data" + (lineItemInt - 1);
									Resultsfolderpath = pr.createFolder(folderName);
									pr.preparingOutputSheets();

									String inputdata = pr.FetchProductplan(ProductIdentifierName);
									LOGS.info(Thread.currentThread() +"Display all fetched product and plan name ->" + inputdata);
									String[] allProdsplans = inputdata.split("&");
									String allProds = allProdsplans[0];
									LOGS.info(Thread.currentThread() +"Display all fetched product names ->" + allProds);
									String allplans = allProdsplans[1];
									LOGS.info(Thread.currentThread() +"Display all fetched plan names ->" + allplans);

									if (ProductIdentifierName.equalsIgnoreCase("02")|| ProductIdentifierName.equalsIgnoreCase("03")
											|| ProductIdentifierName.equalsIgnoreCase("04") || ProductIdentifierName.equalsIgnoreCase("12")
											|| ProductIdentifierName.equalsIgnoreCase("13") || ProductIdentifierName.equalsIgnoreCase("14")
											|| ProductIdentifierName.equalsIgnoreCase("15")) {
										plansLabel = allProds + " : " + allplans;
									} else {
										plansLabel = allProds;
									}
									LOGS.info(Thread.currentThread() +"Selected Product Name -> " + plansLabel);

									
									if (count == 0) {
										try {
											String Day3ProcessResult = LineItemCancelProcess(SalesRepType, businessID,
													ProdsAdded, cancelDetails, ProductIdentifierName);

											ImageName = "Day3ProcessResult";
											ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
											if (Day3ProcessResult.equalsIgnoreCase("Fail")) {
												Status = "Fail";
												LOGS.info(Thread.currentThread() +"Day3 Process Line Item Cancel - Method Failed");
												ActRes = "Day3 Process Line Item Cancel is failed";
												count = count + 1;
											} else {
												Status = "Pass";
												LOGS.info(Thread.currentThread() +"Day3 Process Line Item Cancel Method Verified");
												JiraStatus = "Passed";
												ActRes = "Day3 Process Line Item Cancel is Verified Successfully";
											}

											ExpRes = "Day3 Process verification and it should be Successful & should be Pass";
											ExportResults.exportTestResult(
													"Day3 Process Line Item Cancel Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

										} catch (Throwable e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
											LOGS.info(Thread.currentThread() +"Error in Day3 Process Result " + e.getMessage());
											count = count + 1;
										}
									}
									// driver.quit();

									Summary = "Line Item Cancel : Cancelling All Product including " + plansLabel + " with Cancel Type-"
											+ CancelType + " and Cancel Reason " + CancelReason;
									// Description = "Full Cancel Verifications with Type
									// "+CancelType +" and Reason - "+ CancelReason;
									LOGS.info(Thread.currentThread() +"Summary:" + Summary);

									Description = "Cancelled Product " +ProdsAdded+ " with Cancel Type-" + CancelType + " & Cancel Reason-"
											+ CancelReason + " for the Account-" + businessID
											+ ". Added Cancel Validations Steps along with Reference";
									LOGS.info(Thread.currentThread() +"Description:" + Description);

									MoveOrCopyFile.copyFunction(Resultsfolderpath+"\\ZephyrTestResult.xlsx", "C:\\Automation\\OutputFiles\\ZephyrTestResult.xlsx");
									
								
									
								} else
									
									LOGS.info(Thread.currentThread() +"Select proper Cancel Reason from Input sheet");
								
							}	else
								
								LOGS.info(Thread.currentThread() +"Select proper Cancel Type from Input sheet");
						}

					} catch (Exception e) {
						ImageName = "Day3ProcessResult";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						e.printStackTrace();
						Status = "Fail";
						ExpRes = "Day3 Process should be verified & should be Pass";
						e.printStackTrace();
						ActRes = "Day3 Process Failed - Reached to Catch Exception";
						ExportResults
								.exportTestResult("Day3 Process Status:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						count = count + 1;
					}

					return Status;
				}
				
				
				

				// Line Item Cancellation requires Unique Business ID, Cancellation Details like
				// Type, Reason, Outcome..Product to be cancelled, SalesRepType(SPE, TSales..) 
				// Product Identifier for product availability in the Account
				public  String LineItemCancelProcess(String salesRepType, String buisnessID_1, String prodCancel, String lineItemCancelDetails,
					String prodID) throws Throwable {

				Status = "Pass";
				String cancelStatusResult = "";

				if (count == 0) {
					// Chrome Launching and SalesForce Login with respective
					// SalesRepType
					try {
						SFLogin(salesRepType);
						
					} catch (Throwable e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in SalesForce Login- " + e.getMessage());
						count = count + 1;
					}
				}

				if (count == 0) {
					LOGS.info(Thread.currentThread() +"Line Item Cancel Process Started");
					try {
						LOGS.info(Thread.currentThread() +"Details for Cancellation: " + buisnessID_1 + " # " + prodCancel + " # "
								+ lineItemCancelDetails + " # " + prodID);
						// driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessID);
						SLocator("searchInputField").sendKeys(businessID);
						Thread.sleep(5000);
						// driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
						SLocator("searchInputField").click();
						Thread.sleep(4000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(6000);

						ExpRes = "Account verification and Account should be Available in Search List";
						ImageName = "ExistingAccount";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						// Business ID entered in Search field
						driver.findElement(By.xpath("//td[text()='" + businessID + "']//parent::tr//th/a")).click();
						Thread.sleep(5000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(5000);
						LOGS.info(Thread.currentThread() +"Clicked on Account Link");
						ActRes = "Account ID-" + businessID + " Found";

					} catch (Throwable e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
						ActRes = "Account ID-" + businessID + " Not Found";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Fail";
						count = count + 1;
					}
					ExportResults
							.exportTestResult("Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
				}

				
				if (count == 0) {
					try {
						if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
							driver.findElement(By.xpath("//span[text()='Details']")).click();
							LOGS.info(Thread.currentThread() +"Clicking on Details Link for the " + SalesRepType + " Rep ");
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Clicked on Details Link ");
						}
					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in OpsWizard Page");
						Status = "Fail";
						count = count + 1;
					}
				}
				

				if (count == 0) {
					// Capture Product Count from Live Products
					getLiveProductDetails();
					activeProdCountBeforeCancel = ActiveProductsCount;

					if (activeProdCountBeforeCancel == 0) {
						count = count + 1;
						ExpRes = "Products availability verification in Live Products";
						ActRes = "There is No Live Products for Cancellation";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Fail";
						ExportResults.exportTestResult(
								"Live Product Status: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} else {
						LOGS.info(Thread.currentThread() +","+activeProdCountBeforeCancel + " Products available in Live Products");
						Status = "Pass";
						ExpRes = "Verify the account which is suitable for Pre-Live Cancel or Post-Live Cancel";
						if (activeProdDetails.contains("Pending")) {
							ActRes = "Account is suitable for Pre-Live Full Cancel";
							LOGS.info(Thread.currentThread() +ActRes);
						} else if (activeProdDetails.contains("Active")) {
							ActRes = "Account is suitable for Post-Live full Cancel";
							LOGS.info(Thread.currentThread() +ActRes);
						}
						ExportResults.exportTestResult("Account verification for Full Cancel: ," + ExpRes + "," + ActRes + ","
								+ Status + "," + "No Image",pr.Resultsfolderpath);
					}
				}

				
				if (count == 0) {
					// Capture Product details from Live Products
					getProductHistoryDetails();
					prodHistoryCountBeforeCancel = productHistoryCount;
					LOGS.info(Thread.currentThread() +","+prodHistoryCountBeforeCancel + " Products in Product History Before Cancel");
				}

				
				if (count == 0) {
					// Contract Page
					try {
						SLocator("ContractsLink").click();
						LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("ContractNolink"));
						Thread.sleep(3000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(3000);

						ExpRes = "Capture Contract Number";
						ImageName = "ContractLink";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);

						// Capture Contract number
						contractNumber = SLocator("ContractNolink").getText();
						ActRes = "Contract Number:" + contractNumber;
						LOGS.info(Thread.currentThread() +ActRes);
						SLocator("ContractNolink").click();
						Thread.sleep(5000);
						driver.navigate().refresh();
						Thread.sleep(5000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(5000);
						LOGS.info(Thread.currentThread() +"Contract number link clicked in account details page");
						Status = "Pass";
						ExportResults
								.exportTestResult("Contract Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} catch (Exception e) {
						ExpRes = "Capture Contract Number";
						ActRes = "Error in Contracts";
						LOGS.info(Thread.currentThread() +ActRes);
						Status = "Fail";
						count = count + 1;
						ExportResults
								.exportTestResult("Contract Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
				}

				
				if (count == 0) {
					// Product details taking from live subscription page
					getLiveSubscriptionsDetails();

					if (ActiveSubScrptCount == 0) {
						LOGS.info(Thread.currentThread() +"Products are not available in Live subscriptions");
						count = count + 1;
					} else {
						liveSubscriptionCountBeforeCancel = ActiveSubScrptCount;
						LOGS.info(Thread.currentThread() +","+liveSubscriptionCountBeforeCancel
								+ " Product avaialable in Live SubScription in Contract Page");
					}
				}
				
				
				if (count == 0) {
					try {
						SLocator("Amend").click();
						LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page");
						Thread.sleep(5000);
						driver.navigate().refresh();
						Thread.sleep(5000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(5000);

						SLocator("Amend2").click();
						LOGS.info(Thread.currentThread() +"Second Amend button clicked");
						Thread.sleep(5000);
						driver.navigate().refresh();
						Thread.sleep(5000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(5000);
						LOGS.info(Thread.currentThread() +buisnessID_1 + " # " + lineItemCancelDetails + " # " + prodID);

						LOGS.info(Thread.currentThread() +"Cancelling Line Item Products");
						//cancelStatusResult = CancelAllProduct(lineItemCancelDetails);
						cancelStatusResult = CancelLineItemProduct(prodCancel, lineItemCancelDetails);

						ExpRes = "Quote should be Saved without errors";
						if (cancelStatusResult.equalsIgnoreCase("Fail")) {
							ActRes = "Full Cancel Process Failed - Quote process failed in QLE page";
							LOGS.info(Thread.currentThread() +ActRes);
							Status = "Fail";
							ActRes = "Quote process failed in QLE page";
							count = count + 1;
						} else {
							Status = "Pass";
							ActRes = "Quote Number " + QuoteNumber + " created and Saved in QLE Page without errors";
							LOGS.info(Thread.currentThread() +ActRes);
						}

						ImageName = "CancelProcess";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExportResults.exportTestResult(
								"Full Cancel Process:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					} catch (Exception exp) {
						exp.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error while creating quotes");
						Status = "Fail";
						count = count + 1;
					}
				}

				if (count == 0) {
					try {
						LOGS.info(Thread.currentThread() +"Clicking on Save Button in QLE");
						SLocator("SaveBtn").click();
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);
						// driver.findElement(By.xpath("//paper-button[text()='Save']")).click();
						LOGS.info(Thread.currentThread() +"Clicked Save on Edit Quote Page");
					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Save Button not clicked in QLE page");
						driver.navigate().refresh();
						LOGS.info(Thread.currentThread() +"Page Refreshed");
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						try {
							SLocator("SaveBtn").click();
							LOGS.info(Thread.currentThread() +"Second Time Tried to Click on Save Button");
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
						} catch (Exception exp) {
							exp.printStackTrace();
							LOGS.info(Thread.currentThread() +"Save Button not clicked");
							Status = "Fail";
							count = count + 1;
						}
					}
				}

				if (count == 0) {
					try {
						String Genrate_to_SubmitQuoteProcess = Genrate_to_SubmitQuote(lineItemCancelDetails);

						if (Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")) {
							LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Failed");
							Status = "Fail";
						} else {
							LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Passed");
							Status = "Pass";
						}

					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						Status = "Fail";
						count = count + 1;
					}

				}
				return Status;
			}
				
				public  String dateUtilsAddSubtractDays(String inputDate, int days) throws Exception 
			       {
			        
				String dateRes= null;
					
					SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
			              Calendar c = Calendar.getInstance();
			              c.setTime(format.parse(inputDate));
			              c.add(Calendar.MONTH, 1);
			              c.add(Calendar.DATE, days); 
			              dateRes = format.format(c.getTime());

			              String[] dateFun = dateRes.split("/");
			              dateRes = Integer.parseInt(dateFun[0]) + "/" + Integer.parseInt(dateFun[1]) + "/" + Integer.parseInt(dateFun[2]);
			              LOGS.info(Thread.currentThread() +"Date in SF Format:" + dateRes);
			              
			              return dateRes;
			       }	
				
				public  String Day3packagesvalidation(String existingProduct_1, String newProducttobeadded) throws Exception {
					// TODO Auto-generated method stub
					
					LOGS.info(Thread.currentThread() +"$$$$$$$$$$$$$$$$$$$$"+existingProduct_1+"*****"+newProducttobeadded);
					try {
						LOGS.info(Thread.currentThread() +"Executing capture product details from Live Products");
						getLiveProductDetailsAfterDay3packages(newProducttobeadded,existingProduct_1);
					} catch (Throwable e) {
						e.printStackTrace();
						count = count + 1;
					}
					
					Thread.sleep(5000);
					Thread.sleep(3000);
					
					
					LOGS.info(Thread.currentThread() +Day3oldPackageproductstillinliveproduct+" ********************* "+Day3newproductPackageproductmovedtoliveproduct);
					
					
					
					if (!Day3oldPackageproductstillinliveproduct.equalsIgnoreCase("True")) {
					
						
						LOGS.info(Thread.currentThread() +"They here man");
						
						
					try {
						LOGS.info(Thread.currentThread() +"Executing capture product details from 'Product History'");
						productHistoryDetailsAfterDay3packages(existingProduct_1);
						
						
					} catch (Throwable e) {
						e.printStackTrace();
						count = count + 1;
					}
					
					LOGS.info(Thread.currentThread() +Day3exectingPackageproductmovedtoproducthistory+" ********************* "+Day3newproductPackageproductmovedtoliveproduct);	
					
					if(Day3exectingPackageproductmovedtoproducthistory.equalsIgnoreCase("True") && Day3newproductPackageproductmovedtoliveproduct.equalsIgnoreCase("True"))
					{
						LOGS.info(Thread.currentThread() +"Existing product "+ existingProduct_1+" moved sucessfully to product history and Upgraded product "+newProducttobeadded+" appred on Live products");
						ImageName = "ValidationonDay3packages";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Existing product "+ existingProduct_1+" moved sucessfully to product history and Upgraded product "+newProducttobeadded+" appred on Live products";
						ExpRes = "Existing product moved sucessfully to product history and Upgraded product appred on Live products with increased budget - Search";
						Status="Pass";
						ExportResults
								.exportTestResult("Validation on Day 3 packages:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	

						
					}else{
						LOGS.info(Thread.currentThread() +"issue while validating Day3 package upgrade from "+existingProduct_1+" to "+newProducttobeadded);
						ImageName = "ValidationonDay3packages";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Existing product should be moved to product history and Upgraded product should apprer on Live products with increased budget - Search";
						ActRes = "issue while validating Day3 package upgrade from "+existingProduct_1+" to "+newProducttobeadded;
						Status="Fail";
						ExportResults
								.exportTestResult("Validation on Day 3 packages:," + ExpRes + "," + ActRes + "," + Status+ "," + ImgName,pr.Resultsfolderpath);	
					}
					
					
					DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
					LocalDateTime now = LocalDateTime.now();
					String[] Date=dtf.format(now).split(" "); 
					LOGS.info(Thread.currentThread() +"Today's Date Local sytem"+Date[0]);//3/27/2020
					
					String[] date1 = Date[0].split("/");
					
					String	datevalidate= date1[0].replace("0","")+"/"+ date1[1].replace("0","") +"/"+ date1[2];
					
					LOGS.info(Thread.currentThread() +Day3exectingPackageproductEnddate+"*****************************************************************************");

					
					if(Day3exectingPackageproductEnddate.equalsIgnoreCase(datevalidate)){
						
							LOGS.info(Thread.currentThread() +"End date is set to Today's date - for cancelled existing product");	
							ImageName = "EndDatevalidationDay3Packages";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ExpRes = "End date date should be set to Today's date - for for cancelled existing product";
							ActRes = "End date is set to Today's date - for cancelled existing product";
							Status="Pass";
							ExportResults
									.exportTestResult("EndDatevalidationDay3Packages:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
							
							
						}else{
							
							LOGS.info(Thread.currentThread() +"End date is not set to Today's date - for cancelled existing product");	
							ImageName = "EndDatevalidationDay3Packages";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ExpRes = "End date should be set to Today's date - for cancelled existing product";
							ActRes = "End date is not set to Today's date - for cancelled existing product";
							Status="Fail";
							ExportResults
									.exportTestResult("EndDatevalidationDay3Packages:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);	
						}
						
					}else if(Day3oldPackageproductstillinliveproduct.equalsIgnoreCase("True") && Day3newproductPackageproductmovedtoliveproduct.equalsIgnoreCase("True")){
						
					LOGS.info(Thread.currentThread() +"Existing product "+existingProduct_1+" is still in Live product with Active Status and New product "+newProducttobeadded+"is displayed in Live products with Pending Status");
						ImageName = "ValidationonDay3packages";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ActRes = "Existing product "+existingProduct_1+" is still in Live product with Active Status and New product"+newProducttobeadded+"is displayed in Live products with Pending Status";
						ExpRes = "Existing product is still in Live product with Active Status and New product is displayed in Live products with Pending Status.";
						Status="Pass";
						ExportResults.exportTestResult(
								"Validationon Day 3 packages:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					} else {
						LOGS.info(Thread.currentThread() +"issue while validating Day3 package upgrade from "+existingProduct_1+" to "+newProducttobeadded);
						ImageName = "ValidationonDay3packages";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Existing product should be in Live product with Active Status and New product should be displayed in Live products with Pending Status - Search";
						ActRes = "issue while validating Day3 package upgrade from "+existingProduct_1+" to "+newProducttobeadded;
						Status="Fail";
						ExportResults.exportTestResult(
								"Validationon Day 3 packages:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					}
					return Status;
					
				}
				public  String productHistoryDetailsAfterDay3packages(String existingProduct_1) throws Exception {
					String captureProdCountStr = "";
					productsCaptureHomePage = "";

					try {
						LOGS.info(Thread.currentThread() +"Capturing Product History Details");
						
						// Taking Live Product Count
						Thread.sleep(5000);
						Thread.sleep(3000);
						String ProductHistoryAllCount = SLocator("ProductHistoryCount").getText();
						ProductHistoryAllCount = ProductHistoryAllCount.replace("[", "");
						ProductHistoryAllCount = ProductHistoryAllCount.replace("]", "");
						ProductHistoryAllCount = ProductHistoryAllCount.replace("+", "");
						LOGS.info(Thread.currentThread() +"Product Count taking from Product History in top row links- " + ProductHistoryAllCount);
									
						SLocator("ProductHistoryLink").click();
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Product History link");
						
						String activeProdStatus="None";
						
						if (ProductHistoryAllCount.contains("+")) {
							
							captureProdCountStr = SLocator("ProductHistoryCountStr").getText();
							LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

							SLocator("ProductHistoryCountStr").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

							captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
							captureProdCountStr = captureProdCountStr.replace(")", "");
							captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
							captureProdCountStr = captureProdCountStr.replace(" �", "");

							ActiveProductsCount = Integer.parseInt(captureProdCountStr);
							
							for (int i = 1; i <= ActiveProductsCount; i++) {
								
								String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);
								
								String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
								String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

								String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
								String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);
								
								String ProductHistoryEndDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[6]";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryEndDatePath);
								String ProductHistoryEndDate1 = driver.findElement(By.xpath(ProductHistoryEndDatePath)).getText();
								LOGS.info(Thread.currentThread() +"End Date is :" + ProductHistoryEndDate1);
									
								if(getActiveProducts.equalsIgnoreCase(existingProduct_1) && liveProductsStatus.equalsIgnoreCase("Expired")) {
									
									
									LOGS.info(Thread.currentThread() +"********************old product is updated to the product history page********************************************");
									LOGS.info(Thread.currentThread() +"End Date is :" + ProductHistoryEndDate1);
									
									Day3exectingPackageproductEnddate=ProductHistoryEndDate1;
									
									LOGS.info(Thread.currentThread() +Day3exectingPackageproductEnddate+"*****************************************************************************");
									
									Day3exectingPackageproductmovedtoproducthistory="True";
									
									
								}else {
									
									LOGS.info(Thread.currentThread() +"*****************************************2**************************************************************");
								}
								
								
								
								String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
								ProductNameProductHistory.add(prodDetails);
								productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
							}
							
		LOGS.info(Thread.currentThread() +"*******************************************************************************************************");
							
							LOGS.info(Thread.currentThread() +"Number of product available under Product History Section:" + ProductNameProductHistory);
							
		LOGS.info(Thread.currentThread() +"*******************************************************************************************************");

							driver.navigate().back();

						} 
						else
						{
							captureProdCountStr = ProductHistoryAllCount;
							
							ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {

								
								
								String ProductHistoryactiveProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryactiveProdPath);
								String  getActiveProducts= driver.findElement(By.xpath(ProductHistoryactiveProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String ProductHistorysubscriptionIDPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//following::tbody[1]//tr["
										+ (i + 1) + "]//td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistorysubscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(ProductHistorysubscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"Product History SubScription ID is :" + getSubID);
								
								String ProductHistoryStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryStatusPath);
								String ProductHistoryStatus = driver.findElement(By.xpath(ProductHistoryStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"ProdugetActiveProductsct Status is :" + ProductHistoryStatus);
								

								String ProductHistoryGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryGoLiveDatePath);
								String ProductHistoryGoLiveDate = driver.findElement(By.xpath(ProductHistoryGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + ProductHistoryGoLiveDate);
								
								String ProductHistoryEndDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Product History']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[6]";
								LOGS.info(Thread.currentThread() +"Path:" + ProductHistoryEndDatePath);
								String ProductHistoryEndDate1 = driver.findElement(By.xpath(ProductHistoryEndDatePath)).getText();
								LOGS.info(Thread.currentThread() +"End Date is :" + ProductHistoryEndDate1);
								
								if(getActiveProducts.equalsIgnoreCase(existingProduct_1)&&ProductHistoryStatus.equalsIgnoreCase("Expired")) {
									
									
									LOGS.info(Thread.currentThread() +"********************old product is updated to the product history page********************************************");
									LOGS.info(Thread.currentThread() +"End Date is :" + ProductHistoryEndDate1);
									Day3exectingPackageproductmovedtoproducthistory="True";
									
									
									Day3exectingPackageproductEnddate=ProductHistoryEndDate1;
									
									LOGS.info(Thread.currentThread() +Day3exectingPackageproductEnddate+"*****************************************************************************");
									
								
									
								}else {
									
									LOGS.info(Thread.currentThread() +"*****************************************1**************************************************************");
								}
								
								
								
								String prodDetails = getSubID+"_"+getActiveProducts + "_" + ProductHistoryStatus + "_" + ProductHistoryGoLiveDate +"_"+ ProductHistoryEndDate1 +"->";
								ProductNameProductHistory.add(prodDetails);
								productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
							}
							LOGS.info(Thread.currentThread() +"*******************************************************************************************************");
						
							LOGS.info(Thread.currentThread() +"Number of product available under Product History Section:" + ProductNameProductHistory);
							LOGS.info(Thread.currentThread() +"*******************************************************************************************************");

						}
						
						Status = "Pass";
						ImageName = "ProdutsavailableunderProductHistorySection";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Produts should be available with expired state with End date";
						ActRes = "Products avialble under live product section:"+productsCaptureHomePage;
						ExportResults
								.exportTestResult("Produts available under 'Product History' Section:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						

					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in ProducthistoryProductDetails method");
						Status = "Fail";
						ImageName = "ProdutsavailableunderProductHistorySection";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Produts should be available with expired state with End date";
						ActRes = "ProductHistorySection";
						ExportResults
								.exportTestResult("Produts available under 'Product History' Section:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						count = count + 1;
					}
				
				return Status;
					
				}

				public  String getLiveProductDetailsAfterDay3packages(String newProducttobeadded, String existingProduct_1) throws Exception {
					

					String captureProdCountStr = "";
					productsCaptureHomePage = "";

					try {
						LOGS.info(Thread.currentThread() +"Capturing Live Product Details");
						
						// Taking Live Product Count
						Thread.sleep(5000);
						Thread.sleep(3000);
						liveProductAllCount = SLocator("LiveProductCount").getText();
						liveProductAllCount = liveProductAllCount.replace("[", "");
						liveProductAllCount = liveProductAllCount.replace("]", "");
						LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + liveProductAllCount);
									
						SLocator("LiveProductLink").click();
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Live Products link");
						
						String activeProdStatus="None";
						
						if (liveProductAllCount.contains("+")) {
							
							captureProdCountStr = SLocator("LiveProdCountStr").getText();
							LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

							SLocator("LiveProdCountStr").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

							captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
							captureProdCountStr = captureProdCountStr.replace(")", "");
							captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
							captureProdCountStr = captureProdCountStr.replace(" �", "");

							ActiveProductsCount = Integer.parseInt(captureProdCountStr);
							
							for (int i = 1; i <= ActiveProductsCount; i++) {
								
								String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);					
								
								String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
								String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

								String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
								String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);
								
								if(getActiveProducts.equalsIgnoreCase(newProducttobeadded) && liveProductsStatus.equalsIgnoreCase("Pending")) {
									
									
									LOGS.info(Thread.currentThread() +"******************** new product have updated to the cart********************************************");
									Day3newproductPackageproductmovedtoliveproduct="True";
									
								}else {
									
									LOGS.info(Thread.currentThread() +"*****************************************3**************************************************************");
								}
								
								if(getActiveProducts.equalsIgnoreCase(existingProduct_1) && liveProductsStatus.equalsIgnoreCase("Active")) {
									
									
									LOGS.info(Thread.currentThread() +"********************old product still available in live product page********************************************");
									Day3oldPackageproductstillinliveproduct="True";
									
								}else {
									
									LOGS.info(Thread.currentThread() +"*****************************************3**************************************************************");
								}
								
								String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
								Productsavailableunderliveproducts.add(prodDetails);
								productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
								
								
						}
							driver.navigate().back();
							
							LOGS.info(Thread.currentThread() +"*******************************************************************************************************");

							LOGS.info(Thread.currentThread() +"Products available under live products table:" + Productsavailableunderliveproducts);
							
							LOGS.info(Thread.currentThread() +"*******************************************************************************************************");

						} 
						else
						{
							captureProdCountStr = liveProductAllCount;
							
							ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {

								String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String subscriptionIDPath = "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
										+ i + "]/td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);
								
								String liveProductStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
								String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

								String liveProductGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
								String liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);
								
								
							if(getActiveProducts.equalsIgnoreCase(newProducttobeadded)  &&liveProductsStatus.equalsIgnoreCase("Pending")) {
									
							LOGS.info(Thread.currentThread() +"******************** new product have updated to the cart********************************************");
							Day3newproductPackageproductmovedtoliveproduct="True";
							}else {
									
									LOGS.info(Thread.currentThread() +"*****************************************4**************************************************************");
								}
							if(getActiveProducts.equalsIgnoreCase(existingProduct_1) && liveProductsStatus.equalsIgnoreCase("Active")) {
								
								
								LOGS.info(Thread.currentThread() +"********************old product still available in live product page********************************************");
								Day3oldPackageproductstillinliveproduct="True";
								
							}else {
								
								LOGS.info(Thread.currentThread() +"*****************************************3**************************************************************");
							}	
								
							
							String prodDetails = getSubID+"_"+getActiveProducts + "_" + liveProductsStatus + "_" + liveProductGoLiveDate;
							Productsavailableunderliveproducts.add(prodDetails);
							productsCaptureHomePage = productsCaptureHomePage + " : " + prodDetails;
						
							
					}
					LOGS.info(Thread.currentThread() +"*******************************************************************************************************");
			
						LOGS.info(Thread.currentThread() +"Products available under live products table:" + Productsavailableunderliveproducts);
						
					LOGS.info(Thread.currentThread() +"*******************************************************************************************************");

							}

						
						ImageName = "ProductsunderLiveProductSectionAfterDay3";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = " Product Names available in Live Products Section for the Account-"
								+ businessID;
						ActRes = prodCount + "Products Available in Live Product Section After Day3. Products are ->"
								+ productsCaptureHomePage;
						Status = "Pass";
						ExportResults
								.exportTestResult("Live Product Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
						Status = "Fail";
						ImageName = "GetLiveProduct";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Capture Product Name-Status-Go Live Date from Live Product Details";
						ActRes = "Error in Live Product Section method";
						ExportResults
								.exportTestResult("Live Product Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						count = count + 1;
					}
					return Status;
					
					
				}	
				
				public  String Day2NonSamifulfillmentValidation(String ProductName) throws Exception {

					String captureProdCountStr = "";
					productsCaptureHomePage = "";
					String errorflag="False";
					try {
						LOGS.info(Thread.currentThread() +"Capturing Live Product Details");

						// Taking Live Product Count
						Thread.sleep(5000);
						Thread.sleep(3000);

						Thread.sleep(5000);
						liveProductAllCount = SLocator("LiveProductCount").getText();
						liveProductAllCount = liveProductAllCount.replace("[", "");
						liveProductAllCount = liveProductAllCount.replace("]", "");
						
						LOGS.info(Thread.currentThread() +"All Live Product Count taking from top row links- " + liveProductAllCount);

						SLocator("LiveProductLink").click();
						Thread.sleep(3000);
						LOGS.info(Thread.currentThread() +"Clicked on Live Products link");

						String activeProdStatus = "None";

						if (liveProductAllCount.contains("+")) {

							captureProdCountStr = SLocator("LiveProdCountStr").getText();
							LOGS.info(Thread.currentThread() +"Captured Text- " + captureProdCountStr);

							SLocator("LiveProdCountStr").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							LOGS.info(Thread.currentThread() +"Clicked on Go To List Link");

							captureProdCountStr = captureProdCountStr.replace("Go to list (", "");
							captureProdCountStr = captureProdCountStr.replace(")", "");
							captureProdCountStr = captureProdCountStr.replace("&nbsp;", "");
							captureProdCountStr = captureProdCountStr.replace(" �", "");

							ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {

								String activeProdPath = "//tr[contains(@class,'dataRow')][" + i + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String subscriptionIDPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

								String liveProductStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
								String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

								
								String liveProductGoLiveDate=null;
								String liveProductGoLiveDatePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);	
								liveProductGoLiveDate= driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);

								LOGS.info(Thread.currentThread() +"*************************************************************************************");
								String prodDetailsrr="";
								
									getActiveProducts=getActiveProducts.replace("--","" );
									getActiveProducts=getActiveProducts.replace("----","");
									
									LOGS.info(Thread.currentThread() +"*****************"+getActiveProducts+"**********************");
										
										if(getActiveProducts.equalsIgnoreCase("Website (a la carte)")||getActiveProducts.equalsIgnoreCase("Smart Site - Standard")
												||getActiveProducts.equalsIgnoreCase("Listings Management")||getActiveProducts.equalsIgnoreCase("Included Domain w/ Website")
												||getActiveProducts.equalsIgnoreCase("30 Sec. Photomotion Video")||getActiveProducts.equalsIgnoreCase("Reviews")
												||getActiveProducts.equalsIgnoreCase("Online Foundation Solution")||getActiveProducts.equalsIgnoreCase("Reputation")
												||getActiveProducts.equalsIgnoreCase("Listings Management")||getActiveProducts.equalsIgnoreCase("Reviews")
												||getActiveProducts.equalsIgnoreCase("Online Foundation Solution")||getActiveProducts.equalsIgnoreCase("Smart Site - Pro")
												||getActiveProducts.equalsIgnoreCase("Smart Site - Standard")||getActiveProducts.equalsIgnoreCase("Smart Site - Standard (Spread Billing)")
												||getActiveProducts.equalsIgnoreCase("Smart Site - Pro (Spread Billing)")||getActiveProducts.equalsIgnoreCase("Enhanced Social Solution")
												||getActiveProducts.equalsIgnoreCase("Synchronized Marketing Solution")||getActiveProducts.equalsIgnoreCase("Social Starter Solution")
												
												) {
											
											
											if(liveProductsStatus.equalsIgnoreCase("Active")&&(!liveProductGoLiveDate.equalsIgnoreCase(null))) {
												
												String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
														+ liveProductGoLiveDate;
												
												productNameandproductsavailablewithActivestatus.add(prodDetails);
																
											}else if (liveProductsStatus.equalsIgnoreCase("Pending")&&(!liveProductGoLiveDate.equalsIgnoreCase(null))){
										
										String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
												+ liveProductGoLiveDate;
										
										productNameandproductsavailablewithActivestatus.add(prodDetails);
									
									}else {
												
												 errorflag = "True";
											}
											
										}else {
											 prodDetailsrr = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
													+ liveProductGoLiveDate;				
											productNametotalproductsavailableinlifeproductdetails.add(prodDetailsrr);
										}
								
								}
								
							LOGS.info(Thread.currentThread() +"****************************************************");
							LOGS.info(Thread.currentThread() +","+productNameandproductsavailablewithActivestatus);
							LOGS.info(Thread.currentThread() +"****************************************************");
							LOGS.info(Thread.currentThread() +","+productNametotalproductsavailableinlifeproductdetails);
							LOGS.info(Thread.currentThread() +"****************************************************");
							
							
							driver.navigate().back();

						} else {
							captureProdCountStr = liveProductAllCount;

							ActiveProductsCount = Integer.parseInt(captureProdCountStr);

							for (int i = 1; i <= ActiveProductsCount; i++) {

								String activeProdPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/th/a";
								LOGS.info(Thread.currentThread() +"Path:" + activeProdPath);
								String getActiveProducts = driver.findElement(By.xpath(activeProdPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Name is :" + getActiveProducts);

								String subscriptionIDPath = "//div[@class='listHoverLinks']//following::div[@class='bRelatedList first']//table[@class='list']//child::tr[contains(@class,'dataRow')]["
										+ i + "]/td[2]/a";
								LOGS.info(Thread.currentThread() +"Path:" + subscriptionIDPath);
								String getSubID = driver.findElement(By.xpath(subscriptionIDPath)).getText();
								LOGS.info(Thread.currentThread() +"SubScription ID is :" + getSubID);

								String liveProductStatusPath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[3]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductStatusPath);
								String liveProductsStatus = driver.findElement(By.xpath(liveProductStatusPath)).getText();
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveProductsStatus);

								String liveProductGoLiveDate=null;
								
								String liveProductGoLiveDatePath = "//div[@class='listHoverLinks']//following::h3[text()='Live Products']//ancestor::div[1]//following::div[1]//tr["
										+ (i + 1) + "]/td[5]";
								LOGS.info(Thread.currentThread() +"Path:" + liveProductGoLiveDatePath);
								 liveProductGoLiveDate = driver.findElement(By.xpath(liveProductGoLiveDatePath)).getText();
								LOGS.info(Thread.currentThread() +"Golive Date is :" + liveProductGoLiveDate);


								LOGS.info(Thread.currentThread() +"*************************************************************************************");
								String prodDetailsrr="";
								
									getActiveProducts=getActiveProducts.replace("--","" );
									getActiveProducts=getActiveProducts.replace("----","");
									
									LOGS.info(Thread.currentThread() +"*****************"+getActiveProducts+"**********************");
										
										if(getActiveProducts.equalsIgnoreCase("Website (a la carte)")||getActiveProducts.equalsIgnoreCase("Smart Site - Standard")
												||getActiveProducts.equalsIgnoreCase("Listings Management")||getActiveProducts.equalsIgnoreCase("Included Domain w/ Website")
												||getActiveProducts.equalsIgnoreCase("30 Sec. Photomotion Video")||getActiveProducts.equalsIgnoreCase("Reviews")
												||getActiveProducts.equalsIgnoreCase("Online Foundation Solution")||getActiveProducts.equalsIgnoreCase("Reputation")
												||getActiveProducts.equalsIgnoreCase("Listings Management")||getActiveProducts.equalsIgnoreCase("Reviews")
												||getActiveProducts.equalsIgnoreCase("Online Foundation Solution")||getActiveProducts.equalsIgnoreCase("Smart Site - Pro")
												||getActiveProducts.equalsIgnoreCase("Smart Site - Standard")||getActiveProducts.equalsIgnoreCase("Smart Site - Standard (Spread Billing)")
												||getActiveProducts.equalsIgnoreCase("Smart Site - Pro (Spread Billing)")||getActiveProducts.equalsIgnoreCase("Enhanced Social Solution")
												||getActiveProducts.equalsIgnoreCase("Synchronized Marketing Solution")||getActiveProducts.equalsIgnoreCase("Social Starter Solution")
												
												) {
											
											
											if(liveProductsStatus.equalsIgnoreCase("Active")&&(!liveProductGoLiveDate.equalsIgnoreCase(null))) {
												
												String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
														+ liveProductGoLiveDate;
												
												productNameandproductsavailablewithActivestatus.add(prodDetails);
																
											}
											
											else if (liveProductsStatus.equalsIgnoreCase("Pending")&&(!liveProductGoLiveDate.equalsIgnoreCase(null))){
										
										String prodDetails = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
												+ liveProductGoLiveDate;
										
										productNameandproductsavailablewithActivestatus.add(prodDetails);
									
									}
									else {
												
												 errorflag = "True";
											}
											
										}else {
											 prodDetailsrr = getSubID + "_" + getActiveProducts + "_" + liveProductsStatus + "_"
													+ liveProductGoLiveDate;				
											productNametotalproductsavailableinlifeproductdetails.add(prodDetailsrr);
										}
								
								}
							
							LOGS.info(Thread.currentThread() +"****************************************************");
							LOGS.info(Thread.currentThread() +"Non-Sami products avaliable under the Quote number: "+ productNameandproductsavailablewithActivestatus);
							LOGS.info(Thread.currentThread() +"****************************************************");
							LOGS.info(Thread.currentThread() +"Sami products avaliable under the Quote number: "+ productNametotalproductsavailableinlifeproductdetails);
							LOGS.info(Thread.currentThread() +"****************************************************");
							
						}

						if (!errorflag.equalsIgnoreCase("True")) {
						
						ImageName = "LiveProductSectionAfterDay2NonSamiFF";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "All Non-Sami products Status should be changed from Pending to Active";
						//prodCount = ProductName.size();
						LOGS.info(Thread.currentThread() +"Total Products in Live Product Section is " + prodCount);

						ActRes = "All Non-Sami products status are changed from Pending to Active for Quote Number:"+ QuoteNumber;
						Status = "Pass";
						ExportResults
								.exportTestResult("Live Product Details After Day2 Non-SamiFF:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						}else {
							
							
							ImageName = "LiveProductSectionAfterDay2NonSamiFF";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ExpRes = "All Non-Sami products Status should be changed from Pending to Active"+ QuoteNumber;
							//prodCount = ProductName.size();
							LOGS.info(Thread.currentThread() +"Total Products in Live Product Section is " + prodCount);

							ActRes = "not all Non-Sami products status are changed from Pending to Active for this Quote Number:"+QuoteNumber;
							Status = "Fail";
							ExportResults
									.exportTestResult("Live Product Details After Day2 Non-SamiFF:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							
							
							
						}

					} catch (Exception e) {
						e.printStackTrace();
						LOGS.info(Thread.currentThread() +"Error in getLiveProductDetails method");
						Status = "Fail";
						ImageName = "GetLiveProduct";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Capture Product Name-Status-Go Live Date from Live Product Details";
						ActRes = "Error in Live Product Section method";
						ExportResults
								.exportTestResult("Live Product Details," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						count = count + 1;
					}
					return Status;

				}
				
				
				public  String BillingdateValidation() {

					try {
						
						LOGS.info(Thread.currentThread() +"Executing Billing_Anniversary_Day method");
						
						SFInspectorPI("Billing_Anniversary_Day");
						
						LOGS.info(Thread.currentThread() +"SFInspectorPI method execution completed");
						
						driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
						driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
						Thread.sleep(4000);
						
						String billingAnniversaryDay= driver.findElement(By.xpath("//div[text()='Billing Anniversary Day']//following::td[2]/div")).getText();
						LOGS.info(Thread.currentThread() +"Billing Anniversary Day for this Current Account:"+ billingAnniversaryDay);
					
					
						DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
						LocalDateTime now = LocalDateTime.now();
						String[] Date=dtf.format(now).split(" "); 
						LOGS.info(Thread.currentThread() +"Today's Date Local sytem"+Date[0]);//03/27/2020
						
						String[] date1 = Date[0].split("/");
						
						String	datevalidate= date1[0].replace("0","");
						
						ImageName = "Billing_Anniversary_Day";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					
						if(billingAnniversaryDay.equalsIgnoreCase(datevalidate)) {
							Status = "Fail";
							LOGS.info(Thread.currentThread() +"since Billing_Anniversary_Day is Same as Today's Day:"+ billingAnniversaryDay+". Amend process is stopped for this accout" );
							ActRes = "since Billing_Anniversary_Day is Same as Today's Day:"+ billingAnniversaryDay+". Amend process is stopped for this accout";
							count=count+1;
						}else {
							
							driver.navigate().back();
							
							Status = "Pass";
							LOGS.info(Thread.currentThread() +"Billing_Anniversary_Day is differ from Today's Day:"+ billingAnniversaryDay);
							JiraStatus = "Passed";
							ActRes = "Billing_Anniversary_Day is differ from Today's Day:"+ billingAnniversaryDay;
	
						}
					
						ExpRes = "Billing_Anniversary_Day should differ from Today's Day:";
						ExportResults.exportTestResult(
								"Billing_Anniversary_Day:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						Status="Pass";

						
					} catch (Exception e) {
						// TODO Auto-generated catch block

						Status = "Fail";
						e.printStackTrace();
					}

					return Status;
				}

public  String getPendingSubscriptions(String businessId)  throws Exception{
					
				try {
					LOGS.info(Thread.currentThread() +"Inside GetPendingSubscriptions Method!!");
				
					String captureSubScrptCountStr = "", LivSubCount = "";
					productsCaptureHomePage = "";
					getSubscriptionID.clear();
					ProductName.clear();
					
					try {
					
					String busiID = businessId.replace(" ", "");
					
					Thread.sleep(5000);
					LOGS.info(Thread.currentThread() +"Entering Business ID");
					driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(busiID);
					driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(5000);

					ExpRes = "Account Verification and it should be Available";
					ImageName = "ExistingAccount";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					
					driver.findElement(By.xpath("//td[text()='" + busiID + "']//parent::tr//th/a")).click();
					LOGS.info(Thread.currentThread() +"Clicking on Account Link");
					Thread.sleep(2000);
					driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
					Thread.sleep(5000);
					ActRes = "Account Found";
						
				} catch (Exception e) {
					ImageName = "AccountNotFoundFailure";
					ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
					LOGS.info(Thread.currentThread() +"Account Not Found");
					ActRes = "Account Not Found";
					Status = "Fail";
					return Status;
				}

					ExportResults
					.exportTestResult("Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
					
					LOGS.info(Thread.currentThread() +"Reached at Account Page...");
					
					Thread.sleep(5000);
					if (count < 1) {
						// Contract Page
						Thread.sleep(2000);
						driver.navigate().refresh();
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(5000);
						SLocator("ContractsLink").click();
						LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");
						((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
								SLocator("ContractNolink"));
						Thread.sleep(2000);
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);

						ExpRes = "Capture Contract Number";
						ImageName = "ContractLink";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						try {
							contractNumber=SLocator("ContractNolink").getText();
							ActRes = "Contract Number:" + contractNumber;
							LOGS.info(Thread.currentThread() +ActRes);

							SLocator("ContractNolink").click();
							LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(2000);
							Status = "Pass";
						} catch (Exception e) {
							ImageName = "ContractClinkFailure";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ActRes = "Error in Contracts";
							LOGS.info(Thread.currentThread() +ActRes);
							count = count + 1;
							Status = "Fail";
							return Status;
						}
						ExportResults.exportTestResult(
								"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
						
						driver.navigate().refresh();
						driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
						Thread.sleep(2000);	

					}
					
						LOGS.info(Thread.currentThread() +"Calling getLiveSubscriptionsDetailsContractPage method");
						
						Thread.sleep(14000);
						LivSubCount = SLocator("LiveSubScriptionCount").getText();
						LivSubCount = LivSubCount.replace("[", "");
						LivSubCount = LivSubCount.replace("]", "");

						try {
						
						if (LivSubCount == "0") {
							ActRes = "Live Subscriptions does not have products";
							LOGS.info(Thread.currentThread() +"Live Subscription Products are not available");
							count = count + 1;

						} else {
							SLocator("LiveSubScriptionContract").click();
							Thread.sleep(2000);
							driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
							Thread.sleep(3000);
							LOGS.info(Thread.currentThread() +"Available Live Subscription Products-->" + LivSubCount);
							// Status = "Pass";
							ActRes = "Live Subscriptions have products";
						}
						ImageName = "LiveSubscription";
						ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
						ExpRes = "Live Subscriptions should have products";
						ExportResults
						.exportTestResult("Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

									
						if (count == 0) {
							LOGS.info(Thread.currentThread() +"Product details in Live Subscriptions  :");
							// Executes IF loop only the Live Subscription count is more
							// than 5
							if (LivSubCount.contains("+")) {

								captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
								LOGS.info(Thread.currentThread() +"Captured Text-" + captureSubScrptCountStr);
								captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
								captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
								captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
								captureSubScrptCountStr = captureSubScrptCountStr.replace(" �", "");

								SLocator("LiveSubScriptionGoToList").click();
								Thread.sleep(2000);
								driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
								Thread.sleep(2000);
								LOGS.info(Thread.currentThread() +"Go To List will be performed in Live Subscription");
								ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
								LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products--->" + ActiveSubScrptCount);

								for (int i = 1; i <= ActiveSubScrptCount; i++) {

									String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
									String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
									LOGS.info(Thread.currentThread() +getSubProdName);

									String liveSubProdStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
									String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
									LOGS.info(Thread.currentThread() +liveSubProdStatus);
			 
									if(liveSubProdStatus.equalsIgnoreCase("Pending")) {
										ProductName.add(getSubProdName);
										LOGS.info(Thread.currentThread() +"Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName);
											
									}

								}

								driver.navigate().back();

							}else {
						
								Thread.sleep(2000);
						        ActiveSubScrptCount = Integer.parseInt(LivSubCount);
						        LOGS.info(Thread.currentThread() +"Total Active Live Subscription Products-->" + ActiveSubScrptCount);

						   for (int i = 1; i <= ActiveSubScrptCount; i++) {
							String activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom51Block'][1]//tr[@class='headerRow']//following::tr["
									+ i + "]/td[2]";
							String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
							LOGS.info(Thread.currentThread() +getSubProdName);

							String liveSubProdStatusPath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom51Block'][1]//tr[@class='headerRow']//following::tr["
									+ i + "]/td[3]";
							String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
							LOGS.info(Thread.currentThread() +liveSubProdStatus);
							
							if(liveSubProdStatus.equalsIgnoreCase("Pending")) {
								ProductName.add(getSubProdName);
								LOGS.info(Thread.currentThread() +"Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName);
									
							}


							}
						}

					}
							ImageName = "SubscriptionProdDetails";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							ExpRes = "Capture the Product details from Live Subscription section for the Business ID- "
									+ businessID;
							prodCount = ProductName.size();
							LOGS.info(Thread.currentThread() +"Available Active Product: " + ActiveSubScrptCount + " & Products are -" + productsCaptureHomePage);

							ActRes = ActiveSubScrptCount + " Products Available in Live Subscription Page. \nProducts are ->"
									+ productsCaptureHomePage;

							Status = "Pass";
							ExportResults.exportTestResult(
									"Live Subscription Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
							
				}
						catch(Exception e) {
							ImageName = "ContractPageFailure";
							ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
							LOGS.info(Thread.currentThread() +"Failed at Contracts page."+e.getMessage());
							Status = "Fail";
							return Status;
							
					
				}
							
			                    for(int p=0; p<ProductName.size();p++) {
								
								 if(ProductName.get(p).equalsIgnoreCase("Search (a la carte)")||ProductName.get(p).equalsIgnoreCase("Display (a la carte)")
										||ProductName.get(p).equalsIgnoreCase("Social (a la carte)")||ProductName.get(p).equalsIgnoreCase("Search - Guaranteed Clicks")
									    ||ProductName.get(p).equalsIgnoreCase("Performance Sync")||ProductName.get(p).equalsIgnoreCase("Managed Search")  
										||ProductName.get(p).equalsIgnoreCase("Social")||ProductName.get(p).equalsIgnoreCase("Display")) {
									
									productName = ProductName.get(p);
									LOGS.info(Thread.currentThread() +productName);
									LOGS.info(Thread.currentThread() +"SAMI ALA CARTE Products available");
									break;
								}
							}
							
							return productName;
            }catch(Exception e) {
            	ImageName = "SubscriptionProdDetailsFailure";
				ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
            	LOGS.info(Thread.currentThread() +"Failed While Getting Subscription Details."+e.getMessage());
				Status = "Fail";
				return Status;
				
               }	
				}


public String DomainProvisioning(String businessId, String Resultsfolderpath)throws Exception {
	String result="";
	pr.Resultsfolderpath = Resultsfolderpath;
	
	try {
	
	String captureSubScrptCountStr = "", LivSubCount = "",dudaSubscription="";
	productsCaptureHomePage = "";
	getSubscriptionID.clear();
	ProductName.clear();
	
	
	 try {

			Properties OR = pr.loadPropertiesFiles("Order");
		    SalesRep = OR.getProperty("OpsWizard");
		    LOGS.info("Login Sales Rep -> " + SalesRep);
		    
			SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
			
			LOGS.info("Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
			
			driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
			driver.switchTo().window(newWindowHandle.get(1));
			String TabSelected = driver.getTitle();
			LOGS.info("Tab Selected: " + TabSelected);
			driver.close();
			driver.switchTo().window(newWindowHandle.get(0));
			driver.navigate().refresh();
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);
			LOGS.info("Page Refreshed");
			
			
			
		} catch (Exception e) {
			LOGS.info("Some error in SF Login");
			//ExceptionMsg = "Some error in SF Login";
		}
	 
	
	 try {
    
    
    driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessId);
    LOGS.info("Entered BusinessId in search box");
    driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
    LOGS.info("Clicked on search button");
    Thread.sleep(4000);

	LOGS.info("aaaaaaaaaaaaaaaaaaa");
        driver.findElement(By.xpath("//td[text()='" + businessId + "']//parent::tr//th/a")).click();
        LOGS.info("Clicking on Account Link");
        Thread.sleep(2000);
        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
        driver.findElement(By.xpath("//span[text()='Details']")).click();
        LOGS.info("Selected Details Tab");
        
        ActRes = "Account Found";

        if (SalesRepType.equalsIgnoreCase("OpsWizard")) {
            driver.findElement(By.xpath("//span[text()='Details']")).click();
            LOGS.info("Clicking on Details Link for the " + SalesRepType + " Rep ");
            driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
            driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
            Thread.sleep(3000);
            LOGS.info("Clicked on Details Link ");
        }

    } catch (Exception e) {
    	ExceptionMsg = "Account Not Found";
        LOGS.info("Account Not Found");
        ActRes = "Account Not Found";
        Status = "Fail";
        count = count + 1;
    }
    ExportResults
            .exportTestResult("Account Verification :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
   
   
    LOGS.info("Reached at Account Page...");
	
	Thread.sleep(5000);
	if (count < 1) {
		// Contract Page
		Thread.sleep(2000);
		driver.navigate().refresh();
		driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
		Thread.sleep(2000);
		SLocator("ContractsLink").click();
		LOGS.info("Contracts link clicked in account details page");
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
				SLocator("ContractNolink"));
		Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
		Thread.sleep(2000);

		ExpRes = "Capture Contract Number";
		ImageName = "ContractLink";
		ImgName = ScreenshotPrinter.screenShot(ImageName,driver,pr.Resultsfolderpath);
		try {
			contractNumber=SLocator("ContractNolink").getText();
			ActRes = "Contract Number:" + contractNumber;
			LOGS.info(ActRes);

			SLocator("ContractNolink").click();
			LOGS.info("Contracts number link clicked in account details page");
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(2000);
			Status = "Pass";
		} catch (Exception e) {
			ActRes = "Error in Contracts";
			LOGS.info(ActRes);
			Status = "Fail";
			count = count + 1;
			
			ExceptionMsg = "Unable to click on Contract Page Link.";
			throw new Exception(ExceptionMsg);
		}
		ExportResults.exportTestResult(
				"Contract Number Details: ," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
		
		driver.navigate().refresh();
		driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
		Thread.sleep(2000);	

	}
	
		LOGS.info("On contract page---");
		
		Thread.sleep(7000);
		LivSubCount = SLocator("LiveSubScriptionCount").getText();
		LivSubCount = LivSubCount.replace("[", "");
		LivSubCount = LivSubCount.replace("]", "");

		try {
		
		if (LivSubCount == "0") {
			ActRes = "Live Subscriptions does not have products";
			LOGS.info("Live Subscription Products are not available");
			count = count + 1;

		} else {
			SLocator("LiveSubScriptionContract").click();
			Thread.sleep(2000);
			driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			Thread.sleep(3000);
			LOGS.info("Available Live Subscription Products-->" + LivSubCount);
			// Status = "Pass";
			ActRes = "Live Subscriptions have products";
		}
		ImageName = "LiveSubscription";
		ImgName = ScreenshotPrinter.screenShot(ImageName,driver, pr.Resultsfolderpath);
		ExpRes = "Live Subscriptions should have products";
		ExportResults
		.exportTestResult("Live Subscriptions:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);

					
		if (count == 0) {
			LOGS.info("Product details in Live Subscriptions  :");
			// Executes IF loop only the Live Subscription count is more
			// than 5
			if (LivSubCount.contains("+")) {

				captureSubScrptCountStr = SLocator("LiveSubScriptionGoToList").getText();
				LOGS.info("Captured Text-" + captureSubScrptCountStr);
				//captureSubScrptCountStr = captureSubScrptCountStr.replace("Go to list (", "");
				//captureSubScrptCountStr = captureSubScrptCountStr.replace(")", "");
				//captureSubScrptCountStr = captureSubScrptCountStr.replace("&nbsp;", "");
				//captureSubScrptCountStr = captureSubScrptCountStr.replace(" ï¿½", "");
				captureSubScrptCountStr = captureSubScrptCountStr.replaceAll("[^0-9]", "");

				SLocator("LiveSubScriptionGoToList").click();
				Thread.sleep(2000);
				driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
				Thread.sleep(2000);
				LOGS.info("Go To List will be performed in Live Subscription");
				ActiveSubScrptCount = Integer.parseInt(captureSubScrptCountStr);
				LOGS.info("Total Active Live Subscription Products--->" + ActiveSubScrptCount);

				for (int i = 1; i <= ActiveSubScrptCount; i++) {

					String activeSubProdNamePath = "//tr[contains(@class,'dataRow')][" + i + "]/td[2]";
					String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
					LOGS.info(getSubProdName);

					String subscriptionPath = "//tr[contains(@class,'dataRow')][" + i + "]/th";
					String subscription = driver.findElement(By.xpath(subscriptionPath)).getText();
					LOGS.info(subscription);
					
					String liveSubProdStatusPath = "//tr[contains(@class,'dataRow')][" + i + "]/td[3]";
					String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
					LOGS.info(liveSubProdStatus);
					
                  if(getSubProdName.equalsIgnoreCase("Smart Site - Pro")||getSubProdName.equalsIgnoreCase("Smart Site - Standard") ||
                		  getSubProdName.equalsIgnoreCase("Smart Site - Pro (Spread Billing)") || getSubProdName.equalsIgnoreCase("Smart Site - Standard (Spread Billing)")) {
						
						LOGS.info("Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName+ "SubscriptionID is :" + subscription);
						dudaSubscription = subscriptionPath;
						LOGS.info("Captured subscription xpath to be used while duda publishing");
						
					}

					if(/*liveSubProdStatus.equalsIgnoreCase("Pending")&&*/getSubProdName.equalsIgnoreCase("Included Domain w/ Website")) {
						
						LOGS.info("Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName+ "SubscriptionID is :" + subscription);
						Thread.sleep(3000);
						driver.findElement(By.xpath(subscriptionPath)).click();
						break;
					}

				}

				//driver.navigate().back();

			}else {
		
				Thread.sleep(2000);
		        ActiveSubScrptCount = Integer.parseInt(LivSubCount);
		        LOGS.info("Total Active Live Subscription Products-->" + ActiveSubScrptCount);

		   for (int i = 1; i <= ActiveSubScrptCount; i++) {
			String activeSubProdNamePath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom25Block'][1]//tr[@class='headerRow']//following::tr["
					+ i + "]/td[2]";
			String getSubProdName = driver.findElement(By.xpath(activeSubProdNamePath)).getText();
			LOGS.info(getSubProdName);
			
			String subscriptionPath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom25Block'][1]//tr[@class='headerRow']//following::tr["
					+ i + "]/th";
			String subscription = driver.findElement(By.xpath(subscriptionPath)).getText();
			LOGS.info(subscription);

			String liveSubProdStatusPath = "//div[@class='listHoverLinks']//following::div[@class='listRelatedObject Custom25Block'][1]//tr[@class='headerRow']//following::tr["
					+ i + "]/td[3]";
			String liveSubProdStatus = driver.findElement(By.xpath(liveSubProdStatusPath)).getText();
			LOGS.info(liveSubProdStatus);
			
			 if((getSubProdName.equalsIgnoreCase("Smart Site - Pro")||getSubProdName.equalsIgnoreCase("Smart Site - Standard")||getSubProdName.equalsIgnoreCase("Smart Site - Pro (Spread Billing)") || getSubProdName.equalsIgnoreCase("Smart Site - Standard (Spread Billing)"))) {
					
					LOGS.info("Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName+ "SubscriptionID is :" + subscription);
					dudaSubscription = subscriptionPath;
					LOGS.info("Captured subscription xpath to be used while duda publishing");
					
				}
			
			if(/*liveSubProdStatus.equalsIgnoreCase("Pending")&&*/getSubProdName.equalsIgnoreCase("Included Domain w/ Website")) {
				
				LOGS.info("Product Status is :" + liveSubProdStatus + "Product Name is :" + getSubProdName+ "SubscriptionID is :" + subscription);
				Thread.sleep(2000);
				driver.findElement(By.xpath(subscriptionPath)).click();
				break;
			}


			}
		}

	}
			ImageName = "SubscriptionProdDetails";
			ImgName = ScreenshotPrinter.screenShot(ImageName,driver,pr.Resultsfolderpath);
			ExpRes = "Capture the Product details from Live Subscription section for the Business ID- "
					+ businessID;
			prodCount = ProductName.size();
			LOGS.info("Available Active Product: " + ActiveSubScrptCount + " & Products are -" + productsCaptureHomePage);

			ActRes = ActiveSubScrptCount + " Products Available in Live Subscription Page. \nProducts are ->"
					+ productsCaptureHomePage;

			Status = "Pass";
			ExportResults.exportTestResult(
					"Live Subscription Details:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
			
}
		catch(Exception e) {
			
			Status = "Fail";
			LOGS.info("Failed at Contracts page.");
			ExceptionMsg = "Couldn't Fetch Product Detials from Contract Page.";
			throw new Exception(ExceptionMsg);
			
	
}
		try {

		int randomPin = (int) (Math.random() * 1000000);
		String num = String.valueOf(randomPin);
		LOGS.info("Random Number generated is: "+randomPin);
		
		String domain = "DomainProvisionTest"+num+".com";
		LOGS.info("Domain to be entered is: "+domain);
   
	Thread.sleep(6000);
		
    driver.findElement(By.xpath("(//input[contains(@name,'provision_domain')])[1]")).click();
    LOGS.info("Clicked on Provision Button");
    
    Thread.sleep(7000);
    LOGS.info("Sleeping----");

    
    //Handling the windows POP-up
    String p = driver.getWindowHandle();
    LOGS.info(p);
    Set<String> s = driver.getWindowHandles();
    Iterator<String> I1= s.iterator();
    while(I1.hasNext()) {
    	
    	String popupHandle=I1.next().toString();
    	
    	if(!popupHandle.contains(p)) {
    		
    		LOGS.info("jjjjjjjjjjjjjjjjjj");
    		driver.switchTo().window(popupHandle);
    		
    	}
    }
    	
    
   
   Thread.sleep(2000);
   driver.findElement(By.xpath("//input[@type='text']")).clear();
   LOGS.info("Cleared the Text box");
   driver.findElement(By.xpath("//input[@type='text']")).sendKeys(domain);
   LOGS.info("Entered domain value.");
   
   Thread.sleep(2000);
   driver.findElement(By.xpath("//button[contains(text(),'Verify Availability')]")).click();
   LOGS.info("Clicked on Verify Availability button!");
   
   Thread.sleep(2000);
   String validation = driver.findElement(By.xpath("//span[@class='blackAlert']")).getText();
   LOGS.info(validation);
   if(validation.equalsIgnoreCase("The domain "+ domain +" is available! Click 'Provision' to buy the Domain")) {
	   
	   
	   driver.findElement(By.xpath("(//input[@value='Provision'])[2]")).click();
	   LOGS.info("Clicked on Provision button!");
	   Thread.sleep(2000);
	   
   }
   
   else {
	   
	   LOGS.info("Domain was not validated, please try provisioning again!");
	   
   }
   
   Thread.sleep(2000);
   Alert prompt = driver.switchTo().alert();
   prompt.accept();
   LOGS.info("Accepted the alert.");
   
   Thread.sleep(2000);
   driver.switchTo().window(p);
   LOGS.info("Switched back to the subscription page");
   Thread.sleep(4000);
   driver.navigate().refresh();
   LOGS.info("Refreshed---1");
   Thread.sleep(4000);
   driver.navigate().refresh();
   LOGS.info("Refreshed---2");
   Thread.sleep(4000);
   driver.navigate().refresh();
   LOGS.info("Refreshed---3");
   
   if(driver.findElement(By.xpath("//div[@id='00N5A00000HICx0_ileinner']")).getText().equalsIgnoreCase(domain)) {
	   
       LOGS.info("Verified, the domain is updated on the Subscription page!!");
	   
   }
   
   else {
	   
	   LOGS.info("Domain not updated on the subscription page.");
	   
   }
   
   
   Thread.sleep(4000);
   driver.findElement(By.xpath("//div[@id='CF00N5A00000HEW4J_ileinner']/a")).click();
   LOGS.info("Clicked on Contract link..");
   
   Thread.sleep(12000);
   driver.findElement(By.xpath(dudaSubscription)).click();
   LOGS.info("Clicked on Website subscription..");
   
   Thread.sleep(5000);
   LOGS.info("Calling DUDApublishing method.");
   DUDApublishing("DomainProvisionTest"+num);
   
   
 }
	catch(Exception e) {
	LOGS.info("Domain Provision and Publish: Failed due to application Slowness");
	ExceptionMsg = "Domain Provision and Publish: Failed due to application Slowness";
	LOGS.info(e.getMessage());
	
		}
   
	}catch(Exception e) {
		result ="fail";
		LOGS.info("Domain Provision and Publish: Failed due to application Slowness");
		ExceptionMsg = "Domain Provision and Publish: Failed due to application Slowness";
		LOGS.info(e.getMessage());
				 return result;
			}
	return result;
}

public void DUDApublishing(String domain) throws Exception {
	try {
	
	LOGS.info("Inside DUDApublishing method.");

	driver.navigate().refresh();
	 Thread.sleep(7000);
	driver.findElement(By.xpath("(//input[@value='Website Details'])[1]")).click();
	LOGS.info("Clicked on Website Details button");	
	
	Thread.sleep(9000);
	
	ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(tabs.get(1));
	LOGS.info("Switched to new tab---1");
	
    Thread.sleep(10000);
	driver.findElement(By.xpath("//input[@id='1001510.0']")).click();
	LOGS.info("Selected Smart Horizontal templete.");
	
	Thread.sleep(6000);
	driver.findElement(By.xpath("(//input[@value='Create'])[1]")).click();
	LOGS.info("Clicked on Create button");
	
	Thread.sleep(9000);
	Thread.sleep(15000);
	driver.close();
	driver.switchTo().window(tabs.get(0));
	driver.navigate().refresh();
	Thread.sleep(8000);
	driver.findElement(By.xpath("(//input[@value='Website Details'])[1]")).click();
	LOGS.info("Clicked on Website Details button");	
	
	Thread.sleep(9000);
	tabs = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(tabs.get(1));
	LOGS.info("Switched to new tab---2");
	
	Thread.sleep(10000);
	 driver.navigate().refresh();
	 Thread.sleep(10000);
	driver.findElement(By.xpath("//input[@value='Edit Site']")).click();
	LOGS.info("Clicked on Edit site button");
	
	Thread.sleep(6000);
	driver.close();
	driver.switchTo().window(tabs.get(0));
	
	Thread.sleep(5000);
	tabs = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(tabs.get(1));
	LOGS.info("Switched to new tab---3");
	
	   Thread.sleep(5000);
	   driver.navigate().refresh();
	  driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
			
	
	/*driver.switchTo().frame(12);
	LOGS.info("Switched to Frame 13");*/
		
    Thread.sleep(10000);
    LOGS.info("Accepted the alert------.");
	driver.findElement(By.xpath("//span[text()='Publish']")).click();
	LOGS.info("Clicked on Publish button");
	Thread.sleep(20000);
	driver.findElement(By.xpath("//input[@name='custumDomain']")).clear();
	LOGS.info("Cleared textbox");
	driver.findElement(By.xpath("//input[@name='custumDomain']")).sendKeys("www."+domain+".hibuwebsites.com");
	LOGS.info("Entered the domain URL");
	Thread.sleep(5000);
	driver.findElement(By.xpath("(//div[text()='Save'])[2]")).click();
	LOGS.info("Clicked on save button");
	
	Thread.sleep(8000);
	driver.navigate().refresh();
	driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	Thread.sleep(9000);
	driver.findElement(By.xpath("//span[text()='Republish']")).click();
	LOGS.info("Clicked on Republish button");
	
	/*Thread.sleep(10000);
	driver.close();
	driver.switchTo().window(tabs.get(0));
	
	driver.navigate().refresh();
	driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
    Thread.sleep(10000);	
    
    driver.findElement(By.xpath("(//input[@value='Website Details'])[1]")).click();
	LOGS.info("Clicked on Website Details button");	 
	
	Thread.sleep(9000);
	tabs = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(tabs.get(1));
	LOGS.info("Switched to new tab---****");
	
	Thread.sleep(9000);
	driver.findElement(By.xpath("//input[@value='Edit Site']")).click();
	LOGS.info("Clicked on Edit site button");
	
	Thread.sleep(7000);
	driver.close();
	driver.switchTo().window(tabs.get(0));
	
	Thread.sleep(3000);
	tabs = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(tabs.get(1));
	LOGS.info("Switched to new tab---3");*/
	
	   Thread.sleep(9000);
	   driver.navigate().refresh();
	   driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	   Thread.sleep(15000);	
	  
    //driver.findElement(By.xpath("//label[text()='Settings']")).click();
    driver.findElement(By.xpath("//span[@data-name='icon-left-settings']//*[name()='svg']")).click();
    Thread.sleep(6000);
    driver.findElement(By.xpath("//label[normalize-space()='Site URL']")).click();
    Thread.sleep(6000);
    driver.findElement(By.xpath("//div[text()='Change site URL' ]")).click();
    
    Thread.sleep(10000);
	driver.findElement(By.xpath("//input[@name='custumDomain']")).clear();
	LOGS.info("Cleared textbox");
	   Thread.sleep(6000);
	driver.findElement(By.xpath("//input[@name='custumDomain']")).sendKeys("www."+domain+".com");
	LOGS.info("Entered the domain URL");
	   Thread.sleep(6000);
	driver.findElement(By.xpath("(//div[text()='Save'])[2]")).click();
	LOGS.info("Clicked on save button");
	driver.findElement(By.xpath("//div[@class='backBtn']")).click();
	
	Thread.sleep(8000);
	driver.navigate().refresh();
	driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	Thread.sleep(9000);
	driver.findElement(By.xpath("//span[text()='Republish']")).click();
	LOGS.info("Clicked on Republish button");
	
	Thread.sleep(8000);
	driver.navigate().refresh();
	driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
	Thread.sleep(7000);
	driver.findElement(By.xpath("//span[text()='Republish']")).click();
	LOGS.info("Clicked on Republish button");
    
	Thread.sleep(9000);
	driver.close();
	driver.switchTo().window(tabs.get(0));
	
	driver.navigate().refresh();
	driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
    Thread.sleep(8000);
    
    LOGS.info("Duda publishing completed");
	} catch(Exception e) {
		LOGS.info("Domain Publish: Failed due to application Slowness");
		ExceptionMsg = "Domain Publish: Failed due to application Slowness";
		LOGS.info(e.getMessage());
	}
		
}


public  void questionnaireCompletionForLocalRankingProducts(String CaseNo,String Product) throws Exception{
	try {

		Properties OR = pr.loadPropertiesFiles("Order");
	    SalesRep = OR.getProperty("DSCRep");
	    LOGS.info("Login Sales Rep -> " + SalesRep);
		SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
		LOGS.info("Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
		
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(newWindowHandle.get(1));
		String TabSelected = driver.getTitle();
		LOGS.info("Tab Selected: " + TabSelected);
		driver.close();
		driver.switchTo().window(newWindowHandle.get(0));
		driver.navigate().refresh();
		driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
		Thread.sleep(2000);
		LOGS.info("Page Refreshed");
		
		
		
	} catch(Exception e) {
		LOGS.error("Exception during SF Login!!!" +e);
		ExceptionMsg= "Exception during SF Login!!!";
		LOGS.info(Thread.currentThread() + "," +"Exception during SF Login!!!" + e.getStackTrace());
		
	}
 

 try {


Thread.sleep(5000);
driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(CaseNo);
driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
// driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();
driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
Thread.sleep(5000);
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
Thread.sleep(5000);

// Below line will be clicking on first existence 0f the cases
String clickCheck=driver.getCurrentUrl();
try {
LOGS.info("Clicking on cases link");
driver.findElement(By.xpath("//div[@id='Case_body']//following::tr[1]//th[1]/a")).click();
LOGS.info("Clicked on cases link"); 

	LOGS.info(Thread.currentThread() + "," +"Clicked on cases link");
	

}
catch(Exception e)
{
   driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
   driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
   Thread.sleep(8000);
	String actualCheck = driver.getCurrentUrl();
	if(clickCheck.trim().equalsIgnoreCase(actualCheck)) {
		LOGS.info("Case Click is Failed");
		e.printStackTrace();
	}
		else
			LOGS.info("Case Click is happened with exception");
	
}

driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
Thread.sleep(10000);
   
Status = "Pass";
ExpRes = "Account Must be Found";
ActRes = "Accound Found";
ExportResults.exportTestResult(
    "Account Search" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);


} catch (Exception e) {
   LOGS.info("Account Not Found");
   ActRes = "Account Not Found";
   Status = "Fail";
   
}
 
 String caseurl = driver.getCurrentUrl();
 
try {
    
    driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
     driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
     Thread.sleep(5000);
    SLocator("Cases_Detailslink").click();
    LOGS.info(Thread.currentThread() + "," +"Clicked on Details Tab");    
    Thread.sleep(3000);
    
    driver.findElement(By.xpath("//input[@title='New Consultation Information']")).click();
	LOGS.info("Clicked on New Consultation Information button");
	driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
      driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
      Thread.sleep(5000);
      
      driver.findElement(By.xpath("//span[@class='dateFormat']")).click();
      LOGS.info("Selected original date on New consultation information page.");  
      Thread.sleep(3000);
     
      Select ConsultInfo;   
      ConsultInfo = new Select(driver.findElement(By.xpath("//select[@name='00N3100000Gb7I6']")));
      ConsultInfo.selectByVisibleText("10:00 PM");
      LOGS.info("apptTime is selected as 5:00PM"); 
      Thread.sleep(3000);
      
      ConsultInfo = new Select(driver.findElement(By.xpath("//select[@name='00N3100000Gb7I9']")));
      ConsultInfo.selectByVisibleText("Scheduled");
      LOGS.info("ConsultationType is selected as Scheduled");
      Thread.sleep(3000);
      
      /*ConsultInfo = new Select(driver.findElement(By.xpath("//select[@name='00N3100000GbmBk']")));
      ConsultInfo.selectByVisibleText("Successful");
      LOGS.info("ConsultationOutcome is selected as Successful");
      Thread.sleep(3000);*/
       	                   				 
	
	driver.findElement(By.xpath("(//input[@value=' Save '])[2]")).click();
	LOGS.info("Saving the consultation");
    LOGS.info(Thread.currentThread() + "," +"Consultation Information Created Successfully");
		     				
	 driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
     driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
     Thread.sleep(10000);
   
    Status = "Pass";
    ExpRes = "Consultation Outcome should be Selected as Successful";
    ActRes = "Consultation Outcome should be Selected as Successful: "+ QuoteNumber+"- "+ productName;
    ExportResults.exportTestResult(
        "Consultation Outcome:," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
 
	}
	    catch(Exception e){
		String casecururl = driver.getCurrentUrl();
		if(caseurl.equalsIgnoreCase(casecururl)) {
			LOGS.info("Consultation Outcome is saved with exception");
		}else
			e.printStackTrace();
	}
    
    
driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
Thread.sleep(5000);
driver.findElement(By.xpath("//div[@id='CF00N3100000Gb7I7_ileinner']/a")).click();
LOGS.info("Clicked on Case link page again");

driver.findElement(By.xpath("(//div/a[text()='[Change]'])[2]")).click();
Thread.sleep(4000);
driver.findElement(By.xpath("//input[@id='newOwn']")).sendKeys("DSCKOPRep");
driver.findElement(By.xpath("//input[@title='Save']")).click();
LOGS.info("Changed the Case owner");
LOGS.info(Thread.currentThread() + "," +"Changed the Case owner");


driver.manage().timeouts().pageLoadTimeout(70, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
Thread.sleep(10000);
   
   Actions actions;
   WebElement elementLocator;
   Select ProductSet;
   actions = new Actions(driver);
   elementLocator = driver.findElement(By.xpath("//div[@id='00N3100000FvmJu_ileinner']"));
   Thread.sleep(5000);
   actions.doubleClick(elementLocator).perform();
   
   Thread.sleep(3000);
   ProductSet = new Select(driver.findElement(By.xpath("//select[@id='00N3100000FvmJu']")));
   ProductSet.selectByVisibleText("Local Ranking");
   LOGS.info("Selected product set as Local Ranking");
   LOGS.info(Thread.currentThread() + "," +"Selected product set as Local Ranking");

   
   driver.findElement(By.xpath("//input[@value='OK']")).click();
   LOGS.info("Clicked on OK button");
   
   /*Thread.sleep(2000);
   elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003f5LB_ileinner']"));
   actions.doubleClick(elementLocator).perform();
   
   ProductSet = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003f5LB']")));
   ProductSet.selectByVisibleText("Invalid Keywords");
   LOGS.info("Selected Local Ranking as Invalid Keywords");*/
   
   Thread.sleep(3000);
   actions = new Actions(driver);
   elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003etkg_ileinner']"));
   actions.doubleClick(elementLocator).perform();
   
   ProductSet = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003etkg']")));
   ProductSet.selectByVisibleText("Processing");
   LOGS.info("Selected GMB Status as Processing");
   				 			   
   Select rcf;
   
   Thread.sleep(3000);
   String listingsRCF = driver.findElement(By.xpath("//div[@id='00N0S000003gw1E_ileinner']")).getText();
   LOGS.info("listingsRCF: "+listingsRCF);
   
     if(listingsRCF.equals(" ")||listingsRCF.equals("Opt In")) {
   	
   	actions = new Actions(driver);
   	elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003gw1E_ileinner']"));
   	actions.doubleClick(elementLocator).perform();
   	
   	rcf = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003gw1E']")));
   	rcf.selectByVisibleText("Opt Out");
    LOGS.info("Selected listingsRCF as Opt Out");
   	
   	
     }
     
     Thread.sleep(3000);
     String socialRCF = driver.findElement(By.xpath("//div[@id='00N0S000003gw1G_ileinner']")).getText();
     LOGS.info("socialRCF: "+socialRCF);
     
         if(socialRCF.equals(" ")||socialRCF.equals("Opt In")) {
     	
     	actions = new Actions(driver);
     	elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003gw1G_ileinner']"));
     	actions.doubleClick(elementLocator).perform();
     	
     	rcf = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003gw1G']")));
     	rcf.selectByVisibleText("Opt Out");
         LOGS.info("Selected socialRCF as Opt Out");
     	
     	
     }
     
     Thread.sleep(3000);
     String displayRCF = driver.findElement(By.xpath("//div[@id='00N0S000003gw1D_ileinner']")).getText();
     LOGS.info("displayRCF: "+displayRCF);
     
        if(displayRCF.equals(" ")||displayRCF.equals("Opt In")) {
     	
     	actions = new Actions(driver);
     	elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003gw1D_ileinner']"));
     	actions.doubleClick(elementLocator).perform();
     	
     	rcf = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003gw1D']")));
     	rcf.selectByVisibleText("Opt Out");
         LOGS.info("Selected displayRCF as Opt Out");
     	
     	
     }
   
   Thread.sleep(3000);
   String searchRCF = driver.findElement(By.xpath("//div[@id='00N0S000003gw1F_ileinner']")).getText();
   LOGS.info("searchRCF: "+searchRCF);
   
   if(searchRCF.equals(" ")||searchRCF.equals("Opt In")) {
   	
   	actions = new Actions(driver);
   	elementLocator = driver.findElement(By.xpath("//div[@id='00N0S000003gw1F_ileinner']"));
   	actions.doubleClick(elementLocator).perform();
   	
   	rcf = new Select(driver.findElement(By.xpath("//select[@id='00N0S000003gw1F']")));
   	rcf.selectByVisibleText("Opt Out");
       LOGS.info("Selected SearchRCF as Opt Out");
   	
   	
   }
   
   Thread.sleep(4000);
   driver.findElement(By.xpath("(//input[@title='Save'])[2]")).click();
   LOGS.info("Saving the case");
   LOGS.info(Thread.currentThread() + "," +"Saving the case with all required prerequisites fileds..");
   Status = "Pass";
   ExpRes = "All the Prerequisites fileds must be filled";
   ActRes = "All the Prerequisites fileds are filled";
   ExportResults.exportTestResult(
       "Prerewuisites on DSC Case" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);

   
   driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
   driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
   Thread.sleep(15000);
   
   driver.findElement(By.xpath("(//input[@value='Questionnaire'])[1]")).click();
   LOGS.info("Clicked on Questionnaire button");
   LOGS.info(Thread.currentThread() + "," +"Clicked on Questionnaire button");

   
   driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
   driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
   Thread.sleep(10000);
   
  /* Alert CaseAlert = driver.switchTo().alert();
   
   if(CaseAlert.getText().equals("")) {*/
	  
	ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
	driver.switchTo().window(newWindowHandle.get(1));
	String TabSelected = driver.getTitle();
	LOGS.info("Tab Selected: " + TabSelected);	
	   LOGS.info(Thread.currentThread() + "," +"Tab Selected:" + TabSelected);
	   Status = "Pass";
	   ExpRes = "On Clicking Questionnaire button user must navigate to Questionnaire Page";
	   ActRes = "Questionnaire page opened successfully";
	   ExportResults.exportTestResult(
	       "Verify Questionnaire Page open successfully" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);

	Thread.sleep(7000);
	
	
		try {
	// Hema - dropDown list
		Thread.sleep(5000);
	driver.findElement(By.xpath("//*[@id='Save']")).click();
	Thread.sleep(5000);

	List<WebElement> pickList = driver.findElements(By.xpath("//select[@class='picklist']"));
	int selectSize = pickList.size();
	System.out.println("Select query list : "+ selectSize);
	   LOGS.info(Thread.currentThread() + "," +"Tab Selected:" + TabSelected);

	int count = 0;
	
	for(WebElement slect : pickList) {
					
		try {
			if(driver.findElement(By.xpath("//tr[contains(@style,'background: #fff')]/td/table/tbody/tr/td[2]/select[@class='picklist']")).isDisplayed()){}
		   else{		
				Select dropdownPicklist = new Select(slect);
				dropdownPicklist.selectByIndex(1);
				driver.manage().timeouts().implicitlyWait(07, TimeUnit.SECONDS);
				System.out.println("###########");
				 LOGS.info(Thread.currentThread() +"DropDown Selected!!");
			}
			
			
		  } catch (Exception e) {		
		}
		
		count++;
		
	}
	 Status = "Pass";
	 ExpRes = "All the required DropDown related quesions must be answered";
	 ActRes = "All the required DropDown related quesions are answered";
	 ExportResults.exportTestResult(
	 "Verify all DropDwon type Questions are answered" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);

	 Thread.sleep(2000);
	 if(driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).isDisplayed()) {
		driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).sendKeys("3197903023");
		LOGS.info("Entered 10 digit phone number.");
		LOGS.info(Thread.currentThread() + "," +"Entered 10 digit phone number.");
	 }
	 
	
	 
	 driver.findElement(By.xpath("//*[@id='Save']")).click();
	 Thread.sleep(6000);
	
	//Sudheer - TextBox Answers

	List<WebElement> textArea = driver.findElements(By.xpath("//textarea[contains(@name,'texta360S00000')]"));
	int textAreaSize = textArea.size();
	System.out.println("Select query list : "+ textAreaSize);
	 count = 0;
	
	for(WebElement textbox : textArea) {
		
		try {
			 driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
			 
			if(driver.findElement(By.xpath("//tr[contains(@style,'background: #fff')]/td/table/tbody/tr/td[2]/textarea")).isDisplayed()){
				
			}
			else if(textbox.isDisplayed()) {

		    	String text = textbox.getText();
		    	if(text.isEmpty() || (textbox.isDisplayed() && text.isEmpty()) ) {
		    		System.out.println("Entering the Text: Test");
		 		   LOGS.info(Thread.currentThread() + "," +"Entering the Text: Test");
		    		textbox.sendKeys("Test");
		    		 						    		 
		    	}
		      
		    	else
		    		System.out.println("Text is already Present: "+ text);
		    							    	
			}
		    else{
		    	System.out.println("Hidden Element.");
		    }
			
		  } catch (Exception e) {
			
			  LOGS.info(Thread.currentThread()+"Searching for Unanswered TextBox Related Questions");
			  driver.findElement(By.xpath("//*[@id='Save']")).click();
			  driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				 LOGS.info(Thread.currentThread() +"Saving..");
				 
			 // ExceptionMsg = "Exception while filling the Text Boxes in Questionnaire.";
			  						}
		
		System.out.println("Present Iteration number: "+ count+" Out of: "+textAreaSize);
		count++;
	}
	Status = "Pass";
	   ExpRes = "All the required TextBox related quesions must be answered";
	   ActRes = "All the required TextBox related quesions are answered";
	   ExportResults.exportTestResult(
	       "Verify all TextBox type Questions are answered" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);

	
	 System.out.println("TextBox count the Value : "+ count);
	 driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	 driver.findElement(By.xpath("//*[@id='Save']")).click();
	  driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
	 
	 					
	 //Thread.sleep(10000);
	/*try {
		driver.navigate().refresh();
		LOGS.info(Thread.currentThread() +"refreshing the page");
		Thread.sleep(4000);
		 Alert alert = driver.switchTo().alert();
	     String alertText = alert.getText();
	        System.out.println("Alert data: " + alertText);
	        alert.accept();
		Thread.sleep(20000);
		driver.manage().timeouts().pageLoadTimeout(90,TimeUnit.SECONDS );
		  LOGS.info(Thread.currentThread() +"Refreshed Page!!");
	
	 
	 }
	 catch(UnhandledAlertException f) {
		 
		 LOGS.info(f);
		 LOGS.info(Thread.currentThread() +"InSide Exception Alert Catch Block!!");
	     
	 }*/
	 
	 driver.findElement(By.xpath("//*[@id='Save']")).click();
	 Thread.sleep(6000);
	 

	//RadioButton Answers

	 List<WebElement> radioButton = driver.findElements(By.xpath("//div[@class='switch-field']/label[text()='No']"));
	 int radioButtonSize = radioButton.size();
	 System.out.println("Select query list : "+ radioButtonSize);
	
	 
	 for(WebElement radiobtn : radioButton) {
	 	
	 	try {
	 		driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
	 		LOGS.info(radiobtn.getText());
	 		if(radiobtn.isDisplayed()) {
	 			  
	 	    		System.out.println("Selecting the RadioButton");
			 		   LOGS.info(Thread.currentThread() + "," +"Selecting the RadioButton");

	 	    		radiobtn.click();
	 	    		Thread.sleep(4000);
	 	    		
	 		}
	 	    else{
	 	    	System.out.println("Hidden Element.");
	 	    }
	 	  } catch (Exception e) {		
	 	}
	 	
	 	System.out.println("Present Iteration number: "+ count+" Out of: "+radioButtonSize);
	 	count++;
	 }

	  System.out.println("RadioButton count Value : "+ count);
	  driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	 
		Status = "Pass";
		   ExpRes = "All the required RadioButton related quesions must be answered";
		   ActRes = "All the required RadioButton related quesions are answered";
		   ExportResults.exportTestResult(
		       "Verify all RadioButton type Questions are answered" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
			
	  driver.findElement(By.xpath("//*[@id='Save']")).click();
	  Thread.sleep(6000);
	 
	
	//Kadambaree - Code for Checkbox
	
	  List<WebElement> CheBoxList = driver.findElements(By.xpath("//div/table/tbody/tr/td[2]/"
				+ "div[1]/label/div[@class='control_indicator']"));
		int CheckBoxCount = CheBoxList.size();
		System.out.println("Select query list : "+ CheckBoxCount);
		int counter = 0;
		
		for(WebElement select : CheBoxList) {

			try {
				driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
				if(select.isDisplayed()){
					select.click();
					System.out.println("CheckBox Clicked");
			 		   LOGS.info(Thread.currentThread() + "," +"CheckBox Clicked");

					Thread.sleep(2000);
					
				}
				
				else
				{
					System.out.println("No More CheckBox Found!!");	
				}
					}
			
			  catch (Exception e) {		
				  LOGS.info("Hidden CheckBox");
			}
			
			counter++;
			
		}
		
		System.out.println("print the Value : "+ counter);
		System.out.println("print the Value : "+ counter);
		Status = "Pass";
		   ExpRes = "All the required CheckBox related quesions must be answered";
		   ActRes = "All the required CheckBox related quesions are answered";
		   ExportResults.exportTestResult(
		       "Verify all CheckBox type Questions are answered" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
		driver.findElement(By.xpath("//*[@id='Save']")).click();
		Thread.sleep(6000);
	 
		// Priyanka - Mandatory Questions Non-Website
		
		
        
        int randomPin = (int) (Math.random() * 1000);
		String num = String.valueOf(randomPin);
		LOGS.info("Random Number generated is: "+randomPin);
		String webAddress = "questionnairetesting"+num+".com";
		LOGS.info("Website address to be entered is: "+webAddress);
		
        if(Product.equalsIgnoreCase("Online Foundation Solutions")||Product.equalsIgnoreCase("Synchronized Marketing Solutions")) {
        driver.findElement(By.xpath("//*[@id='Save']")).click();
		Thread.sleep(5000);
		
		if(driver.findElement(By.xpath("//div/i[contains(text(),'include / continue to include')]/ancestor::td/following-sibling::td/select")).isDisplayed()) {
			Select drop = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'include / continue to include')]/ancestor::td/following-sibling::td/select")));
			drop.selectByIndex(2);
			System.out.println("Selecting particular DropDwon Question");
			LOGS.info(Thread.currentThread() + "," +"Selecting particular DropDown Question");
			
			}
			
			if(driver.findElement(By.xpath("//div[contains(text(),'Local Ranking question to feed over')]/ancestor::td/following-sibling::td/select")).isDisplayed()){
				Select drop = new Select(driver.findElement(By.xpath("//div[contains(text(),'Local Ranking question to feed over')]/ancestor::td/following-sibling::td/select")));
				drop.selectByIndex(0);
				System.out.println("Selecting particular DropDwon Question 2");
				LOGS.info(Thread.currentThread() + "," +"Selecting particular DropDown Question 2");
			}
		
		System.out.println("print the Value : "+ count);
							 
		 Thread.sleep(2000);
		 if(driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).isDisplayed()) {
			driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).clear();
			driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).sendKeys("facebook.com/test");
			LOGS.info("Entered Facebook URL.");
			LOGS.info(Thread.currentThread() + "," +"Entered Facebook URL");
		 }
		 
		 driver.findElement(By.xpath("//*[@id='Save']")).click();
		 Thread.sleep(6000);

		Select s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Scheduled or Point of Sale')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Scheduled");
		LOGS.info("Selected the consultation type on questionnaire");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is this a Local Ranking pilot order?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is this a Local Ranking pilot order?");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is the order for')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("No");
		LOGS.info("Selected No for Is the order for");


		s = new Select(driver.findElement(By.xpath("(//div/i[contains(text(),'Is the business marijuana')]/ancestor::td/following-sibling::td/select)[1]")));
		s.selectByVisibleText("No");
		LOGS.info("Selected No for Is the business marijuana");


		s = new Select(driver.findElement(By.xpath("//div[contains(text(),'Is there an existing website we can reference on the call?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is there an existing website we can reference on the call?");

		Thread.sleep(3000);
		driver.findElement(By.xpath("//textarea[@name='texta360S0000003BryQAE']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S0000003BryQAE']")).sendKeys(webAddress);
		LOGS.info("Website address entered is: "+webAddress);


		driver.findElement(By.xpath("//textarea[@name='texta360S000003fpa5QAA']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S000003fpa5QAA']")).sendKeys(webAddress);
		LOGS.info("URL entered is: "+webAddress);


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'What kind of website does the client have?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("3rd Party Website");
		LOGS.info("Selected 3rd Party Website for what kind of website does the client have");


		s = new Select(driver.findElement(By.xpath("//div[contains(text(),'We will need access to edit your website in order to optimize it for search engines. Do you have the admin access login information for your website available?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for We will need access to edit your website in order to");


		driver.findElement(By.xpath("//textarea[@name='texta360S000003fb57QAA']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S000003fb57QAA']")).sendKeys(webAddress);
		LOGS.info("Website login URL: "+webAddress);


		driver.findElement(By.xpath("//textarea[@name='texta360S000003fb5CQAQ']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S000003fb5CQAQ']")).sendKeys("username");
		LOGS.info("Username entered");


		driver.findElement(By.xpath("//input[@name='texta360S000003fb5HQAQ']")).clear();
		driver.findElement(By.xpath("//input[@name='texta360S000003fb5HQAQ']")).sendKeys("Password1");
		LOGS.info("Password entered");
		driver.findElement(By.xpath("//input[@name='texta360S000003fb5HQAQconfirm']")).sendKeys("Password1");
		LOGS.info("Confirmed password");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Login into the Listings Dashboard.')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Log into listings");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'What Listings / Reputation package does the client have?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Standard");
		LOGS.info("Selected Standard for What Listings / Reputation package does the client have?");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Were the Listings / Reputation connection processes completed with the client (FB Live / GMB Initiated per Connection section)?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Hibu Investigating or Still Processing");
		LOGS.info("Selected Hibu Investigating or Still Processing for Were the Listings / Reputation connection processes completed");


		s = new Select(driver.findElement(By.xpath("//select[@id='a360S000000HY66QAG']")));
		s.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is there a website on the order?");


		s = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is client sending in assets?')]/ancestor::td/following-sibling::td/select")));
		s.selectByVisibleText("Non-Critical Assets");
		LOGS.info("Selected N/A for Is client sending in assets?");


		s = new Select(driver.findElement(By.xpath("(//div/i[contains(text(),'Final GMB Status:')]/ancestor::td/following-sibling::td/select)[5]")));
		s.selectByVisibleText("Processing");
		LOGS.info("Selected Processing for Final GMB Status:");
		   LOGS.info(Thread.currentThread() + "," +"Answred All Mandatory Questions..");


        }
        
        else if(Product.equalsIgnoreCase("Smart Presence Solutions")||Product.equalsIgnoreCase("Smart Synchronized Solutions")){
		
        	if(driver.findElement(By.xpath("//div/i[contains(text(),'include / continue to include')]/ancestor::td/following-sibling::td/select")).isDisplayed()) {
				Select drop = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'include / continue to include')]/ancestor::td/following-sibling::td/select")));
				drop.selectByIndex(2);
				System.out.println("Selecting particular DropDwon Question");
				LOGS.info(Thread.currentThread() + "," +"Selecting particular DropDown Question");
				
				}
				
				if(driver.findElement(By.xpath("//div[contains(text(),'Local Ranking question to feed over')]/ancestor::td/following-sibling::td/select")).isDisplayed()){
					Select drop = new Select(driver.findElement(By.xpath("//div[contains(text(),'Local Ranking question to feed over')]/ancestor::td/following-sibling::td/select")));
					drop.selectByIndex(0);
					System.out.println("Selecting particular DropDwon Question 2");
					LOGS.info(Thread.currentThread() + "," +"Selecting particular DropDown Question 2");
				}
			
			System.out.println("print the Value : "+ count);
			
			 Thread.sleep(2000);
			 if(driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).isDisplayed()) {
				driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).clear();
				driver.findElement(By.xpath("//textarea[@name='texta360S0000003BsOQAU']")).sendKeys("facebook.com/test");
				LOGS.info("Entered Facebook URL.");
				LOGS.info(Thread.currentThread() + "," +"Entered Facebook URL");
			 }
			
			
			 Thread.sleep(2000);
			 if(driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).isDisplayed()) {
				driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).clear();
				driver.findElement(By.xpath("//textarea[@name='texta360S000000HXWwQAO']")).sendKeys("3197903023");
				LOGS.info("Entered 10 digit phone number.");
				LOGS.info(Thread.currentThread() + "," +"Entered 10 digit phone number.");
			 }
			 
			
			 
			 driver.findElement(By.xpath("//*[@id='Save']")).click();
			 Thread.sleep(6000);
		
		//Mandatory QUestions for Smart Presence and Smart Synchronized
		Select webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Scheduled or Point of Sale')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Scheduled");
		LOGS.info("Selected the consultation type on questionnaire");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is this a Local Ranking pilot order?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is this a Local Ranking pilot order?");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is the order for')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("No");
		LOGS.info("Selected No for Is the order for");

		webSelect = new Select(driver.findElement(By.xpath("(//div/i[contains(text(),'Is the business marijuana')]/ancestor::td/following-sibling::td/select)[1]")));
		webSelect.selectByVisibleText("No");
		LOGS.info("Selected No for Is the business marijuana");

		webSelect = new Select(driver.findElement(By.xpath("//div[contains(text(),'Is there an existing website we can reference on the call?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is there an existing website we can reference on the call?");

		driver.findElement(By.xpath("//textarea[@name='texta360S0000003BryQAE']")).clear();
		driver.findElement(By.xpath("//textarea[@name='texta360S0000003BryQAE']")).sendKeys(webAddress);
		LOGS.info("Website address entered is: "+webAddress);

		webSelect = new Select(driver.findElement(By.xpath("//div[contains(text(),'Will we be using this website')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Will we be using this website address for your Smart Site?");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is this an existing Hibu website address')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Existing Hibu");
		LOGS.info("Selected Existing Hibu for Is this an existing Hibu website address or BYOD (3rd party) URL?");
		
		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'What kind of website does the client have?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Hibu Next Gen or Smart Site Website");
		LOGS.info("Selected Hibu Next Gen or Smart Site Website for What kind of website does the client have?");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Login into the Listings Dashboard.')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Log into listings");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'What Listings / Reputation package does the client have?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Standard");
		LOGS.info("Selected Standard for What Listings / Reputation package does the client have?");

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Were the Listings / Reputation connection processes completed with the client (FB Live / GMB Initiated per Connection section)?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Hibu Investigating or Still Processing");
		LOGS.info("Selected Hibu Investigating or Still Processing for Were the Listings / Reputation connection processes completed");

		if(Product.equalsIgnoreCase("Smart Presence Solutions")) {
		
		webSelect = new Select(driver.findElement(By.xpath("//select[@id='a360S000000HY66QAG']")));
		webSelect.selectByVisibleText("Yes");
		LOGS.info("Selected Yes for Is there a website on the order?");}
		
		else {
			
			webSelect = new Select(driver.findElement(By.xpath("//select[@id='a360S000000HY66QAG']")));
			webSelect.selectByVisibleText("Yes");
			LOGS.info("Selected Yes for Is there a website on the order?");
			
		}

		webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is client sending in assets?')]/ancestor::td/following-sibling::td/select")));
		webSelect.selectByVisibleText("Non-Critical Assets");
		LOGS.info("Selected Non-Critical Assets for Is client sending in assets?");

		webSelect = new Select(driver.findElement(By.xpath("(//div/i[contains(text(),'Final GMB Status:')]/ancestor::td/following-sibling::td/select)[5]")));
		webSelect.selectByVisibleText("Processing");
		LOGS.info("Selected Processing for Final GMB Status");
		   LOGS.info(Thread.currentThread() + "," +"Answered All Mandatory Questions..");

        }
        
        else {
        	
        	Select webSelect = new Select(driver.findElement(By.xpath("//div/i[contains(text(),'Is client sending in assets?')]/ancestor::td/following-sibling::td/select")));
			webSelect.selectByVisibleText("Critical Assets");
			LOGS.info("Selected Critical Assets for Is client sending in assets?");
        	
        }
        Status = "Pass";
		   ExpRes = "All the Mandatory Questions must be answered";
		   ActRes = "All the Mandatory Questions are answered";
		   ExportResults.exportTestResult(
		       "Verify All the Mandatory Questions are answered" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
        driver.findElement(By.xpath("//*[@id='Save']")).click();
		Thread.sleep(8000);		
		
		//TextBox 2nd Round
	
		/*System.out.println("Select query list for TextBox round 2 : "+ textAreaSize);
		 count = 0;
		 Thread.sleep(5000);		
		for(WebElement textbox : textArea) {									 
		try {
				if(textbox.isDisplayed()) {

			    	String text = textbox.getText();
			    	if(text.isEmpty()||(textbox.isDisplayed() && text.isEmpty())) {
			    		System.out.println("Entering the Text: Test");
			 		   LOGS.info(Thread.currentThread() + "," +"Answering Left Out TextBox Questions..2nd round..");

			    		textbox.sendKeys("Test");
			    	}
			    
			    	else
			    		System.out.println("Text is already Present: "+ text);
				}	
		
				
				else {
					System.out.println("Hidden Element..");
				}
		}
				catch(Exception e) {
					System.out.println("In Catch ..");
				}
			System.out.println("Present Iteration number: "+ count+" Out of: "+textAreaSize);
			count++;
		}
		
		 System.out.println("TextBox count the Value : "+ count);
		 driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		 
		 driver.findElement(By.xpath("//*[@id='Save']")).click();
		 Thread.sleep(6000);
		 Status = "Pass";
		   ExpRes = "All the required Textbox related Questions must be answered in 2nd round";
		   ActRes = "All the required Textbox related Questions are answered in 2nd round";
		   ExportResults.exportTestResult(
		       "Verify All the required Textbox related Questions are answered in 2nd round" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
		*/
		//RadioButton Answers 2nd round 
	
		radioButton = driver.findElements(By.xpath("//div[@class='switch-field']/label[text()='Yes']"));
		
		 System.out.println("Select query list : "+ radioButtonSize);
		
		 
		 for(WebElement radiobtn : radioButton) {
		 	
		 	try {
		 		driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
		 		LOGS.info(radiobtn.getText());
		 		if(radiobtn.isDisplayed()&&(radiobtn.isSelected()==false)) {
		 			  
		 	    		System.out.println("Selecting the RadioButton");
				 		   LOGS.info(Thread.currentThread() + "," +"Answering Left Out RadioButton Questions");

		 	    		radiobtn.click();
		 	    		Thread.sleep(5000);
		 	    		
		 		}
		 	    else{
		 	    	System.out.println("Hidden Element.");
		 	    }
		 	  } catch (Exception e) {		
		 	}
		 	
		 	System.out.println("Present Iteration number: "+ count+" Out of: "+radioButtonSize);
		 	count++;
		 }

		  System.out.println("RadioButton count Value : "+ count);
		  driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		  driver.findElement(By.xpath("//*[@id='Save']")).click();
		  Thread.sleep(6000);
		  Status = "Pass";
		   ExpRes = "All the required radiobutton related Questions must be answered in 2nd round";
		   ActRes = "All the required radiobutton related Questions are answered in 2nd round";
		   ExportResults.exportTestResult(
		       "Verify All the required radiobutton related Questions are answered in 2nd round" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
		
		//Kadambaree - Code for Checkbox 2nd round
		  
			counter = 0;
			CheBoxList = driver.findElements(By.xpath("//div/table/tbody/tr/td[2]/"
					+ "div[2]/label/div[@class='control_indicator']"));
			for(WebElement select : CheBoxList) {

				try {
					driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
					if(select.isDisplayed()&&(select.isSelected()==false)){
						select.click();
						System.out.println("CheckBox Clicked");
				 		   LOGS.info(Thread.currentThread() + "," +"Answering Left Out CheckBox Questions");

						 Thread.sleep(2000);
						
					}
					
					else {
						System.out.println("No More CheckBox Found!!");	
					}
						}
				
				  catch (Exception e) {		
					  LOGS.info("Exception while selecting checkbox!!!");
				}
				
				counter++;
				
			}
			System.out.println("print the Value : "+ counter);
			System.out.println("print the Value : "+ counter);
			Thread.sleep(6000);
			driver.findElement(By.xpath("//*[@id='Save']")).click();
			Thread.sleep(6000);
			
			  Status = "Pass";
			   ExpRes = "All the required CheckBox related Questions must be answered in 2nd round";
			   ActRes = "All the required CheckBox related Questions are answered in 2nd round";
			   ExportResults.exportTestResult(
			       "Verify All the required CheckBox related Questions are answered in 2nd round" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	

	//Kadambaree - Validate and ConsultWrapUp Code
			   
	Thread.sleep(10000);
	System.out.println("Waiting to save the all answers");
    try {
	driver.findElement(By.xpath("//*[@id='Validate']")).click();
	System.out.println("validating the Questionnaire : ");
	Thread.sleep(8000);
	driver.navigate().refresh();
	Thread.sleep(4000);
	driver.findElement(By.xpath("//*[@id='Save']")).click();
	Thread.sleep(7000);
	driver.findElement(By.xpath("//*[@id='Validate']")).click();
	System.out.println("validating the Questionnaire : ");
	Thread.sleep(10000);
	
	String Alert = driver.findElement(By.xpath("//*[@id='alertify']/div/article/p")).getText();
	Thread.sleep(7000);
	if (Alert.contains("Validation successful. All the required questions have been answered.")
		||Alert.contains("Proceeding will send an email to Customer to upload files. Would you like to proceed?")
		||Alert.contains("Answering YES will send Consultation Complete-No File")){
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
		System.out.println("Validation Successful");
		   LOGS.info(Thread.currentThread() + "," +"Validation Successful");
		   
		   Status = "Pass";
		   ExpRes = "After Clicking to Validate Button Validation Message must be Sucessful";
		   ActRes = "After Clicking to Validate Button Validation Message is Sucessful";
		   ExportResults.exportTestResult(
		       "Verify After Clicking to Validate Button Validation Message is Sucessful" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
	}
	else if(Alert.contains("Kindly answer all the required questions.")) {
		Thread.sleep(2000);
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();	
		radioButton = driver.findElements(By.xpath("//td[2]/div[2]/b/parent::div/parent::td/div/label[text()='No']"));
		System.out.println("IIIIIIIIIIIIIIIIIIII");
		 for(WebElement radiobtn : radioButton) {
			 	
			 	try {
			 		driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
			 		LOGS.info(radiobtn.getText());
		 		    if(radiobtn.isDisplayed()) {
			 	    System.out.println("Selecting the RadioButton");
					   LOGS.info(Thread.currentThread() + "," +"Answering unanswered questions");
			 	    radiobtn.click();
			 	    Thread.sleep(4000);
			 	    		
			 		}
			 	    else{
			 	    	System.out.println("Hidden Element.");
			 	    }
			 	  } catch (Exception e) {		
			 	}
			 	
			 	System.out.println("Present Iteration number: "+ count+" Out of: "+radioButtonSize);
			 	count++;
			 }
			  System.out.println("RadioButton count Value : "+ count);
			  driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			  driver.findElement(By.xpath("//*[@id='Save']")).click();
			  Thread.sleep(6000);
			  Thread.sleep(5000);
			  driver.findElement(By.xpath("//*[@id='Validate']")).click();
			   System.out.println("validating the Questionnaire : ");
				Thread.sleep(10000);
				Alert = driver.findElement(By.xpath("//*[@id='alertify']/div/article/p")).getText();
				Thread.sleep(7000);
				if (Alert.contains("Validation successful. All the required questions have been answered.")
					||Alert.contains("Proceeding will send an email to Customer to upload files. Would you like to proceed?")
					||Alert.contains("Answering YES will send Consultation Complete-No File")){
					driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
					System.out.println("Validation Successful");
					   LOGS.info(Thread.currentThread() + "," +"Validation Successful");
					   Status = "Pass";
					   ExpRes = "After Clicking to Validate Button Validation Message must be Sucessful";
					   ActRes = "After Clicking to Validate Button Validation Message is Sucessful";
					   ExportResults.exportTestResult(
					       "Verify After Clicking to Validate Button Validation Message is Sucessful" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
				
		
	}
	
	
	else {
		System.out.println("Validation Unsuccessful");
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
		radioButton = driver.findElements(By.xpath("//td[2]/div[2]/b/parent::div/parent::td/div/label[text()='Yes']"));
		System.out.println("IIIIIIIIIIIIIIIIIIII");
		for(WebElement radiobtn : radioButton) {
		try {
		driver.manage().timeouts().implicitlyWait(05, TimeUnit.SECONDS);
		LOGS.info(radiobtn.getText());
		if(radiobtn.isDisplayed()) {
		System.out.println("Selecting the RadioButton");
		   LOGS.info(Thread.currentThread() + "," +"Answering unanswered questions");

		radiobtn.click();
		Thread.sleep(4000);
		}
		else{
		System.out.println("Hidden Element.");
		}
		} catch (Exception e) {
		}
		System.out.println("Present Iteration number: "+ count+" Out of: "+radioButtonSize);
		count++;
		}
		System.out.println("RadioButton count Value : "+ count);
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.findElement(By.xpath("//*[@id='Save']")).click();
		Thread.sleep(6000);
		Thread.sleep(5000);
		driver.findElement(By.xpath("//*[@id='Validate']")).click();
		System.out.println("validating the Questionnaire : ");
		Thread.sleep(10000);
		Alert = driver.findElement(By.xpath("//*[@id='alertify']/div/article/p")).getText();
		Thread.sleep(7000);
		if (Alert.contains("Validation successful. All the required questions have been answered.")
		||Alert.contains("Proceeding will send an email to Customer to upload files. Would you like to proceed?")
		||Alert.contains("Answering YES will send Consultation Complete-No File")){
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
		System.out.println("Validation Successful");
		   LOGS.info(Thread.currentThread() + "," +"Validation Successful");
		   Status = "Pass";
		   ExpRes = "After Clicking to Validate Button Validation Message must be Sucessful";
		   ActRes = "After Clicking to Validate Button Validation Message is Sucessful";
		   ExportResults.exportTestResult(
		       "Verify After Clicking to Validate Button Validation Message is Sucessful" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	
		 }
		}
	}	

	driver.findElement(By.xpath("//*[@id='ConsultWrapUp']")).click();
	System.out.println("Clicked on Consult WrapUp Button : ");
	Thread.sleep(5000);
	String FianlAlert = driver.findElement(By.xpath("//*[@id='alertify']/div/article/p")).getText();
	if (FianlAlert.contains("Validation successful. All the required questions have been answered.")
			||FianlAlert.contains("Answering YES will send Consultation Complete-No File")
			||FianlAlert.contains("Proceeding will send an email to Customer to upload files. Would you like to proceed?")
			){
		
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
		System.out.println("Consult WrapUp Done");
		   LOGS.info(Thread.currentThread() + "," +"Consult WrapUp Done");
		   Status = "Pass";
		   ExpRes = "After Clicking to Consult WrapUp Button page must redirect to send email to the customer";
		   ActRes = "After Clicking to Consult WrapUp Button page redirects to send email to the customer";
		   ExportResults.exportTestResult(
		       "Verify After Clicking to Consult WrapUp Button page redirects to send email to the customer" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
	

	}
	if (FianlAlert.contains("Cannot proceed. Please supply Citrix URL."))
	{

driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
ArrayList<String> WindowHandle = new ArrayList<String>(driver.getWindowHandles());
driver.switchTo().window(WindowHandle.get(0));
String Tab = driver.getTitle();
LOGS.info("Case Page Tab Selected: " + Tab);
driver.findElement(By.xpath("//*[@id='topButtonRow']/input[3]")).click();
Thread.sleep(5000);
LOGS.info("Clicked on Edit Button");
Select dropdownState = new Select(driver.findElement(By.xpath("//select[@id='00N3100000Gb7HE']")));
dropdownState.selectByVisibleText("N/A");
LOGS.info(Thread.currentThread() +"N/A is selected");
driver.findElement(By.xpath("//*[@id='topButtonRow']/input[1]")).click();
System.out.println("Clicked on Save Button, Case is saved");
Thread.sleep(8000);
driver.switchTo().window(WindowHandle.get(1));
driver.findElement(By.xpath("//*[@id='Save']")).click();
  Thread.sleep(6000);
  driver.findElement(By.xpath("//*[@id='ConsultWrapUp']")).click();
	System.out.println("Clicked on Consult WrapUp Button : ");
	Thread.sleep(9000);
	if (FianlAlert.contains("Validation successful. All the required questions have been answered.")
			||FianlAlert.contains("Answering YES will send Consultation Complete-No File")
			||FianlAlert.contains("Proceeding will send an email to Customer to upload files. Would you like to proceed?")
			){
		
		driver.findElement(By.xpath("//*[@id='alertify-ok']")).click();
		System.out.println("Consult WrapUp Done");
	}
}

	else {
		System.out.println("prerequisites are not handled Properly");
		   LOGS.info(Thread.currentThread() + "," +"prerequisites are not handled Properly");

	}
	
	 //Handling the windows POP-up
    String p = driver.getWindowHandle();
    LOGS.info(p);
    Set<String> s = driver.getWindowHandles();
    Iterator<String> I1= s.iterator();
    while(I1.hasNext()) {
    	
    	String popupHandle=I1.next().toString();
    	
    	if(!popupHandle.contains(p)) {
    		
    		LOGS.info("jjjjjjjjjjjjjjjjjj");
    		driver.switchTo().window(popupHandle);
    		////td/b[text()='The questionnaire has been completed successfully.']
    		//The Questionnaire has already been completed. Please navigate to the Content section on the related Assets to see the questions/answers.
    	}
    }
    Thread.sleep(7000);
	driver.findElement(By.xpath("(//input[@value='Send Email'])[1]")).click();
	System.out.println("Email has been sent.");
	LOGS.info("Email has been sent!!");
	   LOGS.info(Thread.currentThread() + "," +"Email has been sent!!");
	   Status = "Pass";
	   ExpRes = "Email Must be sent without any exception or failure";
	   ActRes = "Email has been sent";
	   ExportResults.exportTestResult(
	       "Verify email sent to the customer" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);
Thread.sleep(4000);

	driver.switchTo().window(p);
	
	 Thread.sleep(30000);
	 driver.manage().timeouts().pageLoadTimeout(80,TimeUnit.SECONDS );
	 if(driver.findElement(By.xpath("//*[@id='questionnaireComplete']//b")).getText().equalsIgnoreCase("The questionnaire has been completed successfully.")) {
		 System.out.println("The questionnaire has been completed successfully.");
		 LOGS.info("The questionnaire has been completed successfully.");
		   LOGS.info(Thread.currentThread() + "," +"The questionnaire has been completed successfully.");
		   Status = "Pass";
		   ExpRes = "Questionnaire msut be completed successfully";
		   ActRes = "Questionnaire has been completed successfully";
		   ExportResults.exportTestResult(
		       "Verify Questionnaire msut be completed successfully" + ExpRes + "," + ActRes + "," + Status + "," + ImgName,Resultsfolderpath);

	 }
	 else
		 LOGS.info("There is time delay in wrapping up the Questionnaire, but it will be wrapped.");
	   LOGS.info(Thread.currentThread() + "," +"There is time delay in wrapping up the Questionnaire, but it will be wrapped.");

	 
		 } catch (Exception e) {
				LOGS.info("Some error while completing the Questionnaire");
				e.printStackTrace();
			}
}

catch(Exception e) {
	LOGS.error("Exception due to Apllication Slowness..!!" +e);
	ExceptionMsg= "Exception due to Apllication Slowness..!!";
	LOGS.info(Thread.currentThread() + "," +"Exception due to Apllication Slowness..!!" + e.getStackTrace());
	
}
}

public void priceChangeMul(String businessId, String allplans, String Prod, String Amountss, String Resultsfolderpath)throws Exception {
    String result="";
    pr.Resultsfolderpath = Resultsfolderpath;
    
    try {
        String LoginRep = "OpsWizard";
        Properties OR = loadPropertiesFiles("Order");
        SalesRep = OR.getProperty(LoginRep);
        LOGS.info(Thread.currentThread() + "Login Sales Rep -> " + SalesRep);
        SFLoginResult = SalesforceLogin("sfAdminUserName", "sfAdminPswd", SalesRep);
        SalesRepType = LoginRep;
        LOGS.info(Thread.currentThread() + "Logged in as " + SalesRepType + " ,SF Login Sucessfull.");
        
        
        driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
        /*ArrayList<String> newWindowHandle = new ArrayList<String>(driver.getWindowHandles());
        driver.switchTo().window(newWindowHandle.get(1));
        String TabSelected = driver.getTitle();
        LOGS.info(Thread.currentThread() + "Tab Selected: " + TabSelected);
        driver.close();
        driver.switchTo().window(newWindowHandle.get(0));*/
        driver.navigate().refresh();
        driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);        
        LOGS.info(Thread.currentThread() + "," +"Page Refreshed");
        
        driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);        
            
        
    } catch(Exception e) {
        LOGS.error("Exception during SF Login!!!" +e);
        //ExceptionMsg= "Exception during SF Login!!!";
        LOGS.info(Thread.currentThread() + "," +"Exception during SF Login!!!" + e.getStackTrace());
        
    }
 

 

try
{
	LOGS.info("display all fetched Prod names" + allplans);
    
    LOGS.info("display all fetched plan names" + Prod);
    String Plans[] = Prod.split(",");            
    LOGS.info("display all fetched plan names: " + Plans);
    int Prodsize = Plans.length;

 

    LOGS.info("display all fetched Amounts" + Amountss);
    String Amount[] = Amountss.split(",");            
    LOGS.info("display Amounts: " + Amount);
 

 String businessId1=businessId.replace(" ","");
 LOGS.info("I am the correct business id"+ businessId1);
 driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);    
 wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='phSearchInput']")));
driver.findElement(By.xpath("//input[@id='phSearchInput']")).sendKeys(businessId1);
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
Thread.sleep(3000);
driver.findElement(By.xpath("//input[@id='phSearchButton']")).click();

 

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));        

 

driver.findElement(By.xpath("//td[text()='"+businessId1+"']//parent::tr//th/a")).click();
LOGS.info(Thread.currentThread() +"Clicking on Account Link");

 

driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
driver.findElement(By.xpath("//span[text()='Details']")).click();
wait.until(ExpectedConditions.elementToBeClickable(SLocator("ContractsLink")));

 

ExpRes = "Account Should be Available";
ActRes = "Account Found";
Status ="Pass";
ImageName = "ExistingAccount";
ImgName = ScreenshotPrinter.screenShot(ImageName, driver,pr.Resultsfolderpath);
ExportResults.exportTestResult(
"Select cancellation reason :," + ExpRes + "," + ActRes + "," + Status + "," + ImgName,pr.Resultsfolderpath);
//Contract Page 

 

SLocator("ContractsLink").click();
LOGS.info(Thread.currentThread() +"Contracts link clicked in account details page");                        
((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
SLocator("ContractNolink"));

 

contractNumber=driver.findElement(By.xpath("//th[contains(text(),'Contract Number')]//ancestor::tr[@class='headerRow']//following::tr[1]/th/a")).getText();
LOGS.info(Thread.currentThread() +"Generated Contract Number:"+contractNumber);

 

SLocator("ContractNolink").click();
LOGS.info(Thread.currentThread() +"Contracts number link clicked in account details page");

 

driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));

 

wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend")));

 

LOGS.info(Thread.currentThread() +"Waited 10 Secs for  Amend button to be visible");
SLocator("Amend").click();
LOGS.info(Thread.currentThread() +"Amend button clicked in contract detail page ");
driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(40));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));


 

wait.until(ExpectedConditions.elementToBeClickable(SLocator("Amend2")));
SLocator("Amend2").click();                       
LOGS.info(Thread.currentThread() +"Second time Amend button clicked ");
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));

 

Thread.sleep(1000);
WebElement shadowDomHostElement340 = driver.findElement(By.cssSelector("#sbPageContainer"));
SearchContext last340 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement340);
Thread.sleep(1000);
WebElement shadowDomHostElement341 = last340.findElement(By.cssSelector("sb-line-editor[class='--desktop']"));
SearchContext last341 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement341);
Thread.sleep(1000);
WebElement shadowDomHostElement342 = last341.findElement(By.cssSelector("#groupLayout"));
SearchContext last342 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement342);
Thread.sleep(1000);
WebElement shadowDomHostElement343 = last342.findElement(By.cssSelector("#Group_"));
SearchContext last343 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement343);
Thread.sleep(1000);
WebElement shadowDomHostElement344 = last343.findElement(By.cssSelector("#standardLines"));
SearchContext last344 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement344);
Thread.sleep(1000);
WebElement shadowDomHostElement345 = last344.findElement(By.cssSelector(" div:nth-child(10) > div:nth-child(2) > div:nth-child(1) > sf-le-table-row:nth-child(3)"));
SearchContext last345 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement345);
Thread.sleep(1000);
WebElement shadowDomHostElement346 = last345.findElement(By.cssSelector(".left-aligned"));
SearchContext last346 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement346);
Thread.sleep(1000);

WebElement shadowDomHostElement347 = last346.findElement(By.cssSelector("#actionButton0"));
wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement347));
LOGS.info(Thread.currentThread() +"Going to click on Reconfigure Line");
JavascriptExecutor jseConfigBtn1 = (JavascriptExecutor) driver;
jseConfigBtn1.executeScript("arguments[0].click()", shadowDomHostElement347);

LOGS.info("I have clicked on Reconfig wrench on QLE page");
 

//Code for a la carte

if(allplans.equals("Display (a la carte)")||allplans.equals("Social (a la carte)")||allplans.equals("Search (a la carte)"))
{
driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(90));
//driver.findElement(By.xpath("//span[contains(text(),'"+allplans+"')]//ancestor::sb-swipe-container//descendant::sb-actions")).click();

SearchContext shadow0 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow1 = shadow0.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow2 = shadow1.findElement(By.cssSelector("#bundles")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow3 = shadow2.findElement(By.cssSelector("#features")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow4 = shadow3.findElement(By.cssSelector("sb-product-feature-list")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow5 = shadow4.findElement(By.cssSelector(".--desktop")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow6 = shadow5.findElement(By.cssSelector("#ot")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow7 = shadow6.findElement(By.cssSelector("#row")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow8 = shadow7.findElement(By.cssSelector("#row")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow9 = shadow8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow10 = shadow9.findElement(By.cssSelector("#field")).getShadowRoot();
Thread.sleep(1000);
WebElement Albudget = shadow10.findElement(By.cssSelector("#me"));

LOGS.info(Thread.currentThread() +"I am going to click the budget line");
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));

 

LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
LOGS.info(Thread.currentThread() +"Prodsize:" +Prodsize);
for (int i=0; i<Prodsize; i++)
{

 

if(i==0){
Actions actions = new Actions(driver);
actions.moveToElement(Albudget);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
actions.sendKeys(String.valueOf(Amount[0]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");
}

 

if(i==1){
Actions actions = new Actions(driver);
actions.moveToElement(Albudget);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
actions.sendKeys(String.valueOf(Amount[1]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");
}

 

if(i==2){
Actions actions = new Actions(driver);
actions.moveToElement(Albudget);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area");
actions.sendKeys(String.valueOf(Amount[2]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change");
}
}
driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
/*wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//h1[text()='Configure Products']//following::paper-button/sb-i18n[text()='Save']")));
driver.findElement(By.xpath("//h1[text()='Configure Products']//following::paper-button/sb-i18n[text()='Save']")).click();*/


SearchContext shadow30 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow31 = shadow30.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
Thread.sleep(1000);
WebElement Rand2 = shadow31.findElement(By.cssSelector("#fb"));
shadow31.findElement(By.cssSelector("#fb")).click();
Thread.sleep(2000);
shadow31.findElement(By.cssSelector("#fb")).click();
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
System.out.println("going to click on save button in budget entering page");

try {
SearchContext shadow20 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow21 = shadow20.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
Thread.sleep(1000);
WebElement saving = shadow21.findElement(By.cssSelector("#pcSave"));
//saving.click();

JavascriptExecutor jsep = (JavascriptExecutor) driver ;
jsep.executeScript("arguments[0].click();", saving);
LOGS.info("Clicked on save button in budget entering page");
}
catch(Exception er) {
	LOGS.info("I am in catch block of save button in budget entering page");
}
LOGS.info(Thread.currentThread() +"Clicked on Save Button");
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));
//driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);

 

/*wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[@id='pcSave']/sb-i18n")));
LOGS.info(Thread.currentThread() +"Waited till Save enabled...");
try {
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
    WebDriverWait wait1 = new WebDriverWait(driver, 8);
    wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));

 

}catch(Exception ex) {
    LOGS.info("Wait is over and the Pocess continues.");
    }
driver.findElement(By.xpath("//paper-button[@id='pcSave']/sb-i18n")).click();
LOGS.info(Thread.currentThread() +"Clicked on Save Button");*/
}
else
{
	
	LOGS.info("I am into else block for Solutions package of BCS method");
	

String tierName="";
String budgetTierName="";
int childNO=0,schildNO,budgetAmt=0,chkbox=0,rchildNO=0,childAd=0;

			if(allplans.contains("Smart Presence + Display & Social"))
			{
				childNO=9;
				budgetTierName="2 - Ad Campaigns";
				tierName="Smart Presence without Search";
			}

			if(allplans.equalsIgnoreCase("Foundation + Display & Social"))
			{
				childNO = 7;	
				budgetTierName="2 - Ad Campaigns";
				tierName="Online Foundation without Search";
			}
		  if(allplans.contains("Smart Presence + 1 Ad Campaign"))
			{
				childNO=7;
				tierName="Smart Presence without Search";
				budgetTierName="Choose One Performance Product Display or Social or Search (Search Max = $999)";
				if(Prod.contains("Display")){
					rchildNO=1;
					LOGS.info("This is my pro selected " + Prod);
				}
				if(Prod.contains("Social")){
					rchildNO=3;
					LOGS.info("This is my pro selected " + Prod);
				}
				if(Prod.contains("Managed Search")){
					rchildNO=5;
					LOGS.info("This is my pro selected " + Prod);
				}
			}
			if(allplans.contains("Foundation + 1 Ad Campaign"))
			{
				childNO=5;
				tierName="Online Foundation without Search";
				budgetTierName="Choose One Performance Product Display or Social or Search (Search Max = $999)";
				if(Prod.contains("Display")){
					childAd=1;
					LOGS.info("This is my pro selected " + Prod);
				}					
				if(Prod.contains("Social")){
					childAd=3;
					LOGS.info("This is my pro selected " + Prod);
				}
				if(Prod.contains("Managed Search")){
					childAd=5;
					LOGS.info("This is my pro selected " + Prod);
				}
				
			}
		if(allplans.contains("Smart Presence + Display & Search - Small") || allplans.contains("Foundation + Display & Search - Small")
				||  allplans.contains("Smart Presence + Display & Search - Medium")|| allplans.contains("Foundation + Display & Search - Medium")
				||  allplans.contains("Smart Presence + Display & Search - Large")|| allplans.contains("Foundation + Display & Search - Large"))
		{
			tierName="Display & Search - Tiers";
			if(allplans.contains("Smart Presence + Display & Search - Small")|| allplans.contains("Foundation + Display & Search - Small"))
			{
				childNO=1;
				budgetTierName="Display & Search Small (Max Search Budget = $799)";
			}
			if(allplans.contains("Smart Presence + Display & Search - Medium")|| allplans.contains("Foundation + Display & Search - Medium"))
			{
				childNO=3;
				budgetTierName="Display & Search Medium (Max Search Budget = $1199)";
			}
			if(allplans.contains("Smart Presence + Display & Search - Large")|| allplans.contains("Foundation + Display & Search - Large"))
			{
				childNO=5;
				budgetTierName="Display & Search - Large (Search Budget Unlimited)";
			}
		}
		if(allplans.contains("Smart Presence + Social & Search - Small")|| allplans.contains("Foundation + Social & Search - Small")
				||  allplans.contains("Smart Presence + Social & Search - Medium")|| allplans.contains("Foundation + Social & Search - Medium")
				||  allplans.contains("Smart Presence + Social & Search - Large")|| allplans.contains("Foundation + Social & Search - Large"))
		{
			tierName="Social & Search - Tiers";
			if(allplans.contains("Smart Presence + Social & Search - Small")|| allplans.contains("Foundation + Social & Search - Small"))
			{
				childNO=1;
				budgetTierName="Social & Search Small (Max Search Budget = $799)";
			}
			if(allplans.contains("Smart Presence + Social & Search - Medium")|| allplans.contains("Foundation + Social & Search - Medium"))
			{
				childNO=3;
				budgetTierName="Social & Search Medium (Max Search Budget = $1199)";
			}
			if(allplans.contains("Smart Presence + Social & Search - Large")|| allplans.contains("Foundation + Social & Search - Large"))
			{
				childNO=5;
				budgetTierName="Social & Search - Large (Search Budget Unlimited)";
			}
		}
		if(allplans.contains("Smart Sync - Small")||allplans.contains("Synchronized Marketing - Small")){
			childNO=1;
			budgetTierName="Performance (Search Budget Max = $999)";
			//schildNO=1;
		}
		if(allplans.contains("Smart Sync - Medium")||allplans.contains("Synchronized Marketing - Medium")) {
			childNO=3;
			budgetTierName="Performance (Search Budget Max =  $1599)";
			//schildNO=3;
		}
		if(allplans.contains("Smart Sync - Large")||allplans.contains("Synchronized Marketing - Large")) {
			childNO=5;
			budgetTierName="Performance (Search Budget Max is Unlimited)";
			//schildNO=5;
		}
        LOGS.info("This is the allplans again " + allplans);
		LOGS.info("I am the parameters1 " +tierName);
		LOGS.info("I am the parameters2 " +budgetTierName);

		if(allplans.contains("Smart Sync - Small")||allplans.contains("Synchronized Marketing - Small")
		||allplans.contains("Smart Sync - Medium")||allplans.contains("Synchronized Marketing - Medium")
		||allplans.contains("Smart Sync - Large")||allplans.contains("Synchronized Marketing - Large")){
			LOGS.info("I am into the loop for smart sync or sync marketing");
			
			Thread.sleep(1000);
			WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
			SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
			Thread.sleep(1000);
			WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
			SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
			Thread.sleep(1000);
			WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
			SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
			Thread.sleep(1000);
			WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
			SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
			Thread.sleep(1000);
			WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
			SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
			Thread.sleep(1000);
			WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector(".--desktop"));
			SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
			Thread.sleep(1000);
			WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
			SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
			Thread.sleep(1000);
			WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")"));
			SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
			Thread.sleep(1000);
			WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("sb-actions[class='--desktop']"));
			SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
			Thread.sleep(1000);
			WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("#_0"));
			LOGS.info("I am going to click the configure of our decided product " +childNO);
			
			wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement9));
			LOGS.info(Thread.currentThread() +"Going to click on Reconfigure Line3");
			JavascriptExecutor jseConfigBtn2 = (JavascriptExecutor) driver;
			jseConfigBtn2.executeScript("arguments[0].click()", shadowDomHostElement9);
		}
		else if(allplans.contains("Foundation + 1 Ad Campaign")|| allplans.contains("Smart Presence + 1 Ad Campaign")) {
			LOGS.info("I am into the loop for ad campaign " +allplans);
			Thread.sleep(1000);
WebElement shadowDomHostElement870 = driver.findElement(By.cssSelector("#sbPageContainer"));
SearchContext last870 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement870);
Thread.sleep(1000);
WebElement shadowDomHostElement871 = last870.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
SearchContext last871 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement871);
Thread.sleep(1000);
WebElement shadowDomHostElement872 = last871.findElement(By.cssSelector("#bundles"));
SearchContext last872 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement872);
Thread.sleep(1000);
WebElement shadowDomHostElement873 = last872.findElement(By.cssSelector("#features"));
SearchContext last873 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement873);
Thread.sleep(1000);
WebElement shadowDomHostElement874 = last873.findElement(By.cssSelector("sb-product-feature-list"));
SearchContext last874 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement874);
Thread.sleep(1000);
WebElement shadowDomHostElement875 = last874.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
SearchContext last875 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement875);
Thread.sleep(1000);
WebElement shadowDomHostElement876 = last875.findElement(By.cssSelector("#ot"));
SearchContext last876 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement876);
Thread.sleep(1000);
LOGS.info("I am the child no "+ childNO);
WebElement shadowDomHostElement877 = last876.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")"));
SearchContext last877 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement877);
Thread.sleep(1000);
WebElement shadowDomHostElement878 = last877.findElement(By.cssSelector("sb-actions[class='--desktop']"));
SearchContext last878 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement878);
Thread.sleep(1000);
WebElement shadowDomHostElement879 = last878.findElement(By.cssSelector("#_0"));

wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement879));
LOGS.info(Thread.currentThread() +"Going to click on Reconfigure Line2");
JavascriptExecutor jseConfigBtn2 = (JavascriptExecutor) driver;
jseConfigBtn2.executeScript("arguments[0].click()", shadowDomHostElement879);

LOGS.info(Thread.currentThread() +"Going to give budget in needed line");
Thread.sleep(1000);
WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
Thread.sleep(1000);
WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
Thread.sleep(1000);
WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
Thread.sleep(1000);
WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
Thread.sleep(1000);
WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
Thread.sleep(1000);
WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
Thread.sleep(1000);
WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
Thread.sleep(1000);
LOGS.info("I am the reconfigure budget line " + childAd);
WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childAd+")"));
SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
Thread.sleep(1000);
WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#row"));
SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
Thread.sleep(1000);
WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
Thread.sleep(1000);
WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#field"));
SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
Thread.sleep(1000);
WebElement Rbudgetbox = last10.findElement(By.cssSelector("#me"));
Actions actions = new Actions(driver);
actions.moveToElement(Rbudgetbox);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area - 10");
LOGS.info("This is my budget for this product " +Amount[0]);
actions.sendKeys(String.valueOf(Amount[0]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change - 10");
Thread.sleep(3000);

//return WebElement;
		}
		else {
LOGS.info("I am into the loop for smart presence or online foundation " +allplans);
Thread.sleep(1000);
WebElement shadowDomHostElement870 = driver.findElement(By.cssSelector("#sbPageContainer"));
SearchContext last870 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement870);
Thread.sleep(1000);
WebElement shadowDomHostElement871 = last870.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
SearchContext last871 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement871);
Thread.sleep(1000);
WebElement shadowDomHostElement872 = last871.findElement(By.cssSelector("#bundles"));
SearchContext last872 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement872);
Thread.sleep(1000);
WebElement shadowDomHostElement873 = last872.findElement(By.cssSelector("#features"));
SearchContext last873 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement873);
Thread.sleep(1000);
WebElement shadowDomHostElement874 = last873.findElement(By.cssSelector("sb-product-feature-list"));
SearchContext last874 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement874);
Thread.sleep(1000);
WebElement shadowDomHostElement875 = last874.findElement(By.cssSelector("sb-product-feature[name='"+tierName+"']"));
SearchContext last875 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement875);
Thread.sleep(1000);
WebElement shadowDomHostElement876 = last875.findElement(By.cssSelector("#ot"));
SearchContext last876 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement876);
Thread.sleep(1000);
LOGS.info("I am the child no "+ childNO);
WebElement shadowDomHostElement877 = last876.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+childNO+")"));
SearchContext last877 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement877);
Thread.sleep(1000);
WebElement shadowDomHostElement878 = last877.findElement(By.cssSelector("sb-actions[class='--desktop']"));
SearchContext last878 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement878);
Thread.sleep(1000);
WebElement shadowDomHostElement879 = last878.findElement(By.cssSelector("#_0"));


wait.until(ExpectedConditions.elementToBeClickable(shadowDomHostElement879));
LOGS.info(Thread.currentThread() +"Going to click on Reconfigure Line3");
JavascriptExecutor jseConfigBtn2 = (JavascriptExecutor) driver;
jseConfigBtn2.executeScript("arguments[0].click()", shadowDomHostElement879);
//end of loop of deciding the loop of sync and smart


}
LOGS.info(Thread.currentThread() +"Reconfigure Line");
//driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);

LOGS.info(Thread.currentThread() +"Initiating EnterBudget method");
LOGS.info(Thread.currentThread() +"Prodsize:" +Prodsize);
String flag="";
String prodone="";
String prodtwo="";
String prodthree="";
String crchildNO="";
       if((allplans.contains("Smart Sync - Small")||allplans.contains("Synchronized Marketing - Small")
		||allplans.contains("Smart Sync - Medium")||allplans.contains("Synchronized Marketing - Medium")
		||allplans.contains("Smart Sync - Large")||allplans.contains("Synchronized Marketing - Large")||allplans.contains("Smart Presence + Social & Search - Small")|| allplans.contains("Foundation + Social & Search - Small")
		||allplans.contains("Smart Presence + Social & Search - Medium")||allplans.contains("Foundation + Social & Search - Medium")
		||allplans.contains("Smart Presence + Social & Search - Large")|| allplans.contains("Foundation + Social & Search - Large")||allplans.contains("Smart Presence + Display & Search - Small") || allplans.contains("Foundation + Display & Search - Small")
		||allplans.contains("Smart Presence + Display & Search - Medium")||allplans.contains("Foundation + Display & Search - Medium")
		||allplans.contains("Smart Presence + Display & Search - Large")|| allplans.contains("Foundation + Display & Search - Large")
    	||allplans.contains("Smart Presence + Display & Social")||allplans.contains("Foundation + Display & Social")) && (!allplans.contains("Smart Presence + 1 Ad Campaign")||!allplans.contains("Foundation + 1 Ad Campaign"))) {{
	LOGS.info("I have entered loop for deciding rchildno for other plans");
if(Prod.trim().contains("Managed Search")||Prod.trim().contains("Search")) {
	flag="True";
	rchildNO=1;
	LOGS.info("I am into the loop for search 1");
}
if(Prod.trim().contains("Display")) {
	flag="True";
	rchildNO=3;
	LOGS.info("I am into the loop for display 2");
}
if(Prod.trim().contains("Social")) {
	flag="True";
	rchildNO=5;
	LOGS.info("I am into the loop for social 3");
}
LOGS.info("This is my rchildno at end of loop --------------------" +rchildNO);
       }
int k=0;
/*if(!allplans.contains("Smart Presence + 1 Ad Campaign + Social")||!allplans.contains("Foundation + 1 Ad Campaign + Display")
	||!allplans.contains("Foundation + 1 Ad Campaign + Social")||!allplans.contains("Smart Presence + 1 Ad Campaign + Display")
	||!allplans.contains("Smart Presence + 1 Ad Campaign + Managed Search")||!allplans.contains("Foundation + 1 Ad Campaign + Managed Search")) {*/
	LOGS.info("Entering the for loop");
for (int i=0; i<Prodsize; i++)
{
if(i==0){
	/*if(allplans.equals("Foundation + 1 Ad Campaign + Managed Search")) {
		childAd = rchildNO;
		LOGS.info("Here's my childad no "+childAd);
	}
	else {
		rchildNO=1;
		LOGS.info("Here's my childad no "+childAd);
	}
	LOGS.info("Here's my childad no "+childAd);
	//prodone="";
*/
	flag="True";
	//childAd = rchildNO;
	rchildNO=1;
	Thread.sleep(1000);
	WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
	SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
	Thread.sleep(1000);
	WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
	SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
	Thread.sleep(1000);
	WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
	SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
	Thread.sleep(1000);
	WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
	SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
	Thread.sleep(1000);
	WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
	SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
	Thread.sleep(1000);
	WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
	SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
	Thread.sleep(1000);
	WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
	SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
	Thread.sleep(1000);
	LOGS.info("I am the reconfigure budget line " + rchildNO);
	WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(rchildNO)+")"));
	SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
	Thread.sleep(1000);
	WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#row"));
	SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
	Thread.sleep(1000);
	WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
	SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
	Thread.sleep(1000);
	WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#field"));
	SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
	Thread.sleep(1000);
	WebElement Rbudgetbox = last10.findElement(By.cssSelector("#me"));
Actions actions = new Actions(driver);
actions.moveToElement(Rbudgetbox);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area - 1");
LOGS.info("This is my budget for this product " +Amount[0]);
actions.sendKeys(String.valueOf(Amount[0]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change - 1");
}

if(i==1){
	/*if(allplans.contains("Foundation + 1 Ad Campaign + Display")) {
		childAd = rchildNO;
		LOGS.info("Here's my childad no "+childAd);
	}
	else {
		rchildNO=3;
		LOGS.info("Here's my childad no "+childAd);
	}*/
//	LOGS.info("Here's my childad no "+childAd);
	//prodtwo="";
	flag="True";
	rchildNO=3;
	//childAd = rchildNO;
	Thread.sleep(1000);
	WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
	SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
	Thread.sleep(1000);
	WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
	SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
	Thread.sleep(1000);
	WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
	SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
	Thread.sleep(1000);
	WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
	SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
	Thread.sleep(1000);
	WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
	SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
	Thread.sleep(1000);
	WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
	SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
	Thread.sleep(1000);
	WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
	SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
	Thread.sleep(1000);
	LOGS.info("I am the reconfigure budget line " + rchildNO);
	WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(rchildNO)+")"));
	SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
	Thread.sleep(1000);
	WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#row"));
	SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
	Thread.sleep(1000);
	WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
	SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
	Thread.sleep(1000);
	WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#field"));
	SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
	Thread.sleep(1000);
	WebElement Rbudgetbox = last10.findElement(By.cssSelector("#me"));
Actions actions = new Actions(driver);
actions.moveToElement(Rbudgetbox);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area - 2");
LOGS.info("This is my budget for this product " +Amount[1]);
actions.sendKeys(String.valueOf(Amount[1]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change - 2");
}

if(i==2){
	//prodthree="";
	/*if(allplans.contains("Foundation + 1 Ad Campaign + Social")) {
		childAd = rchildNO;
		LOGS.info("Here's my childad no "+childAd);
	}
	else {
		rchildNO=5;
		LOGS.info("Here's my childad no "+childAd);
	}*/
	//LOGS.info("Here's my childad no "+childAd);
	flag="True";
	rchildNO=5;
	//childAd = rchildNO;
	Thread.sleep(1000);
	WebElement shadowDomHostElement0 = driver.findElement(By.cssSelector("#sbPageContainer"));
	SearchContext last0 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement0);
	Thread.sleep(1000);
	WebElement shadowDomHostElement1 = last0.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
	SearchContext last1 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement1);
	Thread.sleep(1000);
	WebElement shadowDomHostElement2 = last1.findElement(By.cssSelector("#bundles"));
	SearchContext last2 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement2);
	Thread.sleep(1000);
	WebElement shadowDomHostElement3 = last2.findElement(By.cssSelector("#features"));
	SearchContext last3 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement3);
	Thread.sleep(1000);
	WebElement shadowDomHostElement4 = last3.findElement(By.cssSelector("sb-product-feature-list"));
	SearchContext last4 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement4);
	Thread.sleep(1000);
	WebElement shadowDomHostElement5 = last4.findElement(By.cssSelector("sb-product-feature[name='"+budgetTierName+"']"));
	SearchContext last5 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement5);
	Thread.sleep(1000);
	WebElement shadowDomHostElement6 = last5.findElement(By.cssSelector("#ot"));
	SearchContext last6 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement6);
	Thread.sleep(1000);
	LOGS.info("I am the reconfigure budget line " + rchildNO);
	WebElement shadowDomHostElement7 = last6.findElement(By.cssSelector(" div:nth-child(6) > div:nth-child(2) > sb-table-row:nth-child("+(rchildNO)+")"));
	SearchContext last7 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement7);
	Thread.sleep(1000);
	WebElement shadowDomHostElement8 = last7.findElement(By.cssSelector("#row"));
	SearchContext last8 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement8);
	Thread.sleep(1000);
	WebElement shadowDomHostElement9 = last8.findElement(By.cssSelector("sb-option-cell[class='innerTd secondary numericCell initial'][item='record.CPQ_Budget__c']"));
	SearchContext last9 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement9);
	Thread.sleep(1000);
	WebElement shadowDomHostElement10 = last9.findElement(By.cssSelector("#field"));
	SearchContext last10 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement10);
	Thread.sleep(1000);
	WebElement Rbudgetbox = last10.findElement(By.cssSelector("#me"));
	Actions actions = new Actions(driver);
	actions.moveToElement(Rbudgetbox);
	actions.click();
	LOGS.info(Thread.currentThread() +"Clicked on Budget Text area - 3");
actions.sendKeys(String.valueOf(Amount[2]));
actions.build().perform();
LOGS.info(Thread.currentThread() +"Entered the budget - Price Change - 3");
}
}
/*WebElement Rbudgetbox = last10.findElement(By.cssSelector("#me"));
Actions actions = new Actions(driver);
actions.moveToElement(Rbudgetbox);
actions.click();
LOGS.info(Thread.currentThread() +"Clicked on Budget Text area - 3");
actions.sendKeys(String.valueOf(Amount[0]));
actions.build().perform();*/
}
System.out.println("going to do the rand button option in budget entering page");
//SearchContext Rand = (SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#fb\")");
Thread.sleep(3000);

SearchContext shadow0 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow1 = shadow0.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
Thread.sleep(1000);
WebElement Rand1 = shadow1.findElement(By.cssSelector("#fb"));
shadow1.findElement(By.cssSelector("#fb")).click();
Thread.sleep(2000);
shadow1.findElement(By.cssSelector("#fb")).click();
/*JavascriptExecutor jser = (JavascriptExecutor) driver ;
jser.executeScript("arguments[0].click();", Rand1);
LOGS.info("hello1");
jser.executeScript("arguments[0].click();", Rand1);
LOGS.info("hello2");*/
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
System.out.println("going to click on save button in budget entering page");

try {
SearchContext shadow20 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow21 = shadow20.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
Thread.sleep(1000);
WebElement saving = shadow21.findElement(By.cssSelector("#pcSave"));
//saving.click();

JavascriptExecutor jsep = (JavascriptExecutor) driver ;
jsep.executeScript("arguments[0].click();", saving);
LOGS.info("Clicked on save button in budget entering page");
}
catch(Exception er) {
	LOGS.info("I am in catch block of save button in budget entering page");
}
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
//SearchContext savebtn1 = (SearchContext) excutor.executeScript("return document.querySelector(\"sb-page-container\").shadowRoot.querySelector(\"sb-product-config\").shadowRoot.querySelector(\"paper-button#pcSave\").querySelector(\"sb-i18n\")");

/*//Thread.sleep(1000);
SearchContext shadow10 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
//Thread.sleep(1000);
SearchContext shadow11 = shadow10.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
//Thread.sleep(1000);
WebElement saving1= shadow11.findElement(By.cssSelector("#pcSave"));*/

try {
//SearchContext saving1 =(SearchContext) excutor.executeScript("return document.querySelector(\"#sbPageContainer\").shadowRoot.querySelector(\"#content > sb-product-config\").shadowRoot.querySelector(\"#pcSave > sb-i18n\")");
//JavascriptExecutor jseq = (JavascriptExecutor) driver ;
	Thread.sleep(2000);
	SearchContext shadow10 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
	//Thread.sleep(1000);
	SearchContext shadow11 = shadow10.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
	//Thread.sleep(1000);
	WebElement saving1= shadow11.findElement(By.cssSelector("#pcSave"));
	
	JavascriptExecutor jsep = (JavascriptExecutor) driver ;
	jsep.executeScript("arguments[0].click();", saving1);
//excutor.executeScript("arguments[0].click();", saving1);


LOGS.info(Thread.currentThread() +"Clicked on Save Button on plans page");
}
catch(Exception end) {
	LOGS.info(Thread.currentThread() +"I am in catch block on Save Button on plans page");
}
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(25));

/*wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[@id='pcSave']/sb-i18n")));*/

/*WebElement shadowDomHostElement425 = driver.findElement(By.cssSelector("#sbPageContainer"));
SearchContext last425 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement425);
//Thread.sleep(1000);
WebElement shadowDomHostElement426 = last425.findElement(By.cssSelector("sb-product-config[class='--desktop']"));
SearchContext last426 = (SearchContext) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", shadowDomHostElement426);
WebElement shadowDomHostElement427 = last426.findElement(By.cssSelector("#pcSave"));*/


SearchContext shadow40 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
//Thread.sleep(1000);
SearchContext shadow41 = shadow40.findElement(By.cssSelector("sb-product-config[class='--desktop']")).getShadowRoot();
//Thread.sleep(1000);
WebElement saving2= shadow41.findElement(By.cssSelector("#pcSave"));
JavascriptExecutor jseq = (JavascriptExecutor) driver ;
jseq.executeScript("arguments[0].click();", saving2);

System.out.println("Clicked on save button in config page for second - 2");
LOGS.info(Thread.currentThread() +"Waited till Save enabled...");
try {
    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
    LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
    WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(8));
    //wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Add Products']")));

 

}catch(Exception ex) {
    LOGS.info("Wait is over and the Pocess continues.");
    }
//driver.findElement(By.xpath("//paper-button[@id='pcSave']/sb-i18n")).click();
LOGS.info(Thread.currentThread() +"Clicked on Save Button");
}
/*driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Calculate']")));
driver.findElement(By.xpath("//paper-button[text()='Calculate']")).click();
LOGS.info("Clicked on Calculate..");

driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
*/
 

//Quick Save
try {
	
	
    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(90));
    LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
    WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(11));


    SearchContext shadow0 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
    Thread.sleep(1000);
    SearchContext shadow1 = shadow0.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
    Thread.sleep(1000);
    SearchContext shadow2 = shadow1.findElement(By.cssSelector("sb-custom-action[name='Quick Save']")).getShadowRoot();
    Thread.sleep(1000);
    WebElement quicksave = shadow2.findElement(By.cssSelector("#mainButton"));

    JavascriptExecutor jsea = (JavascriptExecutor) driver ;
    jsea.executeScript("arguments[0].click();", quicksave);

    LOGS.info("Clicked on Quick Save..");
}catch(Exception ex) {
    LOGS.info("Wait is over and the Process continues.");
    }
/*driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);
wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//paper-button[text()='Quick Save']")));
driver.findElement(By.xpath("//paper-button[text()='Quick Save']")).click();
LOGS.info("Clicked on Quick Save..");
driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);*/
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(70));

 

//final save
try {
	 LOGS.info("Going to click on main save button on quote page");
	Thread.sleep(3000);
	
    //driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(50));
    LOGS.info("Waiting for the Tab to open by Holding the driver control to wait");
    WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(11));

    SearchContext shadow0 = driver.findElement(By.cssSelector("#sbPageContainer")).getShadowRoot();
    Thread.sleep(1000);
    SearchContext shadow1 = shadow0.findElement(By.cssSelector("sb-line-editor[class='--desktop']")).getShadowRoot();
    Thread.sleep(1000);
    SearchContext shadow2 = shadow1.findElement(By.cssSelector("sb-custom-action[name='Save and Select Subscriptions']")).getShadowRoot();
    Thread.sleep(1000);
    WebElement mainbtn = shadow2.findElement(By.cssSelector("#mainButton"));
    
    JavascriptExecutor jseb = (JavascriptExecutor) driver ;
    jseb.executeScript("arguments[0].click();", mainbtn);
    LOGS.info("Clicked on main save button on quote page");
    

}catch(Exception ex) {
    LOGS.info("In catch block for main save button");
    }

//wait.until(ExpectedConditions.presenceOfElementLocated(addItem)).click();
/*wait.until(ExpectedConditions.elementToBeClickable(SLocator("SaveBtn")));
WebElement myelement = driver.findElement(By.xpath("//paper-button[text()='Save']"));*/
JavascriptExecutor jse2 = (JavascriptExecutor)driver;
//jse2.executeScript("arguments[0].click();", myelement); 
//LOGS.info("Clicked on Final Save...");

 

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
String Genrate_to_SubmitQuoteProcess= Genrate_to_SubmitQuote(changeInProduct_1);

 

if(Genrate_to_SubmitQuoteProcess.equalsIgnoreCase("Fail")){

 

LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Failed");       
}else {
LOGS.info(Thread.currentThread() +"Genrate_to_SubmitQuoteProcess - Method Passed");

 

}     

 

Status="Pass";

 

 

} catch (Exception e) {
// TODO Auto-generated catch block
e.printStackTrace();
Status="Fail";
}
}

}
